# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `CreditNote`.
# Please instead update this file by running `bin/tapioca dsl CreditNote`.


class CreditNote
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(ActiveStorage::Attached::One) }
  def file; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def file=(attachable); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def credit_statuses; end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(::CreditNote)
    end
    def new(attributes = nil, &block); end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def reasons; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def refund_statuses; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def statuses; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::CreditNote).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::CreditNote).void)).returns(::CreditNote) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(T::Array[::CreditNote])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(::CreditNote)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::CreditNote).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::CreditNote).void)).returns(::CreditNote) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(T::Array[::CreditNote])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(::CreditNote)
    end
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::CreditNote).void)).returns(::CreditNote) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(T::Array[::CreditNote])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(::CreditNote)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(T::Array[::CreditNote])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(::CreditNote)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(T::Array[::CreditNote])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(::CreditNote)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::CreditNote]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::CreditNote)) }
    def fifth; end

    sig { returns(::CreditNote) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::CreditNote)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::CreditNote])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::CreditNote).void).returns(T.nilable(::CreditNote)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::CreditNote)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::CreditNote) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::CreditNote).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::CreditNote])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::CreditNote]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::CreditNote]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(T::Array[::CreditNote])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(::CreditNote)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(T::Array[::CreditNote])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(::CreditNote)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(T::Array[::CreditNote])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(::CreditNote)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::CreditNote)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::CreditNote) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::CreditNote) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::CreditNote)) }
    sig { params(limit: Integer).returns(T::Array[::CreditNote]) }
    def first(limit = nil); end

    sig { returns(::CreditNote) }
    def first!; end

    sig { returns(T.nilable(::CreditNote)) }
    def forty_two; end

    sig { returns(::CreditNote) }
    def forty_two!; end

    sig { returns(T.nilable(::CreditNote)) }
    def fourth; end

    sig { returns(::CreditNote) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::CreditNote)) }
    sig { params(limit: Integer).returns(T::Array[::CreditNote]) }
    def last(limit = nil); end

    sig { returns(::CreditNote) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::CreditNote).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::CreditNote).void)).returns(::CreditNote) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(T::Array[::CreditNote])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CreditNote).void)
      ).returns(::CreditNote)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::CreditNote).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::CreditNote).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::CreditNote)) }
    def second; end

    sig { returns(::CreditNote) }
    def second!; end

    sig { returns(T.nilable(::CreditNote)) }
    def second_to_last; end

    sig { returns(::CreditNote) }
    def second_to_last!; end

    sig { returns(::CreditNote) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::CreditNote).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::CreditNote)) }
    sig { params(limit: Integer).returns(T::Array[::CreditNote]) }
    def take(limit = nil); end

    sig { returns(::CreditNote) }
    def take!; end

    sig { returns(T.nilable(::CreditNote)) }
    def third; end

    sig { returns(::CreditNote) }
    def third!; end

    sig { returns(T.nilable(::CreditNote)) }
    def third_to_last; end

    sig { returns(::CreditNote) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def available!; end

    sig { returns(T::Boolean) }
    def available?; end

    sig { void }
    def consumed!; end

    sig { returns(T::Boolean) }
    def consumed?; end

    sig { void }
    def draft!; end

    sig { returns(T::Boolean) }
    def draft?; end

    sig { void }
    def duplicated_charge!; end

    sig { returns(T::Boolean) }
    def duplicated_charge?; end

    sig { void }
    def failed!; end

    sig { returns(T::Boolean) }
    def failed?; end

    sig { void }
    def finalized!; end

    sig { returns(T::Boolean) }
    def finalized?; end

    sig { void }
    def fraudulent_charge!; end

    sig { returns(T::Boolean) }
    def fraudulent_charge?; end

    sig { void }
    def order_cancellation!; end

    sig { returns(T::Boolean) }
    def order_cancellation?; end

    sig { void }
    def order_change!; end

    sig { returns(T::Boolean) }
    def order_change?; end

    sig { void }
    def other!; end

    sig { returns(T::Boolean) }
    def other?; end

    sig { void }
    def pending!; end

    sig { returns(T::Boolean) }
    def pending?; end

    sig { void }
    def product_unsatisfactory!; end

    sig { returns(T::Boolean) }
    def product_unsatisfactory?; end

    sig { void }
    def succeeded!; end

    sig { returns(T::Boolean) }
    def succeeded?; end

    sig { void }
    def voided!; end

    sig { returns(T::Boolean) }
    def voided?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def applied_tax_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_tax_ids=(ids); end

    # This method is created by ActiveRecord on the `CreditNote` class because it declared `has_many :applied_taxes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CreditNote::AppliedTax::PrivateCollectionProxy) }
    def applied_taxes; end

    sig { params(value: T::Enumerable[::CreditNote::AppliedTax]).void }
    def applied_taxes=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def build_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_file_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_file_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Invoice) }
    def build_invoice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def build_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_file_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_file_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_file_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_file_blob!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Invoice) }
    def create_invoice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Invoice) }
    def create_invoice!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization!(*args, &blk); end

    sig { returns(T.nilable(::Customer)) }
    def customer; end

    sig { params(value: T.nilable(::Customer)).void }
    def customer=(value); end

    sig { returns(T::Boolean) }
    def customer_changed?; end

    sig { returns(T::Boolean) }
    def customer_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def error_detail_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def error_detail_ids=(ids); end

    # This method is created by ActiveRecord on the `CreditNote` class because it declared `has_many :error_details`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ErrorDetail::PrivateCollectionProxy) }
    def error_details; end

    sig { params(value: T::Enumerable[::ErrorDetail]).void }
    def error_details=(value); end

    sig { returns(T::Array[T.untyped]) }
    def fee_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def fee_ids=(ids); end

    # This method is created by ActiveRecord on the `CreditNote` class because it declared `has_many :fees, through: :items`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Fee::PrivateCollectionProxy) }
    def fees; end

    sig { params(value: T::Enumerable[::Fee]).void }
    def fees=(value); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def file_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def file_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def file_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def file_blob=(value); end

    sig { returns(T::Array[T.untyped]) }
    def integration_resource_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_resource_ids=(ids); end

    # This method is created by ActiveRecord on the `CreditNote` class because it declared `has_many :integration_resources`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationResource::PrivateCollectionProxy) }
    def integration_resources; end

    sig { params(value: T::Enumerable[::IntegrationResource]).void }
    def integration_resources=(value); end

    sig { returns(T.nilable(::Invoice)) }
    def invoice; end

    sig { params(value: T.nilable(::Invoice)).void }
    def invoice=(value); end

    sig { returns(T::Boolean) }
    def invoice_changed?; end

    sig { returns(T::Boolean) }
    def invoice_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def item_ids=(ids); end

    # This method is created by ActiveRecord on the `CreditNote` class because it declared `has_many :items`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CreditNoteItem::PrivateCollectionProxy) }
    def items; end

    sig { params(value: T::Enumerable[::CreditNoteItem]).void }
    def items=(value); end

    sig { returns(T.nilable(::Organization)) }
    def organization; end

    sig { params(value: T.nilable(::Organization)).void }
    def organization=(value); end

    sig { returns(T::Array[T.untyped]) }
    def refund_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def refund_ids=(ids); end

    # This method is created by ActiveRecord on the `CreditNote` class because it declared `has_many :refunds`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Refund::PrivateCollectionProxy) }
    def refunds; end

    sig { params(value: T::Enumerable[::Refund]).void }
    def refunds=(value); end

    sig { returns(T.nilable(::Customer)) }
    def reload_customer; end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_file_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_file_blob; end

    sig { returns(T.nilable(::Invoice)) }
    def reload_invoice; end

    sig { returns(T.nilable(::Organization)) }
    def reload_organization; end

    sig { void }
    def reset_customer; end

    sig { void }
    def reset_file_attachment; end

    sig { void }
    def reset_file_blob; end

    sig { void }
    def reset_invoice; end

    sig { void }
    def reset_organization; end

    sig { returns(T::Array[T.untyped]) }
    def tax_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tax_ids=(ids); end

    # This method is created by ActiveRecord on the `CreditNote` class because it declared `has_many :taxes, through: :applied_taxes`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Tax::PrivateCollectionProxy) }
    def taxes; end

    sig { params(value: T::Enumerable[::Tax]).void }
    def taxes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def version_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def version_ids=(ids); end

    # This method is created by ActiveRecord on the `CreditNote` class because it declared `has_many :versions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaperTrail::Version::PrivateCollectionProxy) }
    def versions; end

    sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
    def versions=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def available(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def consumed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def duplicated_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def finalized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def fraudulent_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_available(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_consumed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_duplicated_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_finalized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_fraudulent_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_order_cancellation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_order_change(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_other(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_product_unsatisfactory(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_voided(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order_cancellation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order_change(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def other(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def product_unsatisfactory(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::CreditNote).returns(BasicObject)).returns(T::Array[::CreditNote]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def voided(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_file(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_sequential_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def balance_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def balance_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def balance_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def balance_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def balance_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def balance_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def balance_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def balance_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def balance_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def balance_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def balance_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def balance_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def balance_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def balance_amount_cents_was; end

    sig { void }
    def balance_amount_cents_will_change!; end

    sig { returns(::String) }
    def balance_amount_currency; end

    sig { params(value: ::String).returns(::String) }
    def balance_amount_currency=(value); end

    sig { returns(T::Boolean) }
    def balance_amount_currency?; end

    sig { returns(T.nilable(::String)) }
    def balance_amount_currency_before_last_save; end

    sig { returns(T.untyped) }
    def balance_amount_currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def balance_amount_currency_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def balance_amount_currency_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def balance_amount_currency_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def balance_amount_currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def balance_amount_currency_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def balance_amount_currency_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def balance_amount_currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def balance_amount_currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def balance_amount_currency_was; end

    sig { void }
    def balance_amount_currency_will_change!; end

    sig { returns(::Integer) }
    def coupons_adjustment_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def coupons_adjustment_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def coupons_adjustment_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def coupons_adjustment_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def coupons_adjustment_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def coupons_adjustment_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def coupons_adjustment_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def coupons_adjustment_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def coupons_adjustment_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def coupons_adjustment_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def coupons_adjustment_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def coupons_adjustment_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def coupons_adjustment_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def coupons_adjustment_amount_cents_was; end

    sig { void }
    def coupons_adjustment_amount_cents_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def credit_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def credit_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def credit_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def credit_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def credit_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def credit_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def credit_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def credit_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def credit_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def credit_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def credit_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def credit_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def credit_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def credit_amount_cents_was; end

    sig { void }
    def credit_amount_cents_will_change!; end

    sig { returns(::String) }
    def credit_amount_currency; end

    sig { params(value: ::String).returns(::String) }
    def credit_amount_currency=(value); end

    sig { returns(T::Boolean) }
    def credit_amount_currency?; end

    sig { returns(T.nilable(::String)) }
    def credit_amount_currency_before_last_save; end

    sig { returns(T.untyped) }
    def credit_amount_currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def credit_amount_currency_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def credit_amount_currency_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def credit_amount_currency_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def credit_amount_currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def credit_amount_currency_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def credit_amount_currency_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def credit_amount_currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def credit_amount_currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def credit_amount_currency_was; end

    sig { void }
    def credit_amount_currency_will_change!; end

    sig { returns(T.nilable(::String)) }
    def credit_status; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def credit_status=(value); end

    sig { returns(T::Boolean) }
    def credit_status?; end

    sig { returns(T.nilable(::String)) }
    def credit_status_before_last_save; end

    sig { returns(T.untyped) }
    def credit_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def credit_status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def credit_status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def credit_status_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def credit_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def credit_status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def credit_status_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def credit_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def credit_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def credit_status_was; end

    sig { void }
    def credit_status_will_change!; end

    sig { returns(::String) }
    def customer_id; end

    sig { params(value: ::String).returns(::String) }
    def customer_id=(value); end

    sig { returns(T::Boolean) }
    def customer_id?; end

    sig { returns(T.nilable(::String)) }
    def customer_id_before_last_save; end

    sig { returns(T.untyped) }
    def customer_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def customer_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def customer_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def customer_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def customer_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def customer_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def customer_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def customer_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def customer_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def customer_id_was; end

    sig { void }
    def customer_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::String)) }
    def file; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def file=(value); end

    sig { returns(T::Boolean) }
    def file?; end

    sig { returns(T.nilable(::String)) }
    def file_before_last_save; end

    sig { returns(T.untyped) }
    def file_before_type_cast; end

    sig { returns(T::Boolean) }
    def file_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def file_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def file_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def file_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def file_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def file_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def file_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def file_previously_was; end

    sig { returns(T.nilable(::String)) }
    def file_was; end

    sig { void }
    def file_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def invoice_id; end

    sig { params(value: ::String).returns(::String) }
    def invoice_id=(value); end

    sig { returns(T::Boolean) }
    def invoice_id?; end

    sig { returns(T.nilable(::String)) }
    def invoice_id_before_last_save; end

    sig { returns(T.untyped) }
    def invoice_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def invoice_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def invoice_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def invoice_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def invoice_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def invoice_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def invoice_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def invoice_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def invoice_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def invoice_id_was; end

    sig { void }
    def invoice_id_will_change!; end

    sig { returns(::Date) }
    def issuing_date; end

    sig { params(value: ::Date).returns(::Date) }
    def issuing_date=(value); end

    sig { returns(T::Boolean) }
    def issuing_date?; end

    sig { returns(T.nilable(::Date)) }
    def issuing_date_before_last_save; end

    sig { returns(T.untyped) }
    def issuing_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def issuing_date_came_from_user?; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def issuing_date_change; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def issuing_date_change_to_be_saved; end

    sig { params(from: ::Date, to: ::Date).returns(T::Boolean) }
    def issuing_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def issuing_date_in_database; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def issuing_date_previous_change; end

    sig { params(from: ::Date, to: ::Date).returns(T::Boolean) }
    def issuing_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def issuing_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def issuing_date_was; end

    sig { void }
    def issuing_date_will_change!; end

    sig { returns(::String) }
    def number; end

    sig { params(value: ::String).returns(::String) }
    def number=(value); end

    sig { returns(T::Boolean) }
    def number?; end

    sig { returns(T.nilable(::String)) }
    def number_before_last_save; end

    sig { returns(T.untyped) }
    def number_before_type_cast; end

    sig { returns(T::Boolean) }
    def number_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def number_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def number_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def number_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def number_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def number_was; end

    sig { void }
    def number_will_change!; end

    sig { returns(::BigDecimal) }
    def precise_coupons_adjustment_amount_cents; end

    sig { params(value: ::BigDecimal).returns(::BigDecimal) }
    def precise_coupons_adjustment_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def precise_coupons_adjustment_amount_cents?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def precise_coupons_adjustment_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def precise_coupons_adjustment_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def precise_coupons_adjustment_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def precise_coupons_adjustment_amount_cents_change; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def precise_coupons_adjustment_amount_cents_change_to_be_saved; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def precise_coupons_adjustment_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def precise_coupons_adjustment_amount_cents_in_database; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def precise_coupons_adjustment_amount_cents_previous_change; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def precise_coupons_adjustment_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def precise_coupons_adjustment_amount_cents_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def precise_coupons_adjustment_amount_cents_was; end

    sig { void }
    def precise_coupons_adjustment_amount_cents_will_change!; end

    sig { returns(::BigDecimal) }
    def precise_taxes_amount_cents; end

    sig { params(value: ::BigDecimal).returns(::BigDecimal) }
    def precise_taxes_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def precise_taxes_amount_cents?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def precise_taxes_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def precise_taxes_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def precise_taxes_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def precise_taxes_amount_cents_change; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def precise_taxes_amount_cents_change_to_be_saved; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def precise_taxes_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def precise_taxes_amount_cents_in_database; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def precise_taxes_amount_cents_previous_change; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def precise_taxes_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def precise_taxes_amount_cents_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def precise_taxes_amount_cents_was; end

    sig { void }
    def precise_taxes_amount_cents_will_change!; end

    sig { returns(::String) }
    def reason; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def reason=(value); end

    sig { returns(T::Boolean) }
    def reason?; end

    sig { returns(T.nilable(::String)) }
    def reason_before_last_save; end

    sig { returns(T.untyped) }
    def reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def reason_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def reason_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def reason_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reason_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def reason_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def reason_was; end

    sig { void }
    def reason_will_change!; end

    sig { returns(::Integer) }
    def refund_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def refund_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def refund_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def refund_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def refund_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def refund_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def refund_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def refund_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def refund_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def refund_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def refund_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def refund_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def refund_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def refund_amount_cents_was; end

    sig { void }
    def refund_amount_cents_will_change!; end

    sig { returns(T.nilable(::String)) }
    def refund_amount_currency; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def refund_amount_currency=(value); end

    sig { returns(T::Boolean) }
    def refund_amount_currency?; end

    sig { returns(T.nilable(::String)) }
    def refund_amount_currency_before_last_save; end

    sig { returns(T.untyped) }
    def refund_amount_currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def refund_amount_currency_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refund_amount_currency_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refund_amount_currency_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def refund_amount_currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refund_amount_currency_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refund_amount_currency_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def refund_amount_currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refund_amount_currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def refund_amount_currency_was; end

    sig { void }
    def refund_amount_currency_will_change!; end

    sig { returns(T.nilable(::String)) }
    def refund_status; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def refund_status=(value); end

    sig { returns(T::Boolean) }
    def refund_status?; end

    sig { returns(T.nilable(::String)) }
    def refund_status_before_last_save; end

    sig { returns(T.untyped) }
    def refund_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def refund_status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refund_status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refund_status_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def refund_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refund_status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def refund_status_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def refund_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def refund_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def refund_status_was; end

    sig { void }
    def refund_status_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refunded_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refunded_at=(value); end

    sig { returns(T::Boolean) }
    def refunded_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refunded_at_before_last_save; end

    sig { returns(T.untyped) }
    def refunded_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def refunded_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def refunded_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def refunded_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def refunded_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refunded_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def refunded_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def refunded_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refunded_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def refunded_at_was; end

    sig { void }
    def refunded_at_will_change!; end

    sig { void }
    def restore_balance_amount_cents!; end

    sig { void }
    def restore_balance_amount_currency!; end

    sig { void }
    def restore_coupons_adjustment_amount_cents!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_credit_amount_cents!; end

    sig { void }
    def restore_credit_amount_currency!; end

    sig { void }
    def restore_credit_status!; end

    sig { void }
    def restore_customer_id!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_file!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_invoice_id!; end

    sig { void }
    def restore_issuing_date!; end

    sig { void }
    def restore_number!; end

    sig { void }
    def restore_precise_coupons_adjustment_amount_cents!; end

    sig { void }
    def restore_precise_taxes_amount_cents!; end

    sig { void }
    def restore_reason!; end

    sig { void }
    def restore_refund_amount_cents!; end

    sig { void }
    def restore_refund_amount_currency!; end

    sig { void }
    def restore_refund_status!; end

    sig { void }
    def restore_refunded_at!; end

    sig { void }
    def restore_sequential_id!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_taxes_amount_cents!; end

    sig { void }
    def restore_taxes_rate!; end

    sig { void }
    def restore_total_amount_cents!; end

    sig { void }
    def restore_total_amount_currency!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_voided_at!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_balance_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_balance_amount_cents?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_balance_amount_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_balance_amount_currency?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_coupons_adjustment_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_coupons_adjustment_amount_cents?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_credit_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_credit_amount_cents?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_credit_amount_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_credit_amount_currency?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_credit_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_credit_status?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_customer_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_customer_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_file; end

    sig { returns(T::Boolean) }
    def saved_change_to_file?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_invoice_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_invoice_id?; end

    sig { returns(T.nilable([::Date, ::Date])) }
    def saved_change_to_issuing_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_issuing_date?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_number?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def saved_change_to_precise_coupons_adjustment_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_precise_coupons_adjustment_amount_cents?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def saved_change_to_precise_taxes_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_precise_taxes_amount_cents?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_reason?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_refund_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_refund_amount_cents?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_refund_amount_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_refund_amount_currency?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_refund_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_refund_status?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_refunded_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_refunded_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sequential_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sequential_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_status?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_taxes_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_taxes_amount_cents?; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def saved_change_to_taxes_rate; end

    sig { returns(T::Boolean) }
    def saved_change_to_taxes_rate?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_total_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_total_amount_cents?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_total_amount_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_total_amount_currency?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_voided_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_voided_at?; end

    sig { returns(::Integer) }
    def sequential_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sequential_id=(value); end

    sig { returns(T::Boolean) }
    def sequential_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_before_last_save; end

    sig { returns(T.untyped) }
    def sequential_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sequential_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sequential_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sequential_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sequential_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sequential_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sequential_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_was; end

    sig { void }
    def sequential_id_will_change!; end

    sig { returns(::String) }
    def status; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(::Integer) }
    def taxes_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def taxes_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def taxes_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def taxes_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def taxes_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def taxes_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def taxes_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def taxes_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def taxes_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def taxes_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def taxes_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def taxes_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def taxes_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def taxes_amount_cents_was; end

    sig { void }
    def taxes_amount_cents_will_change!; end

    sig { returns(::Float) }
    def taxes_rate; end

    sig { params(value: ::Float).returns(::Float) }
    def taxes_rate=(value); end

    sig { returns(T::Boolean) }
    def taxes_rate?; end

    sig { returns(T.nilable(::Float)) }
    def taxes_rate_before_last_save; end

    sig { returns(T.untyped) }
    def taxes_rate_before_type_cast; end

    sig { returns(T::Boolean) }
    def taxes_rate_came_from_user?; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def taxes_rate_change; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def taxes_rate_change_to_be_saved; end

    sig { params(from: ::Float, to: ::Float).returns(T::Boolean) }
    def taxes_rate_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def taxes_rate_in_database; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def taxes_rate_previous_change; end

    sig { params(from: ::Float, to: ::Float).returns(T::Boolean) }
    def taxes_rate_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def taxes_rate_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def taxes_rate_was; end

    sig { void }
    def taxes_rate_will_change!; end

    sig { returns(::Integer) }
    def total_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def total_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def total_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def total_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def total_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def total_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def total_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def total_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def total_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def total_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def total_amount_cents_was; end

    sig { void }
    def total_amount_cents_will_change!; end

    sig { returns(::String) }
    def total_amount_currency; end

    sig { params(value: ::String).returns(::String) }
    def total_amount_currency=(value); end

    sig { returns(T::Boolean) }
    def total_amount_currency?; end

    sig { returns(T.nilable(::String)) }
    def total_amount_currency_before_last_save; end

    sig { returns(T.untyped) }
    def total_amount_currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def total_amount_currency_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def total_amount_currency_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def total_amount_currency_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def total_amount_currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def total_amount_currency_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def total_amount_currency_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def total_amount_currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def total_amount_currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def total_amount_currency_was; end

    sig { void }
    def total_amount_currency_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at=(value); end

    sig { returns(T::Boolean) }
    def voided_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at_before_last_save; end

    sig { returns(T.untyped) }
    def voided_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def voided_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def voided_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def voided_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def voided_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def voided_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def voided_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at_was; end

    sig { void }
    def voided_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_balance_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_balance_amount_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_coupons_adjustment_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_credit_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_credit_amount_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_credit_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_customer_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_file?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invoice_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_issuing_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_precise_coupons_adjustment_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_precise_taxes_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_refund_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_refund_amount_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_refund_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_refunded_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sequential_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_taxes_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_taxes_rate?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_total_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_total_amount_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_voided_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def available(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def consumed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def duplicated_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def finalized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def fraudulent_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_available(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_consumed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_duplicated_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_finalized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_fraudulent_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_order_cancellation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_order_change(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_other(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_product_unsatisfactory(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_voided(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order_cancellation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order_change(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def other(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def product_unsatisfactory(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::CreditNote).returns(BasicObject)).returns(T::Array[::CreditNote]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def voided(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_file(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_sequential_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::CreditNote } }

    sig { returns(T::Array[::CreditNote]) }
    def to_a; end

    sig { returns(T::Array[::CreditNote]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::CreditNote } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::CreditNote } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::CreditNote } }

    sig do
      params(
        records: T.any(::CreditNote, T::Enumerable[T.any(::CreditNote, T::Enumerable[::CreditNote])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::CreditNote, T::Enumerable[T.any(::CreditNote, T::Enumerable[::CreditNote])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::CreditNote, T::Enumerable[T.any(::CreditNote, T::Enumerable[::CreditNote])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::CreditNote, Integer, String, T::Enumerable[T.any(::CreditNote, Integer, String, T::Enumerable[::CreditNote])])
      ).returns(T::Array[::CreditNote])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::CreditNote, Integer, String, T::Enumerable[T.any(::CreditNote, Integer, String, T::Enumerable[::CreditNote])])
      ).returns(T::Array[::CreditNote])
    end
    def destroy(*records); end

    sig { returns(T::Array[::CreditNote]) }
    def load_target; end

    sig do
      params(
        records: T.any(::CreditNote, T::Enumerable[T.any(::CreditNote, T::Enumerable[::CreditNote])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::CreditNote, T::Enumerable[T.any(::CreditNote, T::Enumerable[::CreditNote])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::CreditNote, T::Enumerable[T.any(::CreditNote, T::Enumerable[::CreditNote])])
      ).returns(T::Array[::CreditNote])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::CreditNote]) }
    def target; end

    sig { returns(T::Array[::CreditNote]) }
    def to_a; end

    sig { returns(T::Array[::CreditNote]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::CreditNote } }

    sig { returns(T::Array[::CreditNote]) }
    def to_a; end

    sig { returns(T::Array[::CreditNote]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::CreditNote } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::CreditNote } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
