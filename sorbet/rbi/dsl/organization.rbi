# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Organization`.
# Please instead update this file by running `bin/tapioca dsl Organization`.


class Organization
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(ActiveStorage::Attached::One) }
  def logo; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def logo=(attachable); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def document_numberings; end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(::Organization)
    end
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Organization).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Organization).void)).returns(::Organization) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(T::Array[::Organization])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(::Organization)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Organization).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Organization).void)).returns(::Organization) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(T::Array[::Organization])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(::Organization)
    end
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Organization).void)).returns(::Organization) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(T::Array[::Organization])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(::Organization)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(T::Array[::Organization])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(::Organization)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(T::Array[::Organization])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(::Organization)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Organization]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Organization)) }
    def fifth; end

    sig { returns(::Organization) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Organization)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Organization])
    end
    sig do
      params(
        args: NilClass,
        block: T.proc.params(object: ::Organization).void
      ).returns(T.nilable(::Organization))
    end
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Organization)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Organization) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Organization).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Organization])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Organization]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Organization]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(T::Array[::Organization])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(::Organization)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(T::Array[::Organization])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(::Organization)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(T::Array[::Organization])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(::Organization)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Organization)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Organization) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Organization) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Organization)) }
    sig { params(limit: Integer).returns(T::Array[::Organization]) }
    def first(limit = nil); end

    sig { returns(::Organization) }
    def first!; end

    sig { returns(T.nilable(::Organization)) }
    def forty_two; end

    sig { returns(::Organization) }
    def forty_two!; end

    sig { returns(T.nilable(::Organization)) }
    def fourth; end

    sig { returns(::Organization) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Organization)) }
    sig { params(limit: Integer).returns(T::Array[::Organization]) }
    def last(limit = nil); end

    sig { returns(::Organization) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Organization).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Organization).void)).returns(::Organization) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(T::Array[::Organization])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Organization).void)
      ).returns(::Organization)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Organization).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Organization).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Organization)) }
    def second; end

    sig { returns(::Organization) }
    def second!; end

    sig { returns(T.nilable(::Organization)) }
    def second_to_last; end

    sig { returns(::Organization) }
    def second_to_last!; end

    sig { returns(::Organization) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Organization).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Organization)) }
    sig { params(limit: Integer).returns(T::Array[::Organization]) }
    def take(limit = nil); end

    sig { returns(::Organization) }
    def take!; end

    sig { returns(T.nilable(::Organization)) }
    def third; end

    sig { returns(::Organization) }
    def third!; end

    sig { returns(T.nilable(::Organization)) }
    def third_to_last; end

    sig { returns(::Organization) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def per_customer!; end

    sig { returns(T::Boolean) }
    def per_customer?; end

    sig { void }
    def per_organization!; end

    sig { returns(T::Boolean) }
    def per_organization?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def add_on_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def add_on_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :add_ons`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AddOn::PrivateCollectionProxy) }
    def add_ons; end

    sig { params(value: T::Enumerable[::AddOn]).void }
    def add_ons=(value); end

    sig { returns(T::Array[T.untyped]) }
    def adyen_payment_provider_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def adyen_payment_provider_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :adyen_payment_providers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaymentProviders::AdyenProvider::PrivateCollectionProxy) }
    def adyen_payment_providers; end

    sig { params(value: T::Enumerable[::PaymentProviders::AdyenProvider]).void }
    def adyen_payment_providers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def api_key_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def api_key_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :api_keys`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ApiKey::PrivateCollectionProxy) }
    def api_keys; end

    sig { params(value: T::Enumerable[::ApiKey]).void }
    def api_keys=(value); end

    sig { returns(T::Array[T.untyped]) }
    def applied_coupon_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_coupon_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :applied_coupons, through: :coupons`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::AppliedCoupon::PrivateCollectionProxy) }
    def applied_coupons; end

    sig { params(value: T::Enumerable[::AppliedCoupon]).void }
    def applied_coupons=(value); end

    sig { returns(T.nilable(::DunningCampaign)) }
    def applied_dunning_campaign; end

    sig { params(value: T.nilable(::DunningCampaign)).void }
    def applied_dunning_campaign=(value); end

    sig { returns(T::Array[T.untyped]) }
    def billable_metric_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def billable_metric_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :billable_metrics`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BillableMetric::PrivateCollectionProxy) }
    def billable_metrics; end

    sig { params(value: T::Enumerable[::BillableMetric]).void }
    def billable_metrics=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DunningCampaign) }
    def build_applied_dunning_campaign(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_logo_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_logo_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integrations::SalesforceIntegration) }
    def build_salesforce_integration(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def cached_aggregation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def cached_aggregation_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :cached_aggregations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CachedAggregation::PrivateCollectionProxy) }
    def cached_aggregations; end

    sig { params(value: T::Enumerable[::CachedAggregation]).void }
    def cached_aggregations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def cashfree_payment_provider_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def cashfree_payment_provider_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :cashfree_payment_providers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaymentProviders::CashfreeProvider::PrivateCollectionProxy) }
    def cashfree_payment_providers; end

    sig { params(value: T::Enumerable[::PaymentProviders::CashfreeProvider]).void }
    def cashfree_payment_providers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def coupon_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def coupon_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :coupons`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Coupon::PrivateCollectionProxy) }
    def coupons; end

    sig { params(value: T::Enumerable[::Coupon]).void }
    def coupons=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DunningCampaign) }
    def create_applied_dunning_campaign(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DunningCampaign) }
    def create_applied_dunning_campaign!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_logo_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_logo_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_logo_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_logo_blob!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integrations::SalesforceIntegration) }
    def create_salesforce_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integrations::SalesforceIntegration) }
    def create_salesforce_integration!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def credit_note_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def credit_note_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :credit_notes, through: :invoices`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::CreditNote::PrivateCollectionProxy) }
    def credit_notes; end

    sig { params(value: T::Enumerable[::CreditNote]).void }
    def credit_notes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def customer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def customer_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :customers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Customer::PrivateCollectionProxy) }
    def customers; end

    sig { params(value: T::Enumerable[::Customer]).void }
    def customers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def daily_usage_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def daily_usage_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :daily_usages`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DailyUsage::PrivateCollectionProxy) }
    def daily_usages; end

    sig { params(value: T::Enumerable[::DailyUsage]).void }
    def daily_usages=(value); end

    sig { returns(T::Array[T.untyped]) }
    def data_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def data_export_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :data_exports`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DataExport::PrivateCollectionProxy) }
    def data_exports; end

    sig { params(value: T::Enumerable[::DataExport]).void }
    def data_exports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def dunning_campaign_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def dunning_campaign_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :dunning_campaigns`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DunningCampaign::PrivateCollectionProxy) }
    def dunning_campaigns; end

    sig { params(value: T::Enumerable[::DunningCampaign]).void }
    def dunning_campaigns=(value); end

    sig { returns(T::Array[T.untyped]) }
    def error_detail_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def error_detail_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :error_details`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ErrorDetail::PrivateCollectionProxy) }
    def error_details; end

    sig { params(value: T::Enumerable[::ErrorDetail]).void }
    def error_details=(value); end

    sig { returns(T::Array[T.untyped]) }
    def event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def event_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :events`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Event::PrivateCollectionProxy) }
    def events; end

    sig { params(value: T::Enumerable[::Event]).void }
    def events=(value); end

    sig { returns(T::Array[T.untyped]) }
    def fee_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def fee_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :fees, through: :subscriptions`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Fee::PrivateCollectionProxy) }
    def fees; end

    sig { params(value: T::Enumerable[::Fee]).void }
    def fees=(value); end

    sig { returns(T::Array[T.untyped]) }
    def gocardless_payment_provider_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gocardless_payment_provider_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :gocardless_payment_providers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaymentProviders::GocardlessProvider::PrivateCollectionProxy) }
    def gocardless_payment_providers; end

    sig { params(value: T::Enumerable[::PaymentProviders::GocardlessProvider]).void }
    def gocardless_payment_providers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def hubspot_integration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def hubspot_integration_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :hubspot_integrations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Integrations::HubspotIntegration::PrivateCollectionProxy) }
    def hubspot_integrations; end

    sig { params(value: T::Enumerable[::Integrations::HubspotIntegration]).void }
    def hubspot_integrations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def integration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :integrations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Integrations::BaseIntegration::PrivateCollectionProxy) }
    def integrations; end

    sig { params(value: T::Enumerable[::Integrations::BaseIntegration]).void }
    def integrations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invite_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invite_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :invites`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Invite::PrivateCollectionProxy) }
    def invites; end

    sig { params(value: T::Enumerable[::Invite]).void }
    def invites=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invoice_custom_section_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invoice_custom_section_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def invoice_custom_section_selection_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invoice_custom_section_selection_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :invoice_custom_section_selections`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::InvoiceCustomSectionSelection::PrivateCollectionProxy) }
    def invoice_custom_section_selections; end

    sig { params(value: T::Enumerable[::InvoiceCustomSectionSelection]).void }
    def invoice_custom_section_selections=(value); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :invoice_custom_sections`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::InvoiceCustomSection::PrivateCollectionProxy) }
    def invoice_custom_sections; end

    sig { params(value: T::Enumerable[::InvoiceCustomSection]).void }
    def invoice_custom_sections=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invoice_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invoice_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :invoices`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Invoice::PrivateCollectionProxy) }
    def invoices; end

    sig { params(value: T::Enumerable[::Invoice]).void }
    def invoices=(value); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def logo_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def logo_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def logo_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def logo_blob=(value); end

    sig { returns(T::Array[T.untyped]) }
    def membership_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def membership_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :memberships`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Membership::PrivateCollectionProxy) }
    def memberships; end

    sig { params(value: T::Enumerable[::Membership]).void }
    def memberships=(value); end

    sig { returns(T::Array[T.untyped]) }
    def netsuite_integration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def netsuite_integration_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :netsuite_integrations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Integrations::NetsuiteIntegration::PrivateCollectionProxy) }
    def netsuite_integrations; end

    sig { params(value: T::Enumerable[::Integrations::NetsuiteIntegration]).void }
    def netsuite_integrations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def payment_provider_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def payment_provider_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :payment_providers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaymentProviders::BaseProvider::PrivateCollectionProxy) }
    def payment_providers; end

    sig { params(value: T::Enumerable[::PaymentProviders::BaseProvider]).void }
    def payment_providers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def payment_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def payment_request_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :payment_requests`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaymentRequest::PrivateCollectionProxy) }
    def payment_requests; end

    sig { params(value: T::Enumerable[::PaymentRequest]).void }
    def payment_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def plan_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def plan_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :plans`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Plan::PrivateCollectionProxy) }
    def plans; end

    sig { params(value: T::Enumerable[::Plan]).void }
    def plans=(value); end

    sig { returns(T.nilable(::DunningCampaign)) }
    def reload_applied_dunning_campaign; end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_logo_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_logo_blob; end

    sig { returns(T.nilable(::Integrations::SalesforceIntegration)) }
    def reload_salesforce_integration; end

    sig { void }
    def reset_applied_dunning_campaign; end

    sig { void }
    def reset_logo_attachment; end

    sig { void }
    def reset_logo_blob; end

    sig { void }
    def reset_salesforce_integration; end

    sig { returns(T.nilable(::Integrations::SalesforceIntegration)) }
    def salesforce_integration; end

    sig { params(value: T.nilable(::Integrations::SalesforceIntegration)).void }
    def salesforce_integration=(value); end

    sig { returns(T::Array[T.untyped]) }
    def selected_invoice_custom_section_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def selected_invoice_custom_section_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :selected_invoice_custom_sections, through: :invoice_custom_section_selections`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::InvoiceCustomSection::PrivateCollectionProxy) }
    def selected_invoice_custom_sections; end

    sig { params(value: T::Enumerable[::InvoiceCustomSection]).void }
    def selected_invoice_custom_sections=(value); end

    sig { returns(T::Array[T.untyped]) }
    def stripe_payment_provider_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def stripe_payment_provider_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :stripe_payment_providers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaymentProviders::StripeProvider::PrivateCollectionProxy) }
    def stripe_payment_providers; end

    sig { params(value: T::Enumerable[::PaymentProviders::StripeProvider]).void }
    def stripe_payment_providers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :subscriptions, through: :customers`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Subscription::PrivateCollectionProxy) }
    def subscriptions; end

    sig { params(value: T::Enumerable[::Subscription]).void }
    def subscriptions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tax_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tax_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :taxes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Tax::PrivateCollectionProxy) }
    def taxes; end

    sig { params(value: T::Enumerable[::Tax]).void }
    def taxes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :users, through: :memberships`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def users; end

    sig { params(value: T::Enumerable[::User]).void }
    def users=(value); end

    sig { returns(T::Array[T.untyped]) }
    def version_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def version_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :versions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaperTrail::Version::PrivateCollectionProxy) }
    def versions; end

    sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
    def versions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def wallet_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def wallet_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def wallet_transaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def wallet_transaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :wallet_transactions, through: :wallets`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::WalletTransaction::PrivateCollectionProxy) }
    def wallet_transactions; end

    sig { params(value: T::Enumerable[::WalletTransaction]).void }
    def wallet_transactions=(value); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :wallets, through: :customers`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Wallet::PrivateCollectionProxy) }
    def wallets; end

    sig { params(value: T::Enumerable[::Wallet]).void }
    def wallets=(value); end

    sig { returns(T::Array[T.untyped]) }
    def webhook_endpoint_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def webhook_endpoint_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :webhook_endpoints`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WebhookEndpoint::PrivateCollectionProxy) }
    def webhook_endpoints; end

    sig { params(value: T::Enumerable[::WebhookEndpoint]).void }
    def webhook_endpoints=(value); end

    sig { returns(T::Array[T.untyped]) }
    def webhook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def webhook_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :webhooks, through: :webhook_endpoints`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Webhook::PrivateCollectionProxy) }
    def webhooks; end

    sig { params(value: T::Enumerable[::Webhook]).void }
    def webhooks=(value); end

    sig { returns(T::Array[T.untyped]) }
    def xero_integration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def xero_integration_ids=(ids); end

    # This method is created by ActiveRecord on the `Organization` class because it declared `has_many :xero_integrations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Integrations::XeroIntegration::PrivateCollectionProxy) }
    def xero_integrations; end

    sig { params(value: T::Enumerable[::Integrations::XeroIntegration]).void }
    def xero_integrations=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_per_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_per_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def per_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def per_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Organization).returns(BasicObject)).returns(T::Array[::Organization]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_logo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def address_line1; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def address_line1=(value); end

    sig { returns(T::Boolean) }
    def address_line1?; end

    sig { returns(T.nilable(::String)) }
    def address_line1_before_last_save; end

    sig { returns(T.untyped) }
    def address_line1_before_type_cast; end

    sig { returns(T::Boolean) }
    def address_line1_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line1_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line1_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def address_line1_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_line1_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line1_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def address_line1_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_line1_previously_was; end

    sig { returns(T.nilable(::String)) }
    def address_line1_was; end

    sig { void }
    def address_line1_will_change!; end

    sig { returns(T.nilable(::String)) }
    def address_line2; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def address_line2=(value); end

    sig { returns(T::Boolean) }
    def address_line2?; end

    sig { returns(T.nilable(::String)) }
    def address_line2_before_last_save; end

    sig { returns(T.untyped) }
    def address_line2_before_type_cast; end

    sig { returns(T::Boolean) }
    def address_line2_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line2_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line2_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def address_line2_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_line2_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line2_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def address_line2_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_line2_previously_was; end

    sig { returns(T.nilable(::String)) }
    def address_line2_was; end

    sig { void }
    def address_line2_will_change!; end

    sig { returns(T.nilable(::String)) }
    def api_key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def api_key=(value); end

    sig { returns(T::Boolean) }
    def api_key?; end

    sig { returns(T.nilable(::String)) }
    def api_key_before_last_save; end

    sig { returns(T.untyped) }
    def api_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def api_key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def api_key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def api_key_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def api_key_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def api_key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def api_key_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def api_key_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def api_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def api_key_was; end

    sig { void }
    def api_key_will_change!; end

    sig { returns(T.nilable(::String)) }
    def city; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def city=(value); end

    sig { returns(T::Boolean) }
    def city?; end

    sig { returns(T.nilable(::String)) }
    def city_before_last_save; end

    sig { returns(T.untyped) }
    def city_before_type_cast; end

    sig { returns(T::Boolean) }
    def city_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def city_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def city_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def city_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def city_previously_was; end

    sig { returns(T.nilable(::String)) }
    def city_was; end

    sig { void }
    def city_will_change!; end

    sig { returns(T::Boolean) }
    def clickhouse_aggregation; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def clickhouse_aggregation=(value); end

    sig { returns(T::Boolean) }
    def clickhouse_aggregation?; end

    sig { returns(T.nilable(T::Boolean)) }
    def clickhouse_aggregation_before_last_save; end

    sig { returns(T.untyped) }
    def clickhouse_aggregation_before_type_cast; end

    sig { returns(T::Boolean) }
    def clickhouse_aggregation_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def clickhouse_aggregation_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def clickhouse_aggregation_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def clickhouse_aggregation_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def clickhouse_aggregation_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def clickhouse_aggregation_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def clickhouse_aggregation_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def clickhouse_aggregation_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def clickhouse_aggregation_was; end

    sig { void }
    def clickhouse_aggregation_will_change!; end

    sig { returns(T::Boolean) }
    def clickhouse_events_store; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def clickhouse_events_store=(value); end

    sig { returns(T::Boolean) }
    def clickhouse_events_store?; end

    sig { returns(T.nilable(T::Boolean)) }
    def clickhouse_events_store_before_last_save; end

    sig { returns(T.untyped) }
    def clickhouse_events_store_before_type_cast; end

    sig { returns(T::Boolean) }
    def clickhouse_events_store_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def clickhouse_events_store_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def clickhouse_events_store_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def clickhouse_events_store_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def clickhouse_events_store_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def clickhouse_events_store_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def clickhouse_events_store_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def clickhouse_events_store_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def clickhouse_events_store_was; end

    sig { void }
    def clickhouse_events_store_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country=(value); end

    sig { returns(T::Boolean) }
    def country?; end

    sig { returns(T.nilable(::String)) }
    def country_before_last_save; end

    sig { returns(T.untyped) }
    def country_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_was; end

    sig { void }
    def country_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def custom_aggregation; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def custom_aggregation=(value); end

    sig { returns(T::Boolean) }
    def custom_aggregation?; end

    sig { returns(T.nilable(T::Boolean)) }
    def custom_aggregation_before_last_save; end

    sig { returns(T.untyped) }
    def custom_aggregation_before_type_cast; end

    sig { returns(T::Boolean) }
    def custom_aggregation_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def custom_aggregation_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def custom_aggregation_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def custom_aggregation_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def custom_aggregation_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def custom_aggregation_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def custom_aggregation_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def custom_aggregation_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def custom_aggregation_was; end

    sig { void }
    def custom_aggregation_will_change!; end

    sig { returns(::String) }
    def default_currency; end

    sig { params(value: ::String).returns(::String) }
    def default_currency=(value); end

    sig { returns(T::Boolean) }
    def default_currency?; end

    sig { returns(T.nilable(::String)) }
    def default_currency_before_last_save; end

    sig { returns(T.untyped) }
    def default_currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def default_currency_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def default_currency_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def default_currency_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def default_currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_currency_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def default_currency_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def default_currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def default_currency_was; end

    sig { void }
    def default_currency_will_change!; end

    sig { returns(::String) }
    def document_locale; end

    sig { params(value: ::String).returns(::String) }
    def document_locale=(value); end

    sig { returns(T::Boolean) }
    def document_locale?; end

    sig { returns(T.nilable(::String)) }
    def document_locale_before_last_save; end

    sig { returns(T.untyped) }
    def document_locale_before_type_cast; end

    sig { returns(T::Boolean) }
    def document_locale_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def document_locale_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def document_locale_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def document_locale_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def document_locale_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def document_locale_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def document_locale_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def document_locale_previously_was; end

    sig { returns(T.nilable(::String)) }
    def document_locale_was; end

    sig { void }
    def document_locale_will_change!; end

    sig { returns(T.nilable(::String)) }
    def document_number_prefix; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def document_number_prefix=(value); end

    sig { returns(T::Boolean) }
    def document_number_prefix?; end

    sig { returns(T.nilable(::String)) }
    def document_number_prefix_before_last_save; end

    sig { returns(T.untyped) }
    def document_number_prefix_before_type_cast; end

    sig { returns(T::Boolean) }
    def document_number_prefix_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def document_number_prefix_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def document_number_prefix_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def document_number_prefix_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def document_number_prefix_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def document_number_prefix_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def document_number_prefix_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def document_number_prefix_previously_was; end

    sig { returns(T.nilable(::String)) }
    def document_number_prefix_was; end

    sig { void }
    def document_number_prefix_will_change!; end

    sig { returns(::String) }
    def document_numbering; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def document_numbering=(value); end

    sig { returns(T::Boolean) }
    def document_numbering?; end

    sig { returns(T.nilable(::String)) }
    def document_numbering_before_last_save; end

    sig { returns(T.untyped) }
    def document_numbering_before_type_cast; end

    sig { returns(T::Boolean) }
    def document_numbering_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def document_numbering_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def document_numbering_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def document_numbering_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def document_numbering_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def document_numbering_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def document_numbering_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def document_numbering_previously_was; end

    sig { returns(T.nilable(::String)) }
    def document_numbering_was; end

    sig { void }
    def document_numbering_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T::Array[::String]) }
    def email_settings; end

    sig { params(value: T::Array[::String]).returns(T::Array[::String]) }
    def email_settings=(value); end

    sig { returns(T::Boolean) }
    def email_settings?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def email_settings_before_last_save; end

    sig { returns(T.untyped) }
    def email_settings_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_settings_came_from_user?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def email_settings_change; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def email_settings_change_to_be_saved; end

    sig { params(from: T::Array[::String], to: T::Array[::String]).returns(T::Boolean) }
    def email_settings_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def email_settings_in_database; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def email_settings_previous_change; end

    sig { params(from: T::Array[::String], to: T::Array[::String]).returns(T::Boolean) }
    def email_settings_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def email_settings_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def email_settings_was; end

    sig { void }
    def email_settings_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def eu_tax_management; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def eu_tax_management=(value); end

    sig { returns(T::Boolean) }
    def eu_tax_management?; end

    sig { returns(T.nilable(T::Boolean)) }
    def eu_tax_management_before_last_save; end

    sig { returns(T.untyped) }
    def eu_tax_management_before_type_cast; end

    sig { returns(T::Boolean) }
    def eu_tax_management_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def eu_tax_management_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def eu_tax_management_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def eu_tax_management_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def eu_tax_management_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def eu_tax_management_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def eu_tax_management_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def eu_tax_management_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def eu_tax_management_was; end

    sig { void }
    def eu_tax_management_will_change!; end

    sig { returns(T::Boolean) }
    def finalize_zero_amount_invoice; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def finalize_zero_amount_invoice=(value); end

    sig { returns(T::Boolean) }
    def finalize_zero_amount_invoice?; end

    sig { returns(T.nilable(T::Boolean)) }
    def finalize_zero_amount_invoice_before_last_save; end

    sig { returns(T.untyped) }
    def finalize_zero_amount_invoice_before_type_cast; end

    sig { returns(T::Boolean) }
    def finalize_zero_amount_invoice_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def finalize_zero_amount_invoice_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def finalize_zero_amount_invoice_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def finalize_zero_amount_invoice_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def finalize_zero_amount_invoice_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def finalize_zero_amount_invoice_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def finalize_zero_amount_invoice_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def finalize_zero_amount_invoice_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def finalize_zero_amount_invoice_was; end

    sig { void }
    def finalize_zero_amount_invoice_will_change!; end

    sig { returns(::String) }
    def hmac_key; end

    sig { params(value: ::String).returns(::String) }
    def hmac_key=(value); end

    sig { returns(T::Boolean) }
    def hmac_key?; end

    sig { returns(T.nilable(::String)) }
    def hmac_key_before_last_save; end

    sig { returns(T.untyped) }
    def hmac_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def hmac_key_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def hmac_key_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def hmac_key_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def hmac_key_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def hmac_key_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def hmac_key_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def hmac_key_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def hmac_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def hmac_key_was; end

    sig { void }
    def hmac_key_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def invoice_footer; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def invoice_footer=(value); end

    sig { returns(T::Boolean) }
    def invoice_footer?; end

    sig { returns(T.nilable(::String)) }
    def invoice_footer_before_last_save; end

    sig { returns(T.untyped) }
    def invoice_footer_before_type_cast; end

    sig { returns(T::Boolean) }
    def invoice_footer_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invoice_footer_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invoice_footer_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def invoice_footer_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def invoice_footer_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invoice_footer_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def invoice_footer_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def invoice_footer_previously_was; end

    sig { returns(T.nilable(::String)) }
    def invoice_footer_was; end

    sig { void }
    def invoice_footer_will_change!; end

    sig { returns(::Integer) }
    def invoice_grace_period; end

    sig { params(value: ::Integer).returns(::Integer) }
    def invoice_grace_period=(value); end

    sig { returns(T::Boolean) }
    def invoice_grace_period?; end

    sig { returns(T.nilable(::Integer)) }
    def invoice_grace_period_before_last_save; end

    sig { returns(T.untyped) }
    def invoice_grace_period_before_type_cast; end

    sig { returns(T::Boolean) }
    def invoice_grace_period_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def invoice_grace_period_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def invoice_grace_period_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def invoice_grace_period_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def invoice_grace_period_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def invoice_grace_period_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def invoice_grace_period_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def invoice_grace_period_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def invoice_grace_period_was; end

    sig { void }
    def invoice_grace_period_will_change!; end

    sig { returns(T.nilable(::String)) }
    def legal_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def legal_name=(value); end

    sig { returns(T::Boolean) }
    def legal_name?; end

    sig { returns(T.nilable(::String)) }
    def legal_name_before_last_save; end

    sig { returns(T.untyped) }
    def legal_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def legal_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def legal_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def legal_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def legal_name_was; end

    sig { void }
    def legal_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def legal_number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def legal_number=(value); end

    sig { returns(T::Boolean) }
    def legal_number?; end

    sig { returns(T.nilable(::String)) }
    def legal_number_before_last_save; end

    sig { returns(T.untyped) }
    def legal_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def legal_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_number_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def legal_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_number_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def legal_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def legal_number_was; end

    sig { void }
    def legal_number_will_change!; end

    sig { returns(T.nilable(::String)) }
    def logo; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def logo=(value); end

    sig { returns(T::Boolean) }
    def logo?; end

    sig { returns(T.nilable(::String)) }
    def logo_before_last_save; end

    sig { returns(T.untyped) }
    def logo_before_type_cast; end

    sig { returns(T::Boolean) }
    def logo_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def logo_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def logo_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def logo_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def logo_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def logo_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def logo_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def logo_previously_was; end

    sig { returns(T.nilable(::String)) }
    def logo_was; end

    sig { void }
    def logo_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::Integer) }
    def net_payment_term; end

    sig { params(value: ::Integer).returns(::Integer) }
    def net_payment_term=(value); end

    sig { returns(T::Boolean) }
    def net_payment_term?; end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_before_last_save; end

    sig { returns(T.untyped) }
    def net_payment_term_before_type_cast; end

    sig { returns(T::Boolean) }
    def net_payment_term_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def net_payment_term_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def net_payment_term_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def net_payment_term_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def net_payment_term_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def net_payment_term_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_was; end

    sig { void }
    def net_payment_term_will_change!; end

    sig { returns(T::Array[::String]) }
    def premium_integrations; end

    sig { params(value: T::Array[::String]).returns(T::Array[::String]) }
    def premium_integrations=(value); end

    sig { returns(T::Boolean) }
    def premium_integrations?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def premium_integrations_before_last_save; end

    sig { returns(T.untyped) }
    def premium_integrations_before_type_cast; end

    sig { returns(T::Boolean) }
    def premium_integrations_came_from_user?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def premium_integrations_change; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def premium_integrations_change_to_be_saved; end

    sig { params(from: T::Array[::String], to: T::Array[::String]).returns(T::Boolean) }
    def premium_integrations_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def premium_integrations_in_database; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def premium_integrations_previous_change; end

    sig { params(from: T::Array[::String], to: T::Array[::String]).returns(T::Boolean) }
    def premium_integrations_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def premium_integrations_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def premium_integrations_was; end

    sig { void }
    def premium_integrations_will_change!; end

    sig { void }
    def restore_address_line1!; end

    sig { void }
    def restore_address_line2!; end

    sig { void }
    def restore_api_key!; end

    sig { void }
    def restore_city!; end

    sig { void }
    def restore_clickhouse_aggregation!; end

    sig { void }
    def restore_clickhouse_events_store!; end

    sig { void }
    def restore_country!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_custom_aggregation!; end

    sig { void }
    def restore_default_currency!; end

    sig { void }
    def restore_document_locale!; end

    sig { void }
    def restore_document_number_prefix!; end

    sig { void }
    def restore_document_numbering!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_email_settings!; end

    sig { void }
    def restore_eu_tax_management!; end

    sig { void }
    def restore_finalize_zero_amount_invoice!; end

    sig { void }
    def restore_hmac_key!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_invoice_footer!; end

    sig { void }
    def restore_invoice_grace_period!; end

    sig { void }
    def restore_legal_name!; end

    sig { void }
    def restore_legal_number!; end

    sig { void }
    def restore_logo!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_net_payment_term!; end

    sig { void }
    def restore_premium_integrations!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_tax_identification_number!; end

    sig { void }
    def restore_timezone!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_vat_rate!; end

    sig { void }
    def restore_webhook_url!; end

    sig { void }
    def restore_zipcode!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_address_line1; end

    sig { returns(T::Boolean) }
    def saved_change_to_address_line1?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_address_line2; end

    sig { returns(T::Boolean) }
    def saved_change_to_address_line2?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_api_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_api_key?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_city; end

    sig { returns(T::Boolean) }
    def saved_change_to_city?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_clickhouse_aggregation; end

    sig { returns(T::Boolean) }
    def saved_change_to_clickhouse_aggregation?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_clickhouse_events_store; end

    sig { returns(T::Boolean) }
    def saved_change_to_clickhouse_events_store?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_country?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_custom_aggregation; end

    sig { returns(T::Boolean) }
    def saved_change_to_custom_aggregation?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_default_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_default_currency?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_document_locale; end

    sig { returns(T::Boolean) }
    def saved_change_to_document_locale?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_document_number_prefix; end

    sig { returns(T::Boolean) }
    def saved_change_to_document_number_prefix?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_document_numbering; end

    sig { returns(T::Boolean) }
    def saved_change_to_document_numbering?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def saved_change_to_email_settings; end

    sig { returns(T::Boolean) }
    def saved_change_to_email_settings?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_eu_tax_management; end

    sig { returns(T::Boolean) }
    def saved_change_to_eu_tax_management?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_finalize_zero_amount_invoice; end

    sig { returns(T::Boolean) }
    def saved_change_to_finalize_zero_amount_invoice?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_hmac_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_hmac_key?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_invoice_footer; end

    sig { returns(T::Boolean) }
    def saved_change_to_invoice_footer?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_invoice_grace_period; end

    sig { returns(T::Boolean) }
    def saved_change_to_invoice_grace_period?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_legal_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_legal_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_legal_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_legal_number?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_logo; end

    sig { returns(T::Boolean) }
    def saved_change_to_logo?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_net_payment_term; end

    sig { returns(T::Boolean) }
    def saved_change_to_net_payment_term?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def saved_change_to_premium_integrations; end

    sig { returns(T::Boolean) }
    def saved_change_to_premium_integrations?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_tax_identification_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_tax_identification_number?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_timezone; end

    sig { returns(T::Boolean) }
    def saved_change_to_timezone?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def saved_change_to_vat_rate; end

    sig { returns(T::Boolean) }
    def saved_change_to_vat_rate?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_webhook_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_webhook_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_zipcode; end

    sig { returns(T::Boolean) }
    def saved_change_to_zipcode?; end

    sig { returns(T.nilable(::String)) }
    def state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def tax_identification_number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def tax_identification_number=(value); end

    sig { returns(T::Boolean) }
    def tax_identification_number?; end

    sig { returns(T.nilable(::String)) }
    def tax_identification_number_before_last_save; end

    sig { returns(T.untyped) }
    def tax_identification_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def tax_identification_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tax_identification_number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tax_identification_number_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tax_identification_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tax_identification_number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tax_identification_number_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tax_identification_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tax_identification_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def tax_identification_number_was; end

    sig { void }
    def tax_identification_number_will_change!; end

    sig { returns(::String) }
    def timezone; end

    sig { params(value: ::String).returns(::String) }
    def timezone=(value); end

    sig { returns(T::Boolean) }
    def timezone?; end

    sig { returns(T.nilable(::String)) }
    def timezone_before_last_save; end

    sig { returns(T.untyped) }
    def timezone_before_type_cast; end

    sig { returns(T::Boolean) }
    def timezone_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def timezone_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def timezone_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def timezone_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def timezone_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def timezone_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def timezone_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def timezone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def timezone_was; end

    sig { void }
    def timezone_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Float) }
    def vat_rate; end

    sig { params(value: ::Float).returns(::Float) }
    def vat_rate=(value); end

    sig { returns(T::Boolean) }
    def vat_rate?; end

    sig { returns(T.nilable(::Float)) }
    def vat_rate_before_last_save; end

    sig { returns(T.untyped) }
    def vat_rate_before_type_cast; end

    sig { returns(T::Boolean) }
    def vat_rate_came_from_user?; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def vat_rate_change; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def vat_rate_change_to_be_saved; end

    sig { params(from: ::Float, to: ::Float).returns(T::Boolean) }
    def vat_rate_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def vat_rate_in_database; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def vat_rate_previous_change; end

    sig { params(from: ::Float, to: ::Float).returns(T::Boolean) }
    def vat_rate_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def vat_rate_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def vat_rate_was; end

    sig { void }
    def vat_rate_will_change!; end

    sig { returns(T.nilable(::String)) }
    def webhook_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def webhook_url=(value); end

    sig { returns(T::Boolean) }
    def webhook_url?; end

    sig { returns(T.nilable(::String)) }
    def webhook_url_before_last_save; end

    sig { returns(T.untyped) }
    def webhook_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def webhook_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def webhook_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def webhook_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def webhook_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def webhook_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def webhook_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def webhook_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def webhook_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def webhook_url_was; end

    sig { void }
    def webhook_url_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_address_line1?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_address_line2?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_api_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_city?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_clickhouse_aggregation?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_clickhouse_events_store?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_custom_aggregation?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_default_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_document_locale?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_document_number_prefix?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_document_numbering?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email_settings?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_eu_tax_management?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_finalize_zero_amount_invoice?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hmac_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invoice_footer?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invoice_grace_period?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_legal_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_legal_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_logo?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_net_payment_term?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_premium_integrations?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tax_identification_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_timezone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vat_rate?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_webhook_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zipcode?; end

    sig { returns(T.nilable(::String)) }
    def zipcode; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def zipcode=(value); end

    sig { returns(T::Boolean) }
    def zipcode?; end

    sig { returns(T.nilable(::String)) }
    def zipcode_before_last_save; end

    sig { returns(T.untyped) }
    def zipcode_before_type_cast; end

    sig { returns(T::Boolean) }
    def zipcode_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zipcode_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zipcode_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zipcode_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zipcode_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zipcode_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zipcode_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zipcode_previously_was; end

    sig { returns(T.nilable(::String)) }
    def zipcode_was; end

    sig { void }
    def zipcode_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_per_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_per_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def per_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def per_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Organization).returns(BasicObject)).returns(T::Array[::Organization]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_logo(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Organization } }

    sig { returns(T::Array[::Organization]) }
    def to_a; end

    sig { returns(T::Array[::Organization]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Organization } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Organization } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Organization } }

    sig do
      params(
        records: T.any(::Organization, T::Enumerable[T.any(::Organization, T::Enumerable[::Organization])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Organization, T::Enumerable[T.any(::Organization, T::Enumerable[::Organization])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Organization, T::Enumerable[T.any(::Organization, T::Enumerable[::Organization])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Organization, Integer, String, T::Enumerable[T.any(::Organization, Integer, String, T::Enumerable[::Organization])])
      ).returns(T::Array[::Organization])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Organization, Integer, String, T::Enumerable[T.any(::Organization, Integer, String, T::Enumerable[::Organization])])
      ).returns(T::Array[::Organization])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Organization]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Organization, T::Enumerable[T.any(::Organization, T::Enumerable[::Organization])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Organization, T::Enumerable[T.any(::Organization, T::Enumerable[::Organization])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Organization, T::Enumerable[T.any(::Organization, T::Enumerable[::Organization])])
      ).returns(T::Array[::Organization])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Organization]) }
    def target; end

    sig { returns(T::Array[::Organization]) }
    def to_a; end

    sig { returns(T::Array[::Organization]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Organization } }

    sig { returns(T::Array[::Organization]) }
    def to_a; end

    sig { returns(T::Array[::Organization]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Organization } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Organization } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
