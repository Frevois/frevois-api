# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Customer`.
# Please instead update this file by running `bin/tapioca dsl Customer`.


class Customer
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def account_types; end

    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def customer_types; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def finalize_zero_amount_invoices; end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Customer).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Customer).void)
      ).returns(T::Array[::Customer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Customer).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Customer).void)
      ).returns(T::Array[::Customer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Customer).void)
      ).returns(T::Array[::Customer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Customer).void)
      ).returns(T::Array[::Customer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Customer).void)
      ).returns(T::Array[::Customer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Customer]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Customer)) }
    def fifth; end

    sig { returns(::Customer) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Customer)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Customer])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Customer).void).returns(T.nilable(::Customer)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Customer)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Customer) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Customer).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Customer])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Customer]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Customer]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Customer).void)
      ).returns(T::Array[::Customer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Customer).void)
      ).returns(T::Array[::Customer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Customer).void)
      ).returns(T::Array[::Customer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Customer)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Customer) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Customer) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Customer)) }
    sig { params(limit: Integer).returns(T::Array[::Customer]) }
    def first(limit = nil); end

    sig { returns(::Customer) }
    def first!; end

    sig { returns(T.nilable(::Customer)) }
    def forty_two; end

    sig { returns(::Customer) }
    def forty_two!; end

    sig { returns(T.nilable(::Customer)) }
    def fourth; end

    sig { returns(::Customer) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Customer)) }
    sig { params(limit: Integer).returns(T::Array[::Customer]) }
    def last(limit = nil); end

    sig { returns(::Customer) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Customer).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Customer).void)
      ).returns(T::Array[::Customer])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Customer).void)).returns(::Customer) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Customer).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Customer).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Customer)) }
    def second; end

    sig { returns(::Customer) }
    def second!; end

    sig { returns(T.nilable(::Customer)) }
    def second_to_last; end

    sig { returns(::Customer) }
    def second_to_last!; end

    sig { returns(::Customer) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Customer).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Customer)) }
    sig { params(limit: Integer).returns(T::Array[::Customer]) }
    def take(limit = nil); end

    sig { returns(::Customer) }
    def take!; end

    sig { returns(T.nilable(::Customer)) }
    def third; end

    sig { returns(::Customer) }
    def third!; end

    sig { returns(T.nilable(::Customer)) }
    def third_to_last; end

    sig { returns(::Customer) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def customer_account!; end

    sig { returns(T::Boolean) }
    def customer_account?; end

    sig { void }
    def customer_type_company!; end

    sig { returns(T::Boolean) }
    def customer_type_company?; end

    sig { void }
    def customer_type_individual!; end

    sig { returns(T::Boolean) }
    def customer_type_individual?; end

    sig { void }
    def finalize_zero_amount_invoice_finalize!; end

    sig { returns(T::Boolean) }
    def finalize_zero_amount_invoice_finalize?; end

    sig { void }
    def finalize_zero_amount_invoice_inherit!; end

    sig { returns(T::Boolean) }
    def finalize_zero_amount_invoice_inherit?; end

    sig { void }
    def finalize_zero_amount_invoice_skip!; end

    sig { returns(T::Boolean) }
    def finalize_zero_amount_invoice_skip?; end

    sig { void }
    def partner_account!; end

    sig { returns(T::Boolean) }
    def partner_account?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def add_on_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def add_on_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :add_ons, through: :applied_add_ons`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::AddOn::PrivateCollectionProxy) }
    def add_ons; end

    sig { params(value: T::Enumerable[::AddOn]).void }
    def add_ons=(value); end

    sig { returns(T.nilable(::PaymentProviderCustomers::AdyenCustomer)) }
    def adyen_customer; end

    sig { params(value: T.nilable(::PaymentProviderCustomers::AdyenCustomer)).void }
    def adyen_customer=(value); end

    sig { returns(T.nilable(::IntegrationCustomers::AnrokCustomer)) }
    def anrok_customer; end

    sig { params(value: T.nilable(::IntegrationCustomers::AnrokCustomer)).void }
    def anrok_customer=(value); end

    sig { returns(T::Array[T.untyped]) }
    def applied_add_on_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_add_on_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :applied_add_ons`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AppliedAddOn::PrivateCollectionProxy) }
    def applied_add_ons; end

    sig { params(value: T::Enumerable[::AppliedAddOn]).void }
    def applied_add_ons=(value); end

    sig { returns(T::Array[T.untyped]) }
    def applied_coupon_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_coupon_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :applied_coupons`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AppliedCoupon::PrivateCollectionProxy) }
    def applied_coupons; end

    sig { params(value: T::Enumerable[::AppliedCoupon]).void }
    def applied_coupons=(value); end

    sig { returns(T.nilable(::DunningCampaign)) }
    def applied_dunning_campaign; end

    sig { params(value: T.nilable(::DunningCampaign)).void }
    def applied_dunning_campaign=(value); end

    sig { returns(T::Boolean) }
    def applied_dunning_campaign_changed?; end

    sig { returns(T::Boolean) }
    def applied_dunning_campaign_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def applied_tax_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_tax_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :applied_taxes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Customer::AppliedTax::PrivateCollectionProxy) }
    def applied_taxes; end

    sig { params(value: T::Enumerable[::Customer::AppliedTax]).void }
    def applied_taxes=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::AdyenCustomer) }
    def build_adyen_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::AnrokCustomer) }
    def build_anrok_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DunningCampaign) }
    def build_applied_dunning_campaign(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::CashfreeCustomer) }
    def build_cashfree_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::GocardlessCustomer) }
    def build_gocardless_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::HubspotCustomer) }
    def build_hubspot_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::NetsuiteCustomer) }
    def build_netsuite_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def build_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::SalesforceCustomer) }
    def build_salesforce_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::StripeCustomer) }
    def build_stripe_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::XeroCustomer) }
    def build_xero_customer(*args, &blk); end

    sig { returns(T.nilable(::PaymentProviderCustomers::CashfreeCustomer)) }
    def cashfree_customer; end

    sig { params(value: T.nilable(::PaymentProviderCustomers::CashfreeCustomer)).void }
    def cashfree_customer=(value); end

    sig { returns(T::Array[T.untyped]) }
    def coupon_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def coupon_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :coupons, through: :applied_coupons`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Coupon::PrivateCollectionProxy) }
    def coupons; end

    sig { params(value: T::Enumerable[::Coupon]).void }
    def coupons=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::AdyenCustomer) }
    def create_adyen_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::AdyenCustomer) }
    def create_adyen_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::AnrokCustomer) }
    def create_anrok_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::AnrokCustomer) }
    def create_anrok_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DunningCampaign) }
    def create_applied_dunning_campaign(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DunningCampaign) }
    def create_applied_dunning_campaign!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::CashfreeCustomer) }
    def create_cashfree_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::CashfreeCustomer) }
    def create_cashfree_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::GocardlessCustomer) }
    def create_gocardless_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::GocardlessCustomer) }
    def create_gocardless_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::HubspotCustomer) }
    def create_hubspot_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::HubspotCustomer) }
    def create_hubspot_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::NetsuiteCustomer) }
    def create_netsuite_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::NetsuiteCustomer) }
    def create_netsuite_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::SalesforceCustomer) }
    def create_salesforce_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::SalesforceCustomer) }
    def create_salesforce_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::StripeCustomer) }
    def create_stripe_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PaymentProviderCustomers::StripeCustomer) }
    def create_stripe_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::XeroCustomer) }
    def create_xero_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationCustomers::XeroCustomer) }
    def create_xero_customer!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def credit_note_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def credit_note_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :credit_notes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CreditNote::PrivateCollectionProxy) }
    def credit_notes; end

    sig { params(value: T::Enumerable[::CreditNote]).void }
    def credit_notes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def daily_usage_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def daily_usage_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :daily_usages`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DailyUsage::PrivateCollectionProxy) }
    def daily_usages; end

    sig { params(value: T::Enumerable[::DailyUsage]).void }
    def daily_usages=(value); end

    sig { returns(T::Array[T.untyped]) }
    def event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def event_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :events`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Event::PrivateCollectionProxy) }
    def events; end

    sig { params(value: T::Enumerable[::Event]).void }
    def events=(value); end

    sig { returns(T.nilable(::PaymentProviderCustomers::GocardlessCustomer)) }
    def gocardless_customer; end

    sig { params(value: T.nilable(::PaymentProviderCustomers::GocardlessCustomer)).void }
    def gocardless_customer=(value); end

    sig { returns(T.nilable(::IntegrationCustomers::HubspotCustomer)) }
    def hubspot_customer; end

    sig { params(value: T.nilable(::IntegrationCustomers::HubspotCustomer)).void }
    def hubspot_customer=(value); end

    sig { returns(T::Array[T.untyped]) }
    def integration_customer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_customer_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :integration_customers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationCustomers::BaseCustomer::PrivateCollectionProxy) }
    def integration_customers; end

    sig { params(value: T::Enumerable[::IntegrationCustomers::BaseCustomer]).void }
    def integration_customers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invoice_custom_section_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invoice_custom_section_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def invoice_custom_section_selection_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invoice_custom_section_selection_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :invoice_custom_section_selections`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::InvoiceCustomSectionSelection::PrivateCollectionProxy) }
    def invoice_custom_section_selections; end

    sig { params(value: T::Enumerable[::InvoiceCustomSectionSelection]).void }
    def invoice_custom_section_selections=(value); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :invoice_custom_sections`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::InvoiceCustomSection::PrivateCollectionProxy) }
    def invoice_custom_sections; end

    sig { params(value: T::Enumerable[::InvoiceCustomSection]).void }
    def invoice_custom_sections=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invoice_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invoice_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :invoices`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Invoice::PrivateCollectionProxy) }
    def invoices; end

    sig { params(value: T::Enumerable[::Invoice]).void }
    def invoices=(value); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :metadata`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Metadata::CustomerMetadata::PrivateCollectionProxy) }
    def metadata; end

    sig { params(value: T::Enumerable[::Metadata::CustomerMetadata]).void }
    def metadata=(value); end

    sig { returns(T::Array[T.untyped]) }
    def metadatum_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def metadatum_ids=(ids); end

    sig { returns(T.nilable(::IntegrationCustomers::NetsuiteCustomer)) }
    def netsuite_customer; end

    sig { params(value: T.nilable(::IntegrationCustomers::NetsuiteCustomer)).void }
    def netsuite_customer=(value); end

    sig { returns(T.nilable(::Organization)) }
    def organization; end

    sig { params(value: T.nilable(::Organization)).void }
    def organization=(value); end

    sig { returns(T::Boolean) }
    def organization_changed?; end

    sig { returns(T::Boolean) }
    def organization_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def payment_provider_customer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def payment_provider_customer_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :payment_provider_customers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaymentProviderCustomers::BaseCustomer::PrivateCollectionProxy) }
    def payment_provider_customers; end

    sig { params(value: T::Enumerable[::PaymentProviderCustomers::BaseCustomer]).void }
    def payment_provider_customers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def payment_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def payment_request_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :payment_requests`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaymentRequest::PrivateCollectionProxy) }
    def payment_requests; end

    sig { params(value: T::Enumerable[::PaymentRequest]).void }
    def payment_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def quantified_event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def quantified_event_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :quantified_events`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::QuantifiedEvent::PrivateCollectionProxy) }
    def quantified_events; end

    sig { params(value: T::Enumerable[::QuantifiedEvent]).void }
    def quantified_events=(value); end

    sig { returns(T.nilable(::PaymentProviderCustomers::AdyenCustomer)) }
    def reload_adyen_customer; end

    sig { returns(T.nilable(::IntegrationCustomers::AnrokCustomer)) }
    def reload_anrok_customer; end

    sig { returns(T.nilable(::DunningCampaign)) }
    def reload_applied_dunning_campaign; end

    sig { returns(T.nilable(::PaymentProviderCustomers::CashfreeCustomer)) }
    def reload_cashfree_customer; end

    sig { returns(T.nilable(::PaymentProviderCustomers::GocardlessCustomer)) }
    def reload_gocardless_customer; end

    sig { returns(T.nilable(::IntegrationCustomers::HubspotCustomer)) }
    def reload_hubspot_customer; end

    sig { returns(T.nilable(::IntegrationCustomers::NetsuiteCustomer)) }
    def reload_netsuite_customer; end

    sig { returns(T.nilable(::Organization)) }
    def reload_organization; end

    sig { returns(T.nilable(::IntegrationCustomers::SalesforceCustomer)) }
    def reload_salesforce_customer; end

    sig { returns(T.nilable(::PaymentProviderCustomers::StripeCustomer)) }
    def reload_stripe_customer; end

    sig { returns(T.nilable(::IntegrationCustomers::XeroCustomer)) }
    def reload_xero_customer; end

    sig { void }
    def reset_adyen_customer; end

    sig { void }
    def reset_anrok_customer; end

    sig { void }
    def reset_applied_dunning_campaign; end

    sig { void }
    def reset_cashfree_customer; end

    sig { void }
    def reset_gocardless_customer; end

    sig { void }
    def reset_hubspot_customer; end

    sig { void }
    def reset_netsuite_customer; end

    sig { void }
    def reset_organization; end

    sig { void }
    def reset_salesforce_customer; end

    sig { void }
    def reset_stripe_customer; end

    sig { void }
    def reset_xero_customer; end

    sig { returns(T.nilable(::IntegrationCustomers::SalesforceCustomer)) }
    def salesforce_customer; end

    sig { params(value: T.nilable(::IntegrationCustomers::SalesforceCustomer)).void }
    def salesforce_customer=(value); end

    sig { returns(T::Array[T.untyped]) }
    def selected_invoice_custom_section_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def selected_invoice_custom_section_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :selected_invoice_custom_sections, through: :invoice_custom_section_selections`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::InvoiceCustomSection::PrivateCollectionProxy) }
    def selected_invoice_custom_sections; end

    sig { params(value: T::Enumerable[::InvoiceCustomSection]).void }
    def selected_invoice_custom_sections=(value); end

    sig { returns(T.nilable(::PaymentProviderCustomers::StripeCustomer)) }
    def stripe_customer; end

    sig { params(value: T.nilable(::PaymentProviderCustomers::StripeCustomer)).void }
    def stripe_customer=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :subscriptions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Subscription::PrivateCollectionProxy) }
    def subscriptions; end

    sig { params(value: T::Enumerable[::Subscription]).void }
    def subscriptions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tax_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tax_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :taxes, through: :applied_taxes`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Tax::PrivateCollectionProxy) }
    def taxes; end

    sig { params(value: T::Enumerable[::Tax]).void }
    def taxes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def version_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def version_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :versions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaperTrail::Version::PrivateCollectionProxy) }
    def versions; end

    sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
    def versions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def wallet_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def wallet_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def wallet_transaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def wallet_transaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :wallet_transactions, through: :wallets`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::WalletTransaction::PrivateCollectionProxy) }
    def wallet_transactions; end

    sig { params(value: T::Enumerable[::WalletTransaction]).void }
    def wallet_transactions=(value); end

    # This method is created by ActiveRecord on the `Customer` class because it declared `has_many :wallets`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Wallet::PrivateCollectionProxy) }
    def wallets; end

    sig { params(value: T::Enumerable[::Wallet]).void }
    def wallets=(value); end

    sig { returns(T.nilable(::IntegrationCustomers::XeroCustomer)) }
    def xero_customer; end

    sig { params(value: T.nilable(::IntegrationCustomers::XeroCustomer)).void }
    def xero_customer=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def customer_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def customer_type_company(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def customer_type_individual(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def discarded(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def falling_back_to_default_dunning_campaign(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def finalize_zero_amount_invoice_finalize(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def finalize_zero_amount_invoice_inherit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def finalize_zero_amount_invoice_skip(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def kept(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_customer_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_customer_type_company(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_customer_type_individual(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_finalize_zero_amount_invoice_finalize(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_finalize_zero_amount_invoice_inherit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_finalize_zero_amount_invoice_skip(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_partner_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def partner_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Customer).returns(BasicObject)).returns(T::Array[::Customer]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def undiscarded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_discarded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_sequential_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def account_type; end

    sig { params(value: T.any(::String, ::Symbol)).returns(T.any(::String, ::Symbol)) }
    def account_type=(value); end

    sig { returns(T::Boolean) }
    def account_type?; end

    sig { returns(T.nilable(::String)) }
    def account_type_before_last_save; end

    sig { returns(T.untyped) }
    def account_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def account_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def account_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def account_type_change_to_be_saved; end

    sig { params(from: T.any(::String, ::Symbol), to: T.any(::String, ::Symbol)).returns(T::Boolean) }
    def account_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def account_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def account_type_previous_change; end

    sig { params(from: T.any(::String, ::Symbol), to: T.any(::String, ::Symbol)).returns(T::Boolean) }
    def account_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def account_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def account_type_was; end

    sig { void }
    def account_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def address_line1; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def address_line1=(value); end

    sig { returns(T::Boolean) }
    def address_line1?; end

    sig { returns(T.nilable(::String)) }
    def address_line1_before_last_save; end

    sig { returns(T.untyped) }
    def address_line1_before_type_cast; end

    sig { returns(T::Boolean) }
    def address_line1_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line1_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line1_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def address_line1_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_line1_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line1_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def address_line1_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_line1_previously_was; end

    sig { returns(T.nilable(::String)) }
    def address_line1_was; end

    sig { void }
    def address_line1_will_change!; end

    sig { returns(T.nilable(::String)) }
    def address_line2; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def address_line2=(value); end

    sig { returns(T::Boolean) }
    def address_line2?; end

    sig { returns(T.nilable(::String)) }
    def address_line2_before_last_save; end

    sig { returns(T.untyped) }
    def address_line2_before_type_cast; end

    sig { returns(T::Boolean) }
    def address_line2_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line2_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line2_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def address_line2_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_line2_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def address_line2_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def address_line2_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_line2_previously_was; end

    sig { returns(T.nilable(::String)) }
    def address_line2_was; end

    sig { void }
    def address_line2_will_change!; end

    sig { returns(T.nilable(::String)) }
    def applied_dunning_campaign_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def applied_dunning_campaign_id=(value); end

    sig { returns(T::Boolean) }
    def applied_dunning_campaign_id?; end

    sig { returns(T.nilable(::String)) }
    def applied_dunning_campaign_id_before_last_save; end

    sig { returns(T.untyped) }
    def applied_dunning_campaign_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def applied_dunning_campaign_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def applied_dunning_campaign_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def applied_dunning_campaign_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def applied_dunning_campaign_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def applied_dunning_campaign_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def applied_dunning_campaign_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def applied_dunning_campaign_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def applied_dunning_campaign_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def applied_dunning_campaign_id_was; end

    sig { void }
    def applied_dunning_campaign_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def city; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def city=(value); end

    sig { returns(T::Boolean) }
    def city?; end

    sig { returns(T.nilable(::String)) }
    def city_before_last_save; end

    sig { returns(T.untyped) }
    def city_before_type_cast; end

    sig { returns(T::Boolean) }
    def city_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def city_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def city_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def city_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def city_previously_was; end

    sig { returns(T.nilable(::String)) }
    def city_was; end

    sig { void }
    def city_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country=(value); end

    sig { returns(T::Boolean) }
    def country?; end

    sig { returns(T.nilable(::String)) }
    def country_before_last_save; end

    sig { returns(T.untyped) }
    def country_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_was; end

    sig { void }
    def country_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def currency; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def currency=(value); end

    sig { returns(T::Boolean) }
    def currency?; end

    sig { returns(T.nilable(::String)) }
    def currency_before_last_save; end

    sig { returns(T.untyped) }
    def currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def currency_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def currency_was; end

    sig { void }
    def currency_will_change!; end

    sig { returns(T.nilable(::String)) }
    def customer_type; end

    sig { params(value: T.nilable(T.any(::String, ::Symbol))).returns(T.nilable(T.any(::String, ::Symbol))) }
    def customer_type=(value); end

    sig { returns(T::Boolean) }
    def customer_type?; end

    sig { returns(T.nilable(::String)) }
    def customer_type_before_last_save; end

    sig { returns(T.untyped) }
    def customer_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def customer_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def customer_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def customer_type_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol)),
        to: T.nilable(T.any(::String, ::Symbol))
      ).returns(T::Boolean)
    end
    def customer_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def customer_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def customer_type_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol)),
        to: T.nilable(T.any(::String, ::Symbol))
      ).returns(T::Boolean)
    end
    def customer_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def customer_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def customer_type_was; end

    sig { void }
    def customer_type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def document_locale; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def document_locale=(value); end

    sig { returns(T::Boolean) }
    def document_locale?; end

    sig { returns(T.nilable(::String)) }
    def document_locale_before_last_save; end

    sig { returns(T.untyped) }
    def document_locale_before_type_cast; end

    sig { returns(T::Boolean) }
    def document_locale_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def document_locale_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def document_locale_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def document_locale_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def document_locale_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def document_locale_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def document_locale_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def document_locale_previously_was; end

    sig { returns(T.nilable(::String)) }
    def document_locale_was; end

    sig { void }
    def document_locale_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T::Boolean) }
    def exclude_from_dunning_campaign; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def exclude_from_dunning_campaign=(value); end

    sig { returns(T::Boolean) }
    def exclude_from_dunning_campaign?; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_from_dunning_campaign_before_last_save; end

    sig { returns(T.untyped) }
    def exclude_from_dunning_campaign_before_type_cast; end

    sig { returns(T::Boolean) }
    def exclude_from_dunning_campaign_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_from_dunning_campaign_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_from_dunning_campaign_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def exclude_from_dunning_campaign_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_from_dunning_campaign_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def exclude_from_dunning_campaign_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def exclude_from_dunning_campaign_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_from_dunning_campaign_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def exclude_from_dunning_campaign_was; end

    sig { void }
    def exclude_from_dunning_campaign_will_change!; end

    sig { returns(::String) }
    def external_id; end

    sig { params(value: ::String).returns(::String) }
    def external_id=(value); end

    sig { returns(T::Boolean) }
    def external_id?; end

    sig { returns(T.nilable(::String)) }
    def external_id_before_last_save; end

    sig { returns(T.untyped) }
    def external_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def external_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def external_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def external_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def external_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def external_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def external_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def external_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def external_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def external_id_was; end

    sig { void }
    def external_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def external_salesforce_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def external_salesforce_id=(value); end

    sig { returns(T::Boolean) }
    def external_salesforce_id?; end

    sig { returns(T.nilable(::String)) }
    def external_salesforce_id_before_last_save; end

    sig { returns(T.untyped) }
    def external_salesforce_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def external_salesforce_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def external_salesforce_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def external_salesforce_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def external_salesforce_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def external_salesforce_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def external_salesforce_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def external_salesforce_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def external_salesforce_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def external_salesforce_id_was; end

    sig { void }
    def external_salesforce_id_will_change!; end

    sig { returns(::String) }
    def finalize_zero_amount_invoice; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def finalize_zero_amount_invoice=(value); end

    sig { returns(T::Boolean) }
    def finalize_zero_amount_invoice?; end

    sig { returns(T.nilable(::String)) }
    def finalize_zero_amount_invoice_before_last_save; end

    sig { returns(T.untyped) }
    def finalize_zero_amount_invoice_before_type_cast; end

    sig { returns(T::Boolean) }
    def finalize_zero_amount_invoice_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def finalize_zero_amount_invoice_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def finalize_zero_amount_invoice_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def finalize_zero_amount_invoice_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def finalize_zero_amount_invoice_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def finalize_zero_amount_invoice_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def finalize_zero_amount_invoice_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def finalize_zero_amount_invoice_previously_was; end

    sig { returns(T.nilable(::String)) }
    def finalize_zero_amount_invoice_was; end

    sig { void }
    def finalize_zero_amount_invoice_will_change!; end

    sig { returns(T.nilable(::String)) }
    def firstname; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def firstname=(value); end

    sig { returns(T::Boolean) }
    def firstname?; end

    sig { returns(T.nilable(::String)) }
    def firstname_before_last_save; end

    sig { returns(T.untyped) }
    def firstname_before_type_cast; end

    sig { returns(T::Boolean) }
    def firstname_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def firstname_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def firstname_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def firstname_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def firstname_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def firstname_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def firstname_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def firstname_previously_was; end

    sig { returns(T.nilable(::String)) }
    def firstname_was; end

    sig { void }
    def firstname_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def invoice_grace_period; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def invoice_grace_period=(value); end

    sig { returns(T::Boolean) }
    def invoice_grace_period?; end

    sig { returns(T.nilable(::Integer)) }
    def invoice_grace_period_before_last_save; end

    sig { returns(T.untyped) }
    def invoice_grace_period_before_type_cast; end

    sig { returns(T::Boolean) }
    def invoice_grace_period_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invoice_grace_period_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invoice_grace_period_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def invoice_grace_period_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def invoice_grace_period_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invoice_grace_period_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def invoice_grace_period_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def invoice_grace_period_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def invoice_grace_period_was; end

    sig { void }
    def invoice_grace_period_will_change!; end

    sig { returns(::Integer) }
    def last_dunning_campaign_attempt; end

    sig { params(value: ::Integer).returns(::Integer) }
    def last_dunning_campaign_attempt=(value); end

    sig { returns(T::Boolean) }
    def last_dunning_campaign_attempt?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_dunning_campaign_attempt_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_dunning_campaign_attempt_at=(value); end

    sig { returns(T::Boolean) }
    def last_dunning_campaign_attempt_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_dunning_campaign_attempt_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_dunning_campaign_attempt_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_dunning_campaign_attempt_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_dunning_campaign_attempt_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_dunning_campaign_attempt_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_dunning_campaign_attempt_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_dunning_campaign_attempt_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_dunning_campaign_attempt_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_dunning_campaign_attempt_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_dunning_campaign_attempt_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_dunning_campaign_attempt_at_was; end

    sig { void }
    def last_dunning_campaign_attempt_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def last_dunning_campaign_attempt_before_last_save; end

    sig { returns(T.untyped) }
    def last_dunning_campaign_attempt_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_dunning_campaign_attempt_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def last_dunning_campaign_attempt_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def last_dunning_campaign_attempt_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def last_dunning_campaign_attempt_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_dunning_campaign_attempt_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def last_dunning_campaign_attempt_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def last_dunning_campaign_attempt_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_dunning_campaign_attempt_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_dunning_campaign_attempt_was; end

    sig { void }
    def last_dunning_campaign_attempt_will_change!; end

    sig { returns(T.nilable(::String)) }
    def lastname; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def lastname=(value); end

    sig { returns(T::Boolean) }
    def lastname?; end

    sig { returns(T.nilable(::String)) }
    def lastname_before_last_save; end

    sig { returns(T.untyped) }
    def lastname_before_type_cast; end

    sig { returns(T::Boolean) }
    def lastname_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def lastname_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def lastname_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def lastname_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def lastname_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def lastname_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def lastname_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def lastname_previously_was; end

    sig { returns(T.nilable(::String)) }
    def lastname_was; end

    sig { void }
    def lastname_will_change!; end

    sig { returns(T.nilable(::String)) }
    def legal_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def legal_name=(value); end

    sig { returns(T::Boolean) }
    def legal_name?; end

    sig { returns(T.nilable(::String)) }
    def legal_name_before_last_save; end

    sig { returns(T.untyped) }
    def legal_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def legal_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def legal_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def legal_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def legal_name_was; end

    sig { void }
    def legal_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def legal_number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def legal_number=(value); end

    sig { returns(T::Boolean) }
    def legal_number?; end

    sig { returns(T.nilable(::String)) }
    def legal_number_before_last_save; end

    sig { returns(T.untyped) }
    def legal_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def legal_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_number_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def legal_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legal_number_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def legal_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def legal_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def legal_number_was; end

    sig { void }
    def legal_number_will_change!; end

    sig { returns(T.nilable(::String)) }
    def logo_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def logo_url=(value); end

    sig { returns(T::Boolean) }
    def logo_url?; end

    sig { returns(T.nilable(::String)) }
    def logo_url_before_last_save; end

    sig { returns(T.untyped) }
    def logo_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def logo_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def logo_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def logo_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def logo_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def logo_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def logo_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def logo_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def logo_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def logo_url_was; end

    sig { void }
    def logo_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def net_payment_term=(value); end

    sig { returns(T::Boolean) }
    def net_payment_term?; end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_before_last_save; end

    sig { returns(T.untyped) }
    def net_payment_term_before_type_cast; end

    sig { returns(T::Boolean) }
    def net_payment_term_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def net_payment_term_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def net_payment_term_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def net_payment_term_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def net_payment_term_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def net_payment_term_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_was; end

    sig { void }
    def net_payment_term_will_change!; end

    sig { returns(::String) }
    def organization_id; end

    sig { params(value: ::String).returns(::String) }
    def organization_id=(value); end

    sig { returns(T::Boolean) }
    def organization_id?; end

    sig { returns(T.nilable(::String)) }
    def organization_id_before_last_save; end

    sig { returns(T.untyped) }
    def organization_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def organization_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def organization_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def organization_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def organization_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def organization_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def organization_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def organization_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def organization_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def organization_id_was; end

    sig { void }
    def organization_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def payment_provider; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def payment_provider=(value); end

    sig { returns(T::Boolean) }
    def payment_provider?; end

    sig { returns(T.nilable(::String)) }
    def payment_provider_before_last_save; end

    sig { returns(T.untyped) }
    def payment_provider_before_type_cast; end

    sig { returns(T::Boolean) }
    def payment_provider_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_provider_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_provider_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def payment_provider_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payment_provider_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def payment_provider_code=(value); end

    sig { returns(T::Boolean) }
    def payment_provider_code?; end

    sig { returns(T.nilable(::String)) }
    def payment_provider_code_before_last_save; end

    sig { returns(T.untyped) }
    def payment_provider_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def payment_provider_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_provider_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_provider_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def payment_provider_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payment_provider_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_provider_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def payment_provider_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payment_provider_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def payment_provider_code_was; end

    sig { void }
    def payment_provider_code_will_change!; end

    sig { returns(T.nilable(::String)) }
    def payment_provider_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_provider_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def payment_provider_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payment_provider_previously_was; end

    sig { returns(T.nilable(::String)) }
    def payment_provider_was; end

    sig { void }
    def payment_provider_will_change!; end

    sig { returns(T.nilable(::String)) }
    def phone; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def phone=(value); end

    sig { returns(T::Boolean) }
    def phone?; end

    sig { returns(T.nilable(::String)) }
    def phone_before_last_save; end

    sig { returns(T.untyped) }
    def phone_before_type_cast; end

    sig { returns(T::Boolean) }
    def phone_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def phone_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def phone_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def phone_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def phone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def phone_was; end

    sig { void }
    def phone_will_change!; end

    sig { void }
    def restore_account_type!; end

    sig { void }
    def restore_address_line1!; end

    sig { void }
    def restore_address_line2!; end

    sig { void }
    def restore_applied_dunning_campaign_id!; end

    sig { void }
    def restore_city!; end

    sig { void }
    def restore_country!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_currency!; end

    sig { void }
    def restore_customer_type!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_document_locale!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_exclude_from_dunning_campaign!; end

    sig { void }
    def restore_external_id!; end

    sig { void }
    def restore_external_salesforce_id!; end

    sig { void }
    def restore_finalize_zero_amount_invoice!; end

    sig { void }
    def restore_firstname!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_invoice_grace_period!; end

    sig { void }
    def restore_last_dunning_campaign_attempt!; end

    sig { void }
    def restore_last_dunning_campaign_attempt_at!; end

    sig { void }
    def restore_lastname!; end

    sig { void }
    def restore_legal_name!; end

    sig { void }
    def restore_legal_number!; end

    sig { void }
    def restore_logo_url!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_net_payment_term!; end

    sig { void }
    def restore_organization_id!; end

    sig { void }
    def restore_payment_provider!; end

    sig { void }
    def restore_payment_provider_code!; end

    sig { void }
    def restore_phone!; end

    sig { void }
    def restore_sequential_id!; end

    sig { void }
    def restore_shipping_address_line1!; end

    sig { void }
    def restore_shipping_address_line2!; end

    sig { void }
    def restore_shipping_city!; end

    sig { void }
    def restore_shipping_country!; end

    sig { void }
    def restore_shipping_state!; end

    sig { void }
    def restore_shipping_zipcode!; end

    sig { void }
    def restore_skip_invoice_custom_sections!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_tax_identification_number!; end

    sig { void }
    def restore_timezone!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_url!; end

    sig { void }
    def restore_vat_rate!; end

    sig { void }
    def restore_zipcode!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_account_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_account_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_address_line1; end

    sig { returns(T::Boolean) }
    def saved_change_to_address_line1?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_address_line2; end

    sig { returns(T::Boolean) }
    def saved_change_to_address_line2?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_applied_dunning_campaign_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_applied_dunning_campaign_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_city; end

    sig { returns(T::Boolean) }
    def saved_change_to_city?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_country?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_currency?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_customer_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_customer_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_document_locale; end

    sig { returns(T::Boolean) }
    def saved_change_to_document_locale?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_exclude_from_dunning_campaign; end

    sig { returns(T::Boolean) }
    def saved_change_to_exclude_from_dunning_campaign?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_external_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_external_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_external_salesforce_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_external_salesforce_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_finalize_zero_amount_invoice; end

    sig { returns(T::Boolean) }
    def saved_change_to_finalize_zero_amount_invoice?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_firstname; end

    sig { returns(T::Boolean) }
    def saved_change_to_firstname?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_invoice_grace_period; end

    sig { returns(T::Boolean) }
    def saved_change_to_invoice_grace_period?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_last_dunning_campaign_attempt; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_dunning_campaign_attempt?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_dunning_campaign_attempt_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_dunning_campaign_attempt_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_lastname; end

    sig { returns(T::Boolean) }
    def saved_change_to_lastname?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_legal_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_legal_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_legal_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_legal_number?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_logo_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_logo_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_net_payment_term; end

    sig { returns(T::Boolean) }
    def saved_change_to_net_payment_term?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_organization_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_organization_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_payment_provider; end

    sig { returns(T::Boolean) }
    def saved_change_to_payment_provider?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_payment_provider_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_payment_provider_code?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_phone; end

    sig { returns(T::Boolean) }
    def saved_change_to_phone?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_sequential_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sequential_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_shipping_address_line1; end

    sig { returns(T::Boolean) }
    def saved_change_to_shipping_address_line1?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_shipping_address_line2; end

    sig { returns(T::Boolean) }
    def saved_change_to_shipping_address_line2?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_shipping_city; end

    sig { returns(T::Boolean) }
    def saved_change_to_shipping_city?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_shipping_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_shipping_country?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_shipping_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_shipping_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_shipping_zipcode; end

    sig { returns(T::Boolean) }
    def saved_change_to_shipping_zipcode?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_skip_invoice_custom_sections; end

    sig { returns(T::Boolean) }
    def saved_change_to_skip_invoice_custom_sections?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_tax_identification_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_tax_identification_number?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_timezone; end

    sig { returns(T::Boolean) }
    def saved_change_to_timezone?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_url?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_vat_rate; end

    sig { returns(T::Boolean) }
    def saved_change_to_vat_rate?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_zipcode; end

    sig { returns(T::Boolean) }
    def saved_change_to_zipcode?; end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def sequential_id=(value); end

    sig { returns(T::Boolean) }
    def sequential_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_before_last_save; end

    sig { returns(T.untyped) }
    def sequential_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sequential_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sequential_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sequential_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def sequential_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sequential_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def sequential_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_was; end

    sig { void }
    def sequential_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def shipping_address_line1; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def shipping_address_line1=(value); end

    sig { returns(T::Boolean) }
    def shipping_address_line1?; end

    sig { returns(T.nilable(::String)) }
    def shipping_address_line1_before_last_save; end

    sig { returns(T.untyped) }
    def shipping_address_line1_before_type_cast; end

    sig { returns(T::Boolean) }
    def shipping_address_line1_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_address_line1_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_address_line1_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_address_line1_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_address_line1_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_address_line1_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_address_line1_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_address_line1_previously_was; end

    sig { returns(T.nilable(::String)) }
    def shipping_address_line1_was; end

    sig { void }
    def shipping_address_line1_will_change!; end

    sig { returns(T.nilable(::String)) }
    def shipping_address_line2; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def shipping_address_line2=(value); end

    sig { returns(T::Boolean) }
    def shipping_address_line2?; end

    sig { returns(T.nilable(::String)) }
    def shipping_address_line2_before_last_save; end

    sig { returns(T.untyped) }
    def shipping_address_line2_before_type_cast; end

    sig { returns(T::Boolean) }
    def shipping_address_line2_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_address_line2_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_address_line2_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_address_line2_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_address_line2_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_address_line2_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_address_line2_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_address_line2_previously_was; end

    sig { returns(T.nilable(::String)) }
    def shipping_address_line2_was; end

    sig { void }
    def shipping_address_line2_will_change!; end

    sig { returns(T.nilable(::String)) }
    def shipping_city; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def shipping_city=(value); end

    sig { returns(T::Boolean) }
    def shipping_city?; end

    sig { returns(T.nilable(::String)) }
    def shipping_city_before_last_save; end

    sig { returns(T.untyped) }
    def shipping_city_before_type_cast; end

    sig { returns(T::Boolean) }
    def shipping_city_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_city_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_city_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_city_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_city_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_city_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_city_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_city_previously_was; end

    sig { returns(T.nilable(::String)) }
    def shipping_city_was; end

    sig { void }
    def shipping_city_will_change!; end

    sig { returns(T.nilable(::String)) }
    def shipping_country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def shipping_country=(value); end

    sig { returns(T::Boolean) }
    def shipping_country?; end

    sig { returns(T.nilable(::String)) }
    def shipping_country_before_last_save; end

    sig { returns(T.untyped) }
    def shipping_country_before_type_cast; end

    sig { returns(T::Boolean) }
    def shipping_country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_country_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_country_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_country_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_country_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_country_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def shipping_country_was; end

    sig { void }
    def shipping_country_will_change!; end

    sig { returns(T.nilable(::String)) }
    def shipping_state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def shipping_state=(value); end

    sig { returns(T::Boolean) }
    def shipping_state?; end

    sig { returns(T.nilable(::String)) }
    def shipping_state_before_last_save; end

    sig { returns(T.untyped) }
    def shipping_state_before_type_cast; end

    sig { returns(T::Boolean) }
    def shipping_state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_state_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_state_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def shipping_state_was; end

    sig { void }
    def shipping_state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def shipping_zipcode; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def shipping_zipcode=(value); end

    sig { returns(T::Boolean) }
    def shipping_zipcode?; end

    sig { returns(T.nilable(::String)) }
    def shipping_zipcode_before_last_save; end

    sig { returns(T.untyped) }
    def shipping_zipcode_before_type_cast; end

    sig { returns(T::Boolean) }
    def shipping_zipcode_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_zipcode_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_zipcode_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_zipcode_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_zipcode_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def shipping_zipcode_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def shipping_zipcode_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def shipping_zipcode_previously_was; end

    sig { returns(T.nilable(::String)) }
    def shipping_zipcode_was; end

    sig { void }
    def shipping_zipcode_will_change!; end

    sig { returns(T::Boolean) }
    def skip_invoice_custom_sections; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def skip_invoice_custom_sections=(value); end

    sig { returns(T::Boolean) }
    def skip_invoice_custom_sections?; end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_invoice_custom_sections_before_last_save; end

    sig { returns(T.untyped) }
    def skip_invoice_custom_sections_before_type_cast; end

    sig { returns(T::Boolean) }
    def skip_invoice_custom_sections_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_invoice_custom_sections_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_invoice_custom_sections_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def skip_invoice_custom_sections_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_invoice_custom_sections_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_invoice_custom_sections_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def skip_invoice_custom_sections_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_invoice_custom_sections_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_invoice_custom_sections_was; end

    sig { void }
    def skip_invoice_custom_sections_will_change!; end

    sig { returns(T.nilable(::String)) }
    def slug; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def slug_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def slug_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(T.nilable(::String)) }
    def state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def tax_identification_number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def tax_identification_number=(value); end

    sig { returns(T::Boolean) }
    def tax_identification_number?; end

    sig { returns(T.nilable(::String)) }
    def tax_identification_number_before_last_save; end

    sig { returns(T.untyped) }
    def tax_identification_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def tax_identification_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tax_identification_number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tax_identification_number_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tax_identification_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tax_identification_number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tax_identification_number_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tax_identification_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tax_identification_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def tax_identification_number_was; end

    sig { void }
    def tax_identification_number_will_change!; end

    sig { returns(T.nilable(::String)) }
    def timezone; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def timezone=(value); end

    sig { returns(T::Boolean) }
    def timezone?; end

    sig { returns(T.nilable(::String)) }
    def timezone_before_last_save; end

    sig { returns(T.untyped) }
    def timezone_before_type_cast; end

    sig { returns(T::Boolean) }
    def timezone_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def timezone_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def timezone_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def timezone_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def timezone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def timezone_was; end

    sig { void }
    def timezone_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def url=(value); end

    sig { returns(T::Boolean) }
    def url?; end

    sig { returns(T.nilable(::String)) }
    def url_before_last_save; end

    sig { returns(T.untyped) }
    def url_before_type_cast; end

    sig { returns(T::Boolean) }
    def url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def url_was; end

    sig { void }
    def url_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def vat_rate; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def vat_rate=(value); end

    sig { returns(T::Boolean) }
    def vat_rate?; end

    sig { returns(T.nilable(::Float)) }
    def vat_rate_before_last_save; end

    sig { returns(T.untyped) }
    def vat_rate_before_type_cast; end

    sig { returns(T::Boolean) }
    def vat_rate_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def vat_rate_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def vat_rate_change_to_be_saved; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def vat_rate_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def vat_rate_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def vat_rate_previous_change; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def vat_rate_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def vat_rate_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def vat_rate_was; end

    sig { void }
    def vat_rate_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_account_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_address_line1?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_address_line2?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_applied_dunning_campaign_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_city?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_customer_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_document_locale?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_exclude_from_dunning_campaign?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_external_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_external_salesforce_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_finalize_zero_amount_invoice?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_firstname?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invoice_grace_period?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_dunning_campaign_attempt?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_dunning_campaign_attempt_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_lastname?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_legal_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_legal_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_logo_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_net_payment_term?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_organization_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payment_provider?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payment_provider_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_phone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sequential_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_shipping_address_line1?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_shipping_address_line2?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_shipping_city?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_shipping_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_shipping_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_shipping_zipcode?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_skip_invoice_custom_sections?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tax_identification_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_timezone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vat_rate?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zipcode?; end

    sig { returns(T.nilable(::String)) }
    def zipcode; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def zipcode=(value); end

    sig { returns(T::Boolean) }
    def zipcode?; end

    sig { returns(T.nilable(::String)) }
    def zipcode_before_last_save; end

    sig { returns(T.untyped) }
    def zipcode_before_type_cast; end

    sig { returns(T::Boolean) }
    def zipcode_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zipcode_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zipcode_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zipcode_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zipcode_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zipcode_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zipcode_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zipcode_previously_was; end

    sig { returns(T.nilable(::String)) }
    def zipcode_was; end

    sig { void }
    def zipcode_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def customer_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def customer_type_company(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def customer_type_individual(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def discarded(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def falling_back_to_default_dunning_campaign(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def finalize_zero_amount_invoice_finalize(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def finalize_zero_amount_invoice_inherit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def finalize_zero_amount_invoice_skip(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def kept(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_customer_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_customer_type_company(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_customer_type_individual(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_finalize_zero_amount_invoice_finalize(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_finalize_zero_amount_invoice_inherit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_finalize_zero_amount_invoice_skip(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_partner_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def partner_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Customer).returns(BasicObject)).returns(T::Array[::Customer]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def undiscarded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_discarded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_sequential_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Customer } }

    sig { returns(T::Array[::Customer]) }
    def to_a; end

    sig { returns(T::Array[::Customer]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Customer } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Customer } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Customer } }

    sig do
      params(
        records: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Customer, Integer, String, T::Enumerable[T.any(::Customer, Integer, String, T::Enumerable[::Customer])])
      ).returns(T::Array[::Customer])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Customer, Integer, String, T::Enumerable[T.any(::Customer, Integer, String, T::Enumerable[::Customer])])
      ).returns(T::Array[::Customer])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Customer]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Customer, T::Enumerable[T.any(::Customer, T::Enumerable[::Customer])])
      ).returns(T::Array[::Customer])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Customer]) }
    def target; end

    sig { returns(T::Array[::Customer]) }
    def to_a; end

    sig { returns(T::Array[::Customer]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Customer } }

    sig { returns(T::Array[::Customer]) }
    def to_a; end

    sig { returns(T::Array[::Customer]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Customer } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Customer } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
