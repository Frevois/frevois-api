# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Charge`.
# Please instead update this file by running `bin/tapioca dsl Charge`.


class Charge
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def charge_models; end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    def new(attributes = nil, &block); end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def regroup_paid_fees; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Charge).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Charge).void)
      ).returns(T::Array[::Charge])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Charge).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Charge).void)
      ).returns(T::Array[::Charge])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Charge).void)
      ).returns(T::Array[::Charge])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Charge).void)
      ).returns(T::Array[::Charge])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Charge).void)
      ).returns(T::Array[::Charge])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Charge]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Charge)) }
    def fifth; end

    sig { returns(::Charge) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Charge)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Charge])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Charge).void).returns(T.nilable(::Charge)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Charge)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Charge) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Charge).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Charge])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Charge]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Charge]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Charge).void)
      ).returns(T::Array[::Charge])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Charge).void)
      ).returns(T::Array[::Charge])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Charge).void)
      ).returns(T::Array[::Charge])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Charge)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Charge) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Charge) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Charge)) }
    sig { params(limit: Integer).returns(T::Array[::Charge]) }
    def first(limit = nil); end

    sig { returns(::Charge) }
    def first!; end

    sig { returns(T.nilable(::Charge)) }
    def forty_two; end

    sig { returns(::Charge) }
    def forty_two!; end

    sig { returns(T.nilable(::Charge)) }
    def fourth; end

    sig { returns(::Charge) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Charge)) }
    sig { params(limit: Integer).returns(T::Array[::Charge]) }
    def last(limit = nil); end

    sig { returns(::Charge) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Charge).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Charge).void)
      ).returns(T::Array[::Charge])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Charge).void)).returns(::Charge) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Charge).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Charge).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Charge)) }
    def second; end

    sig { returns(::Charge) }
    def second!; end

    sig { returns(T.nilable(::Charge)) }
    def second_to_last; end

    sig { returns(::Charge) }
    def second_to_last!; end

    sig { returns(::Charge) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Charge).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Charge)) }
    sig { params(limit: Integer).returns(T::Array[::Charge]) }
    def take(limit = nil); end

    sig { returns(::Charge) }
    def take!; end

    sig { returns(T.nilable(::Charge)) }
    def third; end

    sig { returns(::Charge) }
    def third!; end

    sig { returns(T.nilable(::Charge)) }
    def third_to_last; end

    sig { returns(::Charge) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def custom!; end

    sig { returns(T::Boolean) }
    def custom?; end

    sig { void }
    def dynamic!; end

    sig { returns(T::Boolean) }
    def dynamic?; end

    sig { void }
    def graduated!; end

    sig { returns(T::Boolean) }
    def graduated?; end

    sig { void }
    def graduated_percentage!; end

    sig { returns(T::Boolean) }
    def graduated_percentage?; end

    sig { void }
    def invoice!; end

    sig { returns(T::Boolean) }
    def invoice?; end

    sig { void }
    def package!; end

    sig { returns(T::Boolean) }
    def package?; end

    sig { void }
    def percentage!; end

    sig { returns(T::Boolean) }
    def percentage?; end

    sig { void }
    def standard!; end

    sig { returns(T::Boolean) }
    def standard?; end

    sig { void }
    def volume!; end

    sig { returns(T::Boolean) }
    def volume?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def applied_tax_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_tax_ids=(ids); end

    # This method is created by ActiveRecord on the `Charge` class because it declared `has_many :applied_taxes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Charge::AppliedTax::PrivateCollectionProxy) }
    def applied_taxes; end

    sig { params(value: T::Enumerable[::Charge::AppliedTax]).void }
    def applied_taxes=(value); end

    sig { returns(T.nilable(::BillableMetric)) }
    def billable_metric; end

    sig { params(value: T.nilable(::BillableMetric)).void }
    def billable_metric=(value); end

    sig { returns(T::Boolean) }
    def billable_metric_changed?; end

    sig { returns(T::Boolean) }
    def billable_metric_previously_changed?; end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillableMetric) }
    def build_billable_metric(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Charge) }
    def build_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Plan) }
    def build_plan(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def child_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def child_ids=(ids); end

    # This method is created by ActiveRecord on the `Charge` class because it declared `has_many :children`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Charge::PrivateCollectionProxy) }
    def children; end

    sig { params(value: T::Enumerable[::Charge]).void }
    def children=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillableMetric) }
    def create_billable_metric(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillableMetric) }
    def create_billable_metric!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Charge) }
    def create_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Charge) }
    def create_parent!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Plan) }
    def create_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Plan) }
    def create_plan!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def fee_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def fee_ids=(ids); end

    # This method is created by ActiveRecord on the `Charge` class because it declared `has_many :fees`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Fee::PrivateCollectionProxy) }
    def fees; end

    sig { params(value: T::Enumerable[::Fee]).void }
    def fees=(value); end

    sig { returns(T::Array[T.untyped]) }
    def filter_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def filter_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def filter_value_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def filter_value_ids=(ids); end

    # This method is created by ActiveRecord on the `Charge` class because it declared `has_many :filter_values, through: :filters`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::ChargeFilterValue::PrivateCollectionProxy) }
    def filter_values; end

    sig { params(value: T::Enumerable[::ChargeFilterValue]).void }
    def filter_values=(value); end

    # This method is created by ActiveRecord on the `Charge` class because it declared `has_many :filters`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ChargeFilter::PrivateCollectionProxy) }
    def filters; end

    sig { params(value: T::Enumerable[::ChargeFilter]).void }
    def filters=(value); end

    sig { returns(T.nilable(::Charge)) }
    def parent; end

    sig { params(value: T.nilable(::Charge)).void }
    def parent=(value); end

    sig { returns(T::Boolean) }
    def parent_changed?; end

    sig { returns(T::Boolean) }
    def parent_previously_changed?; end

    sig { returns(T.nilable(::Plan)) }
    def plan; end

    sig { params(value: T.nilable(::Plan)).void }
    def plan=(value); end

    sig { returns(T::Boolean) }
    def plan_changed?; end

    sig { returns(T::Boolean) }
    def plan_previously_changed?; end

    sig { returns(T.nilable(::BillableMetric)) }
    def reload_billable_metric; end

    sig { returns(T.nilable(::Charge)) }
    def reload_parent; end

    sig { returns(T.nilable(::Plan)) }
    def reload_plan; end

    sig { void }
    def reset_billable_metric; end

    sig { void }
    def reset_parent; end

    sig { void }
    def reset_plan; end

    sig { returns(T::Array[T.untyped]) }
    def tax_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tax_ids=(ids); end

    # This method is created by ActiveRecord on the `Charge` class because it declared `has_many :taxes, through: :applied_taxes`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Tax::PrivateCollectionProxy) }
    def taxes; end

    sig { params(value: T::Enumerable[::Tax]).void }
    def taxes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def version_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def version_ids=(ids); end

    # This method is created by ActiveRecord on the `Charge` class because it declared `has_many :versions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaperTrail::Version::PrivateCollectionProxy) }
    def versions; end

    sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
    def versions=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def custom(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def discarded(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dynamic(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def graduated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def graduated_percentage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invoice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def kept(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_custom(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dynamic(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_graduated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_graduated_percentage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_invoice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_package(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_percentage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_standard(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_volume(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def package(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pay_in_advance(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def percentage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Charge).returns(BasicObject)).returns(T::Array[::Charge]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def standard(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def undiscarded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def volume(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_discarded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def amount_currency; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def amount_currency=(value); end

    sig { returns(T::Boolean) }
    def amount_currency?; end

    sig { returns(T.nilable(::String)) }
    def amount_currency_before_last_save; end

    sig { returns(T.untyped) }
    def amount_currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def amount_currency_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_currency_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_currency_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def amount_currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def amount_currency_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def amount_currency_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def amount_currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def amount_currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def amount_currency_was; end

    sig { void }
    def amount_currency_will_change!; end

    sig { returns(T.nilable(::String)) }
    def billable_metric_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def billable_metric_id=(value); end

    sig { returns(T::Boolean) }
    def billable_metric_id?; end

    sig { returns(T.nilable(::String)) }
    def billable_metric_id_before_last_save; end

    sig { returns(T.untyped) }
    def billable_metric_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def billable_metric_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billable_metric_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billable_metric_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billable_metric_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billable_metric_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billable_metric_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billable_metric_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billable_metric_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billable_metric_id_was; end

    sig { void }
    def billable_metric_id_will_change!; end

    sig { returns(::String) }
    def charge_model; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def charge_model=(value); end

    sig { returns(T::Boolean) }
    def charge_model?; end

    sig { returns(T.nilable(::String)) }
    def charge_model_before_last_save; end

    sig { returns(T.untyped) }
    def charge_model_before_type_cast; end

    sig { returns(T::Boolean) }
    def charge_model_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def charge_model_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def charge_model_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def charge_model_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def charge_model_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def charge_model_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def charge_model_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def charge_model_previously_was; end

    sig { returns(T.nilable(::String)) }
    def charge_model_was; end

    sig { void }
    def charge_model_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def invoice_display_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def invoice_display_name=(value); end

    sig { returns(T::Boolean) }
    def invoice_display_name?; end

    sig { returns(T.nilable(::String)) }
    def invoice_display_name_before_last_save; end

    sig { returns(T.untyped) }
    def invoice_display_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def invoice_display_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invoice_display_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invoice_display_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def invoice_display_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def invoice_display_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invoice_display_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def invoice_display_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def invoice_display_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def invoice_display_name_was; end

    sig { void }
    def invoice_display_name_will_change!; end

    sig { returns(T::Boolean) }
    def invoiceable; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def invoiceable=(value); end

    sig { returns(T::Boolean) }
    def invoiceable?; end

    sig { returns(T.nilable(T::Boolean)) }
    def invoiceable_before_last_save; end

    sig { returns(T.untyped) }
    def invoiceable_before_type_cast; end

    sig { returns(T::Boolean) }
    def invoiceable_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def invoiceable_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def invoiceable_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def invoiceable_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def invoiceable_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def invoiceable_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def invoiceable_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def invoiceable_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def invoiceable_was; end

    sig { void }
    def invoiceable_will_change!; end

    sig { returns(::Integer) }
    def min_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def min_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def min_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def min_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def min_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def min_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def min_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def min_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def min_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def min_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def min_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def min_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def min_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def min_amount_cents_was; end

    sig { void }
    def min_amount_cents_will_change!; end

    sig { returns(T.nilable(::String)) }
    def parent_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def parent_id=(value); end

    sig { returns(T::Boolean) }
    def parent_id?; end

    sig { returns(T.nilable(::String)) }
    def parent_id_before_last_save; end

    sig { returns(T.untyped) }
    def parent_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def parent_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def parent_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def parent_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def parent_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def parent_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def parent_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def parent_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def parent_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def parent_id_was; end

    sig { void }
    def parent_id_will_change!; end

    sig { returns(T::Boolean) }
    def pay_in_advance; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def pay_in_advance=(value); end

    sig { returns(T::Boolean) }
    def pay_in_advance?; end

    sig { returns(T.nilable(T::Boolean)) }
    def pay_in_advance_before_last_save; end

    sig { returns(T.untyped) }
    def pay_in_advance_before_type_cast; end

    sig { returns(T::Boolean) }
    def pay_in_advance_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def pay_in_advance_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def pay_in_advance_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def pay_in_advance_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def pay_in_advance_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def pay_in_advance_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def pay_in_advance_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def pay_in_advance_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def pay_in_advance_was; end

    sig { void }
    def pay_in_advance_will_change!; end

    sig { returns(T.nilable(::String)) }
    def plan_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def plan_id=(value); end

    sig { returns(T::Boolean) }
    def plan_id?; end

    sig { returns(T.nilable(::String)) }
    def plan_id_before_last_save; end

    sig { returns(T.untyped) }
    def plan_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def plan_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plan_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def plan_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plan_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def plan_id_was; end

    sig { void }
    def plan_id_will_change!; end

    sig { returns(T.untyped) }
    def properties; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def properties=(value); end

    sig { returns(T::Boolean) }
    def properties?; end

    sig { returns(T.untyped) }
    def properties_before_last_save; end

    sig { returns(T.untyped) }
    def properties_before_type_cast; end

    sig { returns(T::Boolean) }
    def properties_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def properties_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def properties_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def properties_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def properties_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def properties_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def properties_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def properties_previously_was; end

    sig { returns(T.untyped) }
    def properties_was; end

    sig { void }
    def properties_will_change!; end

    sig { returns(T::Boolean) }
    def prorated; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def prorated=(value); end

    sig { returns(T::Boolean) }
    def prorated?; end

    sig { returns(T.nilable(T::Boolean)) }
    def prorated_before_last_save; end

    sig { returns(T.untyped) }
    def prorated_before_type_cast; end

    sig { returns(T::Boolean) }
    def prorated_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def prorated_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def prorated_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def prorated_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def prorated_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def prorated_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def prorated_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def prorated_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def prorated_was; end

    sig { void }
    def prorated_will_change!; end

    sig { returns(T.nilable(::String)) }
    def regroup_paid_fees; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def regroup_paid_fees=(value); end

    sig { returns(T::Boolean) }
    def regroup_paid_fees?; end

    sig { returns(T.nilable(::String)) }
    def regroup_paid_fees_before_last_save; end

    sig { returns(T.untyped) }
    def regroup_paid_fees_before_type_cast; end

    sig { returns(T::Boolean) }
    def regroup_paid_fees_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def regroup_paid_fees_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def regroup_paid_fees_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def regroup_paid_fees_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def regroup_paid_fees_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def regroup_paid_fees_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def regroup_paid_fees_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def regroup_paid_fees_previously_was; end

    sig { returns(T.nilable(::String)) }
    def regroup_paid_fees_was; end

    sig { void }
    def regroup_paid_fees_will_change!; end

    sig { void }
    def restore_amount_currency!; end

    sig { void }
    def restore_billable_metric_id!; end

    sig { void }
    def restore_charge_model!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_invoice_display_name!; end

    sig { void }
    def restore_invoiceable!; end

    sig { void }
    def restore_min_amount_cents!; end

    sig { void }
    def restore_parent_id!; end

    sig { void }
    def restore_pay_in_advance!; end

    sig { void }
    def restore_plan_id!; end

    sig { void }
    def restore_properties!; end

    sig { void }
    def restore_prorated!; end

    sig { void }
    def restore_regroup_paid_fees!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_amount_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_amount_currency?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_billable_metric_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_billable_metric_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_charge_model; end

    sig { returns(T::Boolean) }
    def saved_change_to_charge_model?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_invoice_display_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_invoice_display_name?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_invoiceable; end

    sig { returns(T::Boolean) }
    def saved_change_to_invoiceable?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_min_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_min_amount_cents?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_parent_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_parent_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_pay_in_advance; end

    sig { returns(T::Boolean) }
    def saved_change_to_pay_in_advance?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_plan_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_properties; end

    sig { returns(T::Boolean) }
    def saved_change_to_properties?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_prorated; end

    sig { returns(T::Boolean) }
    def saved_change_to_prorated?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_regroup_paid_fees; end

    sig { returns(T::Boolean) }
    def saved_change_to_regroup_paid_fees?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_amount_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billable_metric_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_charge_model?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invoice_display_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invoiceable?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_min_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_parent_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pay_in_advance?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_properties?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_prorated?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_regroup_paid_fees?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def custom(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def discarded(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dynamic(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def graduated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def graduated_percentage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invoice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def kept(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_custom(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dynamic(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_graduated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_graduated_percentage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_invoice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_package(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_percentage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_standard(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_volume(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def package(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pay_in_advance(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def percentage(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Charge).returns(BasicObject)).returns(T::Array[::Charge]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def standard(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def undiscarded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def volume(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_discarded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Charge } }

    sig { returns(T::Array[::Charge]) }
    def to_a; end

    sig { returns(T::Array[::Charge]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Charge } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Charge } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Charge } }

    sig do
      params(
        records: T.any(::Charge, T::Enumerable[T.any(::Charge, T::Enumerable[::Charge])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Charge, T::Enumerable[T.any(::Charge, T::Enumerable[::Charge])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Charge, T::Enumerable[T.any(::Charge, T::Enumerable[::Charge])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Charge, Integer, String, T::Enumerable[T.any(::Charge, Integer, String, T::Enumerable[::Charge])])
      ).returns(T::Array[::Charge])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Charge, Integer, String, T::Enumerable[T.any(::Charge, Integer, String, T::Enumerable[::Charge])])
      ).returns(T::Array[::Charge])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Charge]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Charge, T::Enumerable[T.any(::Charge, T::Enumerable[::Charge])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Charge, T::Enumerable[T.any(::Charge, T::Enumerable[::Charge])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Charge, T::Enumerable[T.any(::Charge, T::Enumerable[::Charge])])
      ).returns(T::Array[::Charge])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Charge]) }
    def target; end

    sig { returns(T::Array[::Charge]) }
    def to_a; end

    sig { returns(T::Array[::Charge]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Charge } }

    sig { returns(T::Array[::Charge]) }
    def to_a; end

    sig { returns(T::Array[::Charge]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Charge } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Charge } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
