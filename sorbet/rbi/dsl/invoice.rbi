# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Invoice`.
# Please instead update this file by running `bin/tapioca dsl Invoice`.


class Invoice
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(T::Boolean) }
  def closed?; end

  sig { returns(T::Boolean) }
  def draft?; end

  sig { returns(T::Boolean) }
  def failed?; end

  sig { returns(ActiveStorage::Attached::One) }
  def file; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def file=(attachable); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def finalize(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def finalize!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def finalize_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def finalized?; end

  sig { returns(T::Boolean) }
  def generating?; end

  sig { returns(T::Boolean) }
  def may_finalize?; end

  sig { returns(T::Boolean) }
  def may_void?; end

  sig { returns(T::Boolean) }
  def open?; end

  sig { returns(T::Boolean) }
  def pending?; end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def void(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def void!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def void_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def voided?; end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(args: T.untyped, block: T.nilable(T.proc.bind(PrivateAASMMachine).void)).returns(PrivateAASMMachine) }
    def aasm(*args, &block); end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def invoice_types; end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    def new(attributes = nil, &block); end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def payment_statuses; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def statuses; end

    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def tax_statuses; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Invoice).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Invoice).void)
      ).returns(T::Array[::Invoice])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Invoice).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Invoice).void)
      ).returns(T::Array[::Invoice])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Invoice).void)
      ).returns(T::Array[::Invoice])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Invoice).void)
      ).returns(T::Array[::Invoice])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Invoice).void)
      ).returns(T::Array[::Invoice])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Invoice]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Invoice)) }
    def fifth; end

    sig { returns(::Invoice) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Invoice)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Invoice])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Invoice).void).returns(T.nilable(::Invoice)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Invoice)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Invoice) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Invoice).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Invoice])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Invoice]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Invoice]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Invoice).void)
      ).returns(T::Array[::Invoice])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Invoice).void)
      ).returns(T::Array[::Invoice])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Invoice).void)
      ).returns(T::Array[::Invoice])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Invoice)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Invoice) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Invoice) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Invoice)) }
    sig { params(limit: Integer).returns(T::Array[::Invoice]) }
    def first(limit = nil); end

    sig { returns(::Invoice) }
    def first!; end

    sig { returns(T.nilable(::Invoice)) }
    def forty_two; end

    sig { returns(::Invoice) }
    def forty_two!; end

    sig { returns(T.nilable(::Invoice)) }
    def fourth; end

    sig { returns(::Invoice) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Invoice)) }
    sig { params(limit: Integer).returns(T::Array[::Invoice]) }
    def last(limit = nil); end

    sig { returns(::Invoice) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Invoice).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Invoice).void)
      ).returns(T::Array[::Invoice])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Invoice).void)).returns(::Invoice) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Invoice).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Invoice).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Invoice)) }
    def second; end

    sig { returns(::Invoice) }
    def second!; end

    sig { returns(T.nilable(::Invoice)) }
    def second_to_last; end

    sig { returns(::Invoice) }
    def second_to_last!; end

    sig { returns(::Invoice) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Invoice).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Invoice)) }
    sig { params(limit: Integer).returns(T::Array[::Invoice]) }
    def take(limit = nil); end

    sig { returns(::Invoice) }
    def take!; end

    sig { returns(T.nilable(::Invoice)) }
    def third; end

    sig { returns(::Invoice) }
    def third!; end

    sig { returns(T.nilable(::Invoice)) }
    def third_to_last; end

    sig { returns(::Invoice) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def add_on!; end

    sig { returns(T::Boolean) }
    def add_on?; end

    sig { void }
    def advance_charges!; end

    sig { returns(T::Boolean) }
    def advance_charges?; end

    sig { void }
    def closed!; end

    sig { returns(T::Boolean) }
    def closed?; end

    sig { void }
    def credit!; end

    sig { returns(T::Boolean) }
    def credit?; end

    sig { void }
    def draft!; end

    sig { returns(T::Boolean) }
    def draft?; end

    sig { void }
    def failed!; end

    sig { returns(T::Boolean) }
    def failed?; end

    sig { void }
    def finalized!; end

    sig { returns(T::Boolean) }
    def finalized?; end

    sig { void }
    def generating!; end

    sig { returns(T::Boolean) }
    def generating?; end

    sig { void }
    def one_off!; end

    sig { returns(T::Boolean) }
    def one_off?; end

    sig { void }
    def open!; end

    sig { returns(T::Boolean) }
    def open?; end

    sig { void }
    def payment_failed!; end

    sig { returns(T::Boolean) }
    def payment_failed?; end

    sig { void }
    def payment_pending!; end

    sig { returns(T::Boolean) }
    def payment_pending?; end

    sig { void }
    def payment_succeeded!; end

    sig { returns(T::Boolean) }
    def payment_succeeded?; end

    sig { void }
    def pending!; end

    sig { returns(T::Boolean) }
    def pending?; end

    sig { void }
    def progressive_billing!; end

    sig { returns(T::Boolean) }
    def progressive_billing?; end

    sig { void }
    def subscription!; end

    sig { returns(T::Boolean) }
    def subscription?; end

    sig { void }
    def tax_failed!; end

    sig { returns(T::Boolean) }
    def tax_failed?; end

    sig { void }
    def tax_pending!; end

    sig { returns(T::Boolean) }
    def tax_pending?; end

    sig { void }
    def tax_succeeded!; end

    sig { returns(T::Boolean) }
    def tax_succeeded?; end

    sig { void }
    def voided!; end

    sig { returns(T::Boolean) }
    def voided?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def applied_invoice_custom_section_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_invoice_custom_section_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :applied_invoice_custom_sections`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AppliedInvoiceCustomSection::PrivateCollectionProxy) }
    def applied_invoice_custom_sections; end

    sig { params(value: T::Enumerable[::AppliedInvoiceCustomSection]).void }
    def applied_invoice_custom_sections=(value); end

    sig { returns(T::Array[T.untyped]) }
    def applied_payment_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_payment_request_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :applied_payment_requests`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaymentRequest::AppliedInvoice::PrivateCollectionProxy) }
    def applied_payment_requests; end

    sig { params(value: T::Enumerable[::PaymentRequest::AppliedInvoice]).void }
    def applied_payment_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def applied_tax_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_tax_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :applied_taxes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Invoice::AppliedTax::PrivateCollectionProxy) }
    def applied_taxes; end

    sig { params(value: T::Enumerable[::Invoice::AppliedTax]).void }
    def applied_taxes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def applied_usage_threshold_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_usage_threshold_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :applied_usage_thresholds`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AppliedUsageThreshold::PrivateCollectionProxy) }
    def applied_usage_thresholds; end

    sig { params(value: T::Enumerable[::AppliedUsageThreshold]).void }
    def applied_usage_thresholds=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def build_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_file_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_file_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def build_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_file_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_file_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_file_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_file_blob!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def credit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def credit_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def credit_note_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def credit_note_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :credit_notes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CreditNote::PrivateCollectionProxy) }
    def credit_notes; end

    sig { params(value: T::Enumerable[::CreditNote]).void }
    def credit_notes=(value); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :credits`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Credit::PrivateCollectionProxy) }
    def credits; end

    sig { params(value: T::Enumerable[::Credit]).void }
    def credits=(value); end

    sig { returns(T.nilable(::Customer)) }
    def customer; end

    sig { params(value: T.nilable(::Customer)).void }
    def customer=(value); end

    sig { returns(T::Boolean) }
    def customer_changed?; end

    sig { returns(T::Boolean) }
    def customer_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def error_detail_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def error_detail_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :error_details`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ErrorDetail::PrivateCollectionProxy) }
    def error_details; end

    sig { params(value: T::Enumerable[::ErrorDetail]).void }
    def error_details=(value); end

    sig { returns(T::Array[T.untyped]) }
    def fee_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def fee_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :fees`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Fee::PrivateCollectionProxy) }
    def fees; end

    sig { params(value: T::Enumerable[::Fee]).void }
    def fees=(value); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def file_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def file_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def file_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def file_blob=(value); end

    sig { returns(T::Array[T.untyped]) }
    def integration_resource_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_resource_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :integration_resources`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationResource::PrivateCollectionProxy) }
    def integration_resources; end

    sig { params(value: T::Enumerable[::IntegrationResource]).void }
    def integration_resources=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invoice_subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invoice_subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :invoice_subscriptions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::InvoiceSubscription::PrivateCollectionProxy) }
    def invoice_subscriptions; end

    sig { params(value: T::Enumerable[::InvoiceSubscription]).void }
    def invoice_subscriptions=(value); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :metadata`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Metadata::InvoiceMetadata::PrivateCollectionProxy) }
    def metadata; end

    sig { params(value: T::Enumerable[::Metadata::InvoiceMetadata]).void }
    def metadata=(value); end

    sig { returns(T::Array[T.untyped]) }
    def metadatum_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def metadatum_ids=(ids); end

    sig { returns(T.nilable(::Organization)) }
    def organization; end

    sig { params(value: T.nilable(::Organization)).void }
    def organization=(value); end

    sig { returns(T::Boolean) }
    def organization_changed?; end

    sig { returns(T::Boolean) }
    def organization_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def payment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def payment_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def payment_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def payment_request_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :payment_requests, through: :applied_payment_requests`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::PaymentRequest::PrivateCollectionProxy) }
    def payment_requests; end

    sig { params(value: T::Enumerable[::PaymentRequest]).void }
    def payment_requests=(value); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :payments`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Payment::PrivateCollectionProxy) }
    def payments; end

    sig { params(value: T::Enumerable[::Payment]).void }
    def payments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def plan_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def plan_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :plans, through: :subscriptions`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Plan::PrivateCollectionProxy) }
    def plans; end

    sig { params(value: T::Enumerable[::Plan]).void }
    def plans=(value); end

    sig { returns(T::Array[T.untyped]) }
    def progressive_billing_credit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def progressive_billing_credit_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :progressive_billing_credits`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Credit::PrivateCollectionProxy) }
    def progressive_billing_credits; end

    sig { params(value: T::Enumerable[::Credit]).void }
    def progressive_billing_credits=(value); end

    sig { returns(T.nilable(::Customer)) }
    def reload_customer; end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_file_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_file_blob; end

    sig { returns(T.nilable(::Organization)) }
    def reload_organization; end

    sig { void }
    def reset_customer; end

    sig { void }
    def reset_file_attachment; end

    sig { void }
    def reset_file_blob; end

    sig { void }
    def reset_organization; end

    sig { returns(T::Array[T.untyped]) }
    def subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :subscriptions, through: :invoice_subscriptions`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Subscription::PrivateCollectionProxy) }
    def subscriptions; end

    sig { params(value: T::Enumerable[::Subscription]).void }
    def subscriptions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tax_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tax_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :taxes, through: :applied_taxes`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Tax::PrivateCollectionProxy) }
    def taxes; end

    sig { params(value: T::Enumerable[::Tax]).void }
    def taxes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def usage_threshold_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def usage_threshold_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :usage_thresholds, through: :applied_usage_thresholds`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::UsageThreshold::PrivateCollectionProxy) }
    def usage_thresholds; end

    sig { params(value: T::Enumerable[::UsageThreshold]).void }
    def usage_thresholds=(value); end

    sig { returns(T::Array[T.untyped]) }
    def version_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def version_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :versions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaperTrail::Version::PrivateCollectionProxy) }
    def versions; end

    sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
    def versions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def wallet_transaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def wallet_transaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Invoice` class because it declared `has_many :wallet_transactions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WalletTransaction::PrivateCollectionProxy) }
    def wallet_transactions; end

    sig { params(value: T::Enumerable[::WalletTransaction]).void }
    def wallet_transactions=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def add_on(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def advance_charges(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def credit(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def finalized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def generating(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invisible(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def non_self_billed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_add_on(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_advance_charges(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_credit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_finalized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_generating(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_one_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_payment_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_payment_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_payment_succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_progressive_billing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_tax_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_tax_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_tax_succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_voided(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def one_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def payment_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def payment_overdue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def payment_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def payment_succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def progressive_billing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ready_to_be_finalized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ready_to_be_refreshed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Invoice).returns(BasicObject)).returns(T::Array[::Invoice]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def self_billed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def tax_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def tax_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def tax_succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def visible(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def voided(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_active_subscriptions(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_file(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_generated_number(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_sequential_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def coupons_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def coupons_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def coupons_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def coupons_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def coupons_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def coupons_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def coupons_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def coupons_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def coupons_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def coupons_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def coupons_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def coupons_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def coupons_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def coupons_amount_cents_was; end

    sig { void }
    def coupons_amount_cents_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def credit_notes_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def credit_notes_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def credit_notes_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def credit_notes_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def credit_notes_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def credit_notes_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def credit_notes_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def credit_notes_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def credit_notes_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def credit_notes_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def credit_notes_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def credit_notes_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def credit_notes_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def credit_notes_amount_cents_was; end

    sig { void }
    def credit_notes_amount_cents_will_change!; end

    sig { returns(T.nilable(::String)) }
    def currency; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def currency=(value); end

    sig { returns(T::Boolean) }
    def currency?; end

    sig { returns(T.nilable(::String)) }
    def currency_before_last_save; end

    sig { returns(T.untyped) }
    def currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def currency_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def currency_was; end

    sig { void }
    def currency_will_change!; end

    sig { returns(T.nilable(::String)) }
    def customer_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def customer_id=(value); end

    sig { returns(T::Boolean) }
    def customer_id?; end

    sig { returns(T.nilable(::String)) }
    def customer_id_before_last_save; end

    sig { returns(T.untyped) }
    def customer_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def customer_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def customer_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def customer_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def customer_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def customer_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def customer_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def customer_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def customer_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def customer_id_was; end

    sig { void }
    def customer_id_will_change!; end

    sig { returns(::Integer) }
    def fees_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def fees_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def fees_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def fees_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def fees_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def fees_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def fees_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def fees_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def fees_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def fees_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def fees_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def fees_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def fees_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def fees_amount_cents_was; end

    sig { void }
    def fees_amount_cents_will_change!; end

    sig { returns(T.nilable(::String)) }
    def file; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def file=(value); end

    sig { returns(T::Boolean) }
    def file?; end

    sig { returns(T.nilable(::String)) }
    def file_before_last_save; end

    sig { returns(T.untyped) }
    def file_before_type_cast; end

    sig { returns(T::Boolean) }
    def file_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def file_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def file_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def file_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def file_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def file_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def file_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def file_previously_was; end

    sig { returns(T.nilable(::String)) }
    def file_was; end

    sig { void }
    def file_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def invoice_type; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def invoice_type=(value); end

    sig { returns(T::Boolean) }
    def invoice_type?; end

    sig { returns(T.nilable(::String)) }
    def invoice_type_before_last_save; end

    sig { returns(T.untyped) }
    def invoice_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def invoice_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def invoice_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def invoice_type_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def invoice_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def invoice_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def invoice_type_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def invoice_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def invoice_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def invoice_type_was; end

    sig { void }
    def invoice_type_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def issuing_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def issuing_date=(value); end

    sig { returns(T::Boolean) }
    def issuing_date?; end

    sig { returns(T.nilable(::Date)) }
    def issuing_date_before_last_save; end

    sig { returns(T.untyped) }
    def issuing_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def issuing_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def issuing_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def issuing_date_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def issuing_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def issuing_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def issuing_date_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def issuing_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def issuing_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def issuing_date_was; end

    sig { void }
    def issuing_date_will_change!; end

    sig { returns(::Integer) }
    def net_payment_term; end

    sig { params(value: ::Integer).returns(::Integer) }
    def net_payment_term=(value); end

    sig { returns(T::Boolean) }
    def net_payment_term?; end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_before_last_save; end

    sig { returns(T.untyped) }
    def net_payment_term_before_type_cast; end

    sig { returns(T::Boolean) }
    def net_payment_term_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def net_payment_term_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def net_payment_term_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def net_payment_term_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def net_payment_term_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def net_payment_term_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def net_payment_term_was; end

    sig { void }
    def net_payment_term_will_change!; end

    sig { returns(::String) }
    def number; end

    sig { params(value: ::String).returns(::String) }
    def number=(value); end

    sig { returns(T::Boolean) }
    def number?; end

    sig { returns(T.nilable(::String)) }
    def number_before_last_save; end

    sig { returns(T.untyped) }
    def number_before_type_cast; end

    sig { returns(T::Boolean) }
    def number_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def number_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def number_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def number_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def number_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def number_was; end

    sig { void }
    def number_will_change!; end

    sig { returns(::String) }
    def organization_id; end

    sig { params(value: ::String).returns(::String) }
    def organization_id=(value); end

    sig { returns(T::Boolean) }
    def organization_id?; end

    sig { returns(T.nilable(::String)) }
    def organization_id_before_last_save; end

    sig { returns(T.untyped) }
    def organization_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def organization_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def organization_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def organization_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def organization_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def organization_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def organization_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def organization_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def organization_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def organization_id_was; end

    sig { void }
    def organization_id_will_change!; end

    sig { returns(::Integer) }
    def organization_sequential_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def organization_sequential_id=(value); end

    sig { returns(T::Boolean) }
    def organization_sequential_id?; end

    sig { returns(T.nilable(::Integer)) }
    def organization_sequential_id_before_last_save; end

    sig { returns(T.untyped) }
    def organization_sequential_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def organization_sequential_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def organization_sequential_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def organization_sequential_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def organization_sequential_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def organization_sequential_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def organization_sequential_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def organization_sequential_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def organization_sequential_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def organization_sequential_id_was; end

    sig { void }
    def organization_sequential_id_will_change!; end

    sig { returns(::Integer) }
    def payment_attempts; end

    sig { params(value: ::Integer).returns(::Integer) }
    def payment_attempts=(value); end

    sig { returns(T::Boolean) }
    def payment_attempts?; end

    sig { returns(T.nilable(::Integer)) }
    def payment_attempts_before_last_save; end

    sig { returns(T.untyped) }
    def payment_attempts_before_type_cast; end

    sig { returns(T::Boolean) }
    def payment_attempts_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def payment_attempts_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def payment_attempts_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def payment_attempts_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def payment_attempts_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def payment_attempts_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def payment_attempts_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def payment_attempts_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def payment_attempts_was; end

    sig { void }
    def payment_attempts_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payment_dispute_lost_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payment_dispute_lost_at=(value); end

    sig { returns(T::Boolean) }
    def payment_dispute_lost_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payment_dispute_lost_at_before_last_save; end

    sig { returns(T.untyped) }
    def payment_dispute_lost_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def payment_dispute_lost_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def payment_dispute_lost_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def payment_dispute_lost_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def payment_dispute_lost_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payment_dispute_lost_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def payment_dispute_lost_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def payment_dispute_lost_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payment_dispute_lost_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def payment_dispute_lost_at_was; end

    sig { void }
    def payment_dispute_lost_at_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def payment_due_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def payment_due_date=(value); end

    sig { returns(T::Boolean) }
    def payment_due_date?; end

    sig { returns(T.nilable(::Date)) }
    def payment_due_date_before_last_save; end

    sig { returns(T.untyped) }
    def payment_due_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def payment_due_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def payment_due_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def payment_due_date_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def payment_due_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def payment_due_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def payment_due_date_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def payment_due_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def payment_due_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def payment_due_date_was; end

    sig { void }
    def payment_due_date_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def payment_overdue; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def payment_overdue=(value); end

    sig { returns(T::Boolean) }
    def payment_overdue?; end

    sig { returns(T.nilable(T::Boolean)) }
    def payment_overdue_before_last_save; end

    sig { returns(T.untyped) }
    def payment_overdue_before_type_cast; end

    sig { returns(T::Boolean) }
    def payment_overdue_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def payment_overdue_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def payment_overdue_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def payment_overdue_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def payment_overdue_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def payment_overdue_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def payment_overdue_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def payment_overdue_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def payment_overdue_was; end

    sig { void }
    def payment_overdue_will_change!; end

    sig { returns(::String) }
    def payment_status; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def payment_status=(value); end

    sig { returns(T::Boolean) }
    def payment_status?; end

    sig { returns(T.nilable(::String)) }
    def payment_status_before_last_save; end

    sig { returns(T.untyped) }
    def payment_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def payment_status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def payment_status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def payment_status_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def payment_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payment_status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def payment_status_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def payment_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payment_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def payment_status_was; end

    sig { void }
    def payment_status_will_change!; end

    sig { returns(::Integer) }
    def prepaid_credit_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def prepaid_credit_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def prepaid_credit_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def prepaid_credit_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def prepaid_credit_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def prepaid_credit_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def prepaid_credit_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def prepaid_credit_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def prepaid_credit_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def prepaid_credit_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def prepaid_credit_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def prepaid_credit_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def prepaid_credit_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def prepaid_credit_amount_cents_was; end

    sig { void }
    def prepaid_credit_amount_cents_will_change!; end

    sig { returns(::Integer) }
    def progressive_billing_credit_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def progressive_billing_credit_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def progressive_billing_credit_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def progressive_billing_credit_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def progressive_billing_credit_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def progressive_billing_credit_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def progressive_billing_credit_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def progressive_billing_credit_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def progressive_billing_credit_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def progressive_billing_credit_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def progressive_billing_credit_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def progressive_billing_credit_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def progressive_billing_credit_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def progressive_billing_credit_amount_cents_was; end

    sig { void }
    def progressive_billing_credit_amount_cents_will_change!; end

    sig { returns(T::Boolean) }
    def ready_for_payment_processing; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def ready_for_payment_processing=(value); end

    sig { returns(T::Boolean) }
    def ready_for_payment_processing?; end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_for_payment_processing_before_last_save; end

    sig { returns(T.untyped) }
    def ready_for_payment_processing_before_type_cast; end

    sig { returns(T::Boolean) }
    def ready_for_payment_processing_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ready_for_payment_processing_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ready_for_payment_processing_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ready_for_payment_processing_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_for_payment_processing_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ready_for_payment_processing_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ready_for_payment_processing_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_for_payment_processing_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_for_payment_processing_was; end

    sig { void }
    def ready_for_payment_processing_will_change!; end

    sig { returns(T::Boolean) }
    def ready_to_be_refreshed; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def ready_to_be_refreshed=(value); end

    sig { returns(T::Boolean) }
    def ready_to_be_refreshed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_to_be_refreshed_before_last_save; end

    sig { returns(T.untyped) }
    def ready_to_be_refreshed_before_type_cast; end

    sig { returns(T::Boolean) }
    def ready_to_be_refreshed_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ready_to_be_refreshed_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ready_to_be_refreshed_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ready_to_be_refreshed_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_to_be_refreshed_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ready_to_be_refreshed_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ready_to_be_refreshed_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_to_be_refreshed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_to_be_refreshed_was; end

    sig { void }
    def ready_to_be_refreshed_will_change!; end

    sig { void }
    def restore_coupons_amount_cents!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_credit_notes_amount_cents!; end

    sig { void }
    def restore_currency!; end

    sig { void }
    def restore_customer_id!; end

    sig { void }
    def restore_fees_amount_cents!; end

    sig { void }
    def restore_file!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_invoice_type!; end

    sig { void }
    def restore_issuing_date!; end

    sig { void }
    def restore_net_payment_term!; end

    sig { void }
    def restore_number!; end

    sig { void }
    def restore_organization_id!; end

    sig { void }
    def restore_organization_sequential_id!; end

    sig { void }
    def restore_payment_attempts!; end

    sig { void }
    def restore_payment_dispute_lost_at!; end

    sig { void }
    def restore_payment_due_date!; end

    sig { void }
    def restore_payment_overdue!; end

    sig { void }
    def restore_payment_status!; end

    sig { void }
    def restore_prepaid_credit_amount_cents!; end

    sig { void }
    def restore_progressive_billing_credit_amount_cents!; end

    sig { void }
    def restore_ready_for_payment_processing!; end

    sig { void }
    def restore_ready_to_be_refreshed!; end

    sig { void }
    def restore_self_billed!; end

    sig { void }
    def restore_sequential_id!; end

    sig { void }
    def restore_skip_charges!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_sub_total_excluding_taxes_amount_cents!; end

    sig { void }
    def restore_sub_total_including_taxes_amount_cents!; end

    sig { void }
    def restore_tax_status!; end

    sig { void }
    def restore_taxes_amount_cents!; end

    sig { void }
    def restore_taxes_rate!; end

    sig { void }
    def restore_timezone!; end

    sig { void }
    def restore_total_amount_cents!; end

    sig { void }
    def restore_total_paid_amount_cents!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_version_number!; end

    sig { void }
    def restore_voided_at!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_coupons_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_coupons_amount_cents?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_credit_notes_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_credit_notes_amount_cents?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_currency?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_customer_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_customer_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_fees_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_fees_amount_cents?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_file; end

    sig { returns(T::Boolean) }
    def saved_change_to_file?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_invoice_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_invoice_type?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_issuing_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_issuing_date?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_net_payment_term; end

    sig { returns(T::Boolean) }
    def saved_change_to_net_payment_term?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_number?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_organization_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_organization_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_organization_sequential_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_organization_sequential_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_payment_attempts; end

    sig { returns(T::Boolean) }
    def saved_change_to_payment_attempts?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_payment_dispute_lost_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_payment_dispute_lost_at?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_payment_due_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_payment_due_date?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_payment_overdue; end

    sig { returns(T::Boolean) }
    def saved_change_to_payment_overdue?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_payment_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_payment_status?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_prepaid_credit_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_prepaid_credit_amount_cents?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_progressive_billing_credit_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_progressive_billing_credit_amount_cents?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_ready_for_payment_processing; end

    sig { returns(T::Boolean) }
    def saved_change_to_ready_for_payment_processing?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_ready_to_be_refreshed; end

    sig { returns(T::Boolean) }
    def saved_change_to_ready_to_be_refreshed?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_self_billed; end

    sig { returns(T::Boolean) }
    def saved_change_to_self_billed?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_sequential_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sequential_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_skip_charges; end

    sig { returns(T::Boolean) }
    def saved_change_to_skip_charges?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_status?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sub_total_excluding_taxes_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_sub_total_excluding_taxes_amount_cents?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sub_total_including_taxes_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_sub_total_including_taxes_amount_cents?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_tax_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_tax_status?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_taxes_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_taxes_amount_cents?; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def saved_change_to_taxes_rate; end

    sig { returns(T::Boolean) }
    def saved_change_to_taxes_rate?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_timezone; end

    sig { returns(T::Boolean) }
    def saved_change_to_timezone?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_total_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_total_amount_cents?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_total_paid_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_total_paid_amount_cents?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_version_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_version_number?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_voided_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_voided_at?; end

    sig { returns(T::Boolean) }
    def self_billed; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def self_billed=(value); end

    sig { returns(T::Boolean) }
    def self_billed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def self_billed_before_last_save; end

    sig { returns(T.untyped) }
    def self_billed_before_type_cast; end

    sig { returns(T::Boolean) }
    def self_billed_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def self_billed_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def self_billed_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def self_billed_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def self_billed_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def self_billed_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def self_billed_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def self_billed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def self_billed_was; end

    sig { void }
    def self_billed_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def sequential_id=(value); end

    sig { returns(T::Boolean) }
    def sequential_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_before_last_save; end

    sig { returns(T.untyped) }
    def sequential_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sequential_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sequential_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sequential_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def sequential_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sequential_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def sequential_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sequential_id_was; end

    sig { void }
    def sequential_id_will_change!; end

    sig { returns(T::Boolean) }
    def skip_charges; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def skip_charges=(value); end

    sig { returns(T::Boolean) }
    def skip_charges?; end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_charges_before_last_save; end

    sig { returns(T.untyped) }
    def skip_charges_before_type_cast; end

    sig { returns(T::Boolean) }
    def skip_charges_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_charges_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_charges_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def skip_charges_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_charges_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def skip_charges_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def skip_charges_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_charges_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def skip_charges_was; end

    sig { void }
    def skip_charges_will_change!; end

    sig { returns(::String) }
    def status; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(::Integer) }
    def sub_total_excluding_taxes_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sub_total_excluding_taxes_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def sub_total_excluding_taxes_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def sub_total_excluding_taxes_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def sub_total_excluding_taxes_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def sub_total_excluding_taxes_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sub_total_excluding_taxes_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sub_total_excluding_taxes_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sub_total_excluding_taxes_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sub_total_excluding_taxes_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sub_total_excluding_taxes_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sub_total_excluding_taxes_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sub_total_excluding_taxes_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sub_total_excluding_taxes_amount_cents_was; end

    sig { void }
    def sub_total_excluding_taxes_amount_cents_will_change!; end

    sig { returns(::Integer) }
    def sub_total_including_taxes_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sub_total_including_taxes_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def sub_total_including_taxes_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def sub_total_including_taxes_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def sub_total_including_taxes_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def sub_total_including_taxes_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sub_total_including_taxes_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sub_total_including_taxes_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sub_total_including_taxes_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sub_total_including_taxes_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sub_total_including_taxes_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sub_total_including_taxes_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sub_total_including_taxes_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sub_total_including_taxes_amount_cents_was; end

    sig { void }
    def sub_total_including_taxes_amount_cents_will_change!; end

    sig { returns(T.nilable(::String)) }
    def tax_status; end

    sig { params(value: T.nilable(T.any(::String, ::Symbol))).returns(T.nilable(T.any(::String, ::Symbol))) }
    def tax_status=(value); end

    sig { returns(T::Boolean) }
    def tax_status?; end

    sig { returns(T.nilable(::String)) }
    def tax_status_before_last_save; end

    sig { returns(T.untyped) }
    def tax_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def tax_status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tax_status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tax_status_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol)),
        to: T.nilable(T.any(::String, ::Symbol))
      ).returns(T::Boolean)
    end
    def tax_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tax_status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tax_status_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol)),
        to: T.nilable(T.any(::String, ::Symbol))
      ).returns(T::Boolean)
    end
    def tax_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tax_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def tax_status_was; end

    sig { void }
    def tax_status_will_change!; end

    sig { returns(::Integer) }
    def taxes_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def taxes_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def taxes_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def taxes_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def taxes_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def taxes_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def taxes_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def taxes_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def taxes_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def taxes_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def taxes_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def taxes_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def taxes_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def taxes_amount_cents_was; end

    sig { void }
    def taxes_amount_cents_will_change!; end

    sig { returns(::Float) }
    def taxes_rate; end

    sig { params(value: ::Float).returns(::Float) }
    def taxes_rate=(value); end

    sig { returns(T::Boolean) }
    def taxes_rate?; end

    sig { returns(T.nilable(::Float)) }
    def taxes_rate_before_last_save; end

    sig { returns(T.untyped) }
    def taxes_rate_before_type_cast; end

    sig { returns(T::Boolean) }
    def taxes_rate_came_from_user?; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def taxes_rate_change; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def taxes_rate_change_to_be_saved; end

    sig { params(from: ::Float, to: ::Float).returns(T::Boolean) }
    def taxes_rate_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def taxes_rate_in_database; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def taxes_rate_previous_change; end

    sig { params(from: ::Float, to: ::Float).returns(T::Boolean) }
    def taxes_rate_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def taxes_rate_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def taxes_rate_was; end

    sig { void }
    def taxes_rate_will_change!; end

    sig { returns(::String) }
    def timezone; end

    sig { params(value: ::String).returns(::String) }
    def timezone=(value); end

    sig { returns(T::Boolean) }
    def timezone?; end

    sig { returns(T.nilable(::String)) }
    def timezone_before_last_save; end

    sig { returns(T.untyped) }
    def timezone_before_type_cast; end

    sig { returns(T::Boolean) }
    def timezone_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def timezone_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def timezone_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def timezone_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def timezone_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def timezone_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def timezone_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def timezone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def timezone_was; end

    sig { void }
    def timezone_will_change!; end

    sig { returns(::Integer) }
    def total_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def total_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def total_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def total_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def total_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def total_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def total_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def total_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def total_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def total_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def total_amount_cents_was; end

    sig { void }
    def total_amount_cents_will_change!; end

    sig { returns(::Integer) }
    def total_paid_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def total_paid_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def total_paid_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def total_paid_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def total_paid_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def total_paid_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_paid_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_paid_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def total_paid_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def total_paid_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_paid_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def total_paid_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def total_paid_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def total_paid_amount_cents_was; end

    sig { void }
    def total_paid_amount_cents_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def version_number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def version_number=(value); end

    sig { returns(T::Boolean) }
    def version_number?; end

    sig { returns(T.nilable(::Integer)) }
    def version_number_before_last_save; end

    sig { returns(T.untyped) }
    def version_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def version_number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def version_number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def version_number_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def version_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def version_number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def version_number_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def version_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def version_number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def version_number_was; end

    sig { void }
    def version_number_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at=(value); end

    sig { returns(T::Boolean) }
    def voided_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at_before_last_save; end

    sig { returns(T.untyped) }
    def voided_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def voided_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def voided_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def voided_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def voided_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def voided_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def voided_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def voided_at_was; end

    sig { void }
    def voided_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_coupons_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_credit_notes_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_customer_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_fees_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_file?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invoice_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_issuing_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_net_payment_term?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_organization_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_organization_sequential_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payment_attempts?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payment_dispute_lost_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payment_due_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payment_overdue?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payment_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_prepaid_credit_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_progressive_billing_credit_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ready_for_payment_processing?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ready_to_be_refreshed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_self_billed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sequential_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_skip_charges?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sub_total_excluding_taxes_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sub_total_including_taxes_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tax_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_taxes_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_taxes_rate?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_timezone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_total_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_total_paid_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_version_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_voided_at?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def add_on(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def advance_charges(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def credit(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def finalized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def generating(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invisible(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def non_self_billed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_add_on(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_advance_charges(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_credit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_finalized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_generating(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_one_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_payment_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_payment_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_payment_succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_progressive_billing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_tax_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_tax_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_tax_succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_voided(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def one_off(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def payment_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def payment_overdue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def payment_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def payment_succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def progressive_billing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ready_to_be_finalized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ready_to_be_refreshed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Invoice).returns(BasicObject)).returns(T::Array[::Invoice]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def self_billed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def tax_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def tax_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def tax_succeeded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def visible(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def voided(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_active_subscriptions(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_file(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_generated_number(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_sequential_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAASMMachine < AASM::Base
    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Invoice).void)
      ).returns(T.untyped)
    end
    def after_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Invoice).void)
      ).returns(T.untyped)
    end
    def after_all_transactions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Invoice).void)
      ).returns(T.untyped)
    end
    def after_all_transitions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Invoice).void)
      ).returns(T.untyped)
    end
    def before_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Invoice).void)
      ).returns(T.untyped)
    end
    def before_all_transactions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Invoice).void)
      ).returns(T.untyped)
    end
    def ensure_on_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Invoice).void)
      ).returns(T.untyped)
    end
    def error_on_all_events(*callbacks, &block); end

    sig { params(name: T.untyped, options: T.untyped, block: T.proc.bind(PrivateAASMEvent).void).returns(T.untyped) }
    def event(name, options = nil, &block); end

    class PrivateAASMEvent < AASM::Core::Event
      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after_commit(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after_transaction(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before_success(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before_transaction(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def ensure(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def error(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def success(symbol = nil, &block); end

      sig do
        params(
          definitions: T.untyped,
          block: T.nilable(T.proc.bind(PrivateAASMTransition).void)
        ).returns(T.untyped)
      end
      def transitions(definitions = nil, &block); end
    end

    class PrivateAASMTransition < AASM::Core::Transition
      sig { params(block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)).returns(T.untyped) }
      def after(&block); end

      sig { params(block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)).returns(T::Boolean) }
      def guard(&block); end

      sig { params(block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)).returns(T.untyped) }
      def on_transition(&block); end

      sig { params(block: T.nilable(T.proc.bind(Invoice).params(opts: T.untyped).void)).returns(T.untyped) }
      def success(&block); end
    end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Invoice } }

    sig { returns(T::Array[::Invoice]) }
    def to_a; end

    sig { returns(T::Array[::Invoice]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Invoice } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Invoice } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Invoice } }

    sig do
      params(
        records: T.any(::Invoice, T::Enumerable[T.any(::Invoice, T::Enumerable[::Invoice])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Invoice, T::Enumerable[T.any(::Invoice, T::Enumerable[::Invoice])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Invoice, T::Enumerable[T.any(::Invoice, T::Enumerable[::Invoice])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Invoice, Integer, String, T::Enumerable[T.any(::Invoice, Integer, String, T::Enumerable[::Invoice])])
      ).returns(T::Array[::Invoice])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Invoice, Integer, String, T::Enumerable[T.any(::Invoice, Integer, String, T::Enumerable[::Invoice])])
      ).returns(T::Array[::Invoice])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Invoice]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Invoice, T::Enumerable[T.any(::Invoice, T::Enumerable[::Invoice])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Invoice, T::Enumerable[T.any(::Invoice, T::Enumerable[::Invoice])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Invoice, T::Enumerable[T.any(::Invoice, T::Enumerable[::Invoice])])
      ).returns(T::Array[::Invoice])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Invoice]) }
    def target; end

    sig { returns(T::Array[::Invoice]) }
    def to_a; end

    sig { returns(T::Array[::Invoice]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Invoice } }

    sig { returns(T::Array[::Invoice]) }
    def to_a; end

    sig { returns(T::Array[::Invoice]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Invoice } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Invoice } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end

  STATE_CLOSED = T.let(T.unsafe(nil), Symbol)
  STATE_DRAFT = T.let(T.unsafe(nil), Symbol)
  STATE_FAILED = T.let(T.unsafe(nil), Symbol)
  STATE_FINALIZED = T.let(T.unsafe(nil), Symbol)
  STATE_GENERATING = T.let(T.unsafe(nil), Symbol)
  STATE_OPEN = T.let(T.unsafe(nil), Symbol)
  STATE_PENDING = T.let(T.unsafe(nil), Symbol)
  STATE_VOIDED = T.let(T.unsafe(nil), Symbol)
end
