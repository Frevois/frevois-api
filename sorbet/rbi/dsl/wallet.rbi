# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Wallet`.
# Please instead update this file by running `bin/tapioca dsl Wallet`.


class Wallet
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    def new(attributes = nil, &block); end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def statuses; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Wallet).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Wallet).void)
      ).returns(T::Array[::Wallet])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Wallet).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Wallet).void)
      ).returns(T::Array[::Wallet])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Wallet).void)
      ).returns(T::Array[::Wallet])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Wallet).void)
      ).returns(T::Array[::Wallet])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Wallet).void)
      ).returns(T::Array[::Wallet])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Wallet]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Wallet)) }
    def fifth; end

    sig { returns(::Wallet) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Wallet)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Wallet])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Wallet).void).returns(T.nilable(::Wallet)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Wallet)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Wallet) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Wallet).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Wallet])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Wallet]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Wallet]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Wallet).void)
      ).returns(T::Array[::Wallet])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Wallet).void)
      ).returns(T::Array[::Wallet])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Wallet).void)
      ).returns(T::Array[::Wallet])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Wallet)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Wallet) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Wallet) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Wallet)) }
    sig { params(limit: Integer).returns(T::Array[::Wallet]) }
    def first(limit = nil); end

    sig { returns(::Wallet) }
    def first!; end

    sig { returns(T.nilable(::Wallet)) }
    def forty_two; end

    sig { returns(::Wallet) }
    def forty_two!; end

    sig { returns(T.nilable(::Wallet)) }
    def fourth; end

    sig { returns(::Wallet) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Wallet)) }
    sig { params(limit: Integer).returns(T::Array[::Wallet]) }
    def last(limit = nil); end

    sig { returns(::Wallet) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Wallet).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Wallet).void)
      ).returns(T::Array[::Wallet])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Wallet).void)).returns(::Wallet) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Wallet).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Wallet).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Wallet)) }
    def second; end

    sig { returns(::Wallet) }
    def second!; end

    sig { returns(T.nilable(::Wallet)) }
    def second_to_last; end

    sig { returns(::Wallet) }
    def second_to_last!; end

    sig { returns(::Wallet) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Wallet).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Wallet)) }
    sig { params(limit: Integer).returns(T::Array[::Wallet]) }
    def take(limit = nil); end

    sig { returns(::Wallet) }
    def take!; end

    sig { returns(T.nilable(::Wallet)) }
    def third; end

    sig { returns(::Wallet) }
    def third!; end

    sig { returns(T.nilable(::Wallet)) }
    def third_to_last; end

    sig { returns(::Wallet) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def active!; end

    sig { returns(T::Boolean) }
    def active?; end

    sig { void }
    def terminated!; end

    sig { returns(T::Boolean) }
    def terminated?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def build_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def build_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization!(*args, &blk); end

    sig { returns(T.nilable(::Customer)) }
    def customer; end

    sig { params(value: T.nilable(::Customer)).void }
    def customer=(value); end

    sig { returns(T::Boolean) }
    def customer_changed?; end

    sig { returns(T::Boolean) }
    def customer_previously_changed?; end

    sig { returns(T.nilable(::Organization)) }
    def organization; end

    sig { params(value: T.nilable(::Organization)).void }
    def organization=(value); end

    sig { returns(T::Array[T.untyped]) }
    def recurring_transaction_rule_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def recurring_transaction_rule_ids=(ids); end

    # This method is created by ActiveRecord on the `Wallet` class because it declared `has_many :recurring_transaction_rules`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RecurringTransactionRule::PrivateCollectionProxy) }
    def recurring_transaction_rules; end

    sig { params(value: T::Enumerable[::RecurringTransactionRule]).void }
    def recurring_transaction_rules=(value); end

    sig { returns(T.nilable(::Customer)) }
    def reload_customer; end

    sig { returns(T.nilable(::Organization)) }
    def reload_organization; end

    sig { void }
    def reset_customer; end

    sig { void }
    def reset_organization; end

    sig { returns(T::Array[T.untyped]) }
    def version_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def version_ids=(ids); end

    # This method is created by ActiveRecord on the `Wallet` class because it declared `has_many :versions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PaperTrail::Version::PrivateCollectionProxy) }
    def versions; end

    sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
    def versions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def wallet_transaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def wallet_transaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Wallet` class because it declared `has_many :wallet_transactions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WalletTransaction::PrivateCollectionProxy) }
    def wallet_transactions; end

    sig { params(value: T::Enumerable[::WalletTransaction]).void }
    def wallet_transactions=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_terminated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ready_to_be_refreshed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Wallet).returns(BasicObject)).returns(T::Array[::Wallet]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def terminated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def balance_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def balance_cents=(value); end

    sig { returns(T::Boolean) }
    def balance_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def balance_cents_before_last_save; end

    sig { returns(T.untyped) }
    def balance_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def balance_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def balance_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def balance_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def balance_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def balance_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def balance_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def balance_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def balance_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def balance_cents_was; end

    sig { void }
    def balance_cents_will_change!; end

    sig { returns(::String) }
    def balance_currency; end

    sig { params(value: ::String).returns(::String) }
    def balance_currency=(value); end

    sig { returns(T::Boolean) }
    def balance_currency?; end

    sig { returns(T.nilable(::String)) }
    def balance_currency_before_last_save; end

    sig { returns(T.untyped) }
    def balance_currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def balance_currency_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def balance_currency_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def balance_currency_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def balance_currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def balance_currency_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def balance_currency_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def balance_currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def balance_currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def balance_currency_was; end

    sig { void }
    def balance_currency_will_change!; end

    sig { returns(::Integer) }
    def consumed_amount_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def consumed_amount_cents=(value); end

    sig { returns(T::Boolean) }
    def consumed_amount_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def consumed_amount_cents_before_last_save; end

    sig { returns(T.untyped) }
    def consumed_amount_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def consumed_amount_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def consumed_amount_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def consumed_amount_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def consumed_amount_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def consumed_amount_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def consumed_amount_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def consumed_amount_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def consumed_amount_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def consumed_amount_cents_was; end

    sig { void }
    def consumed_amount_cents_will_change!; end

    sig { returns(::String) }
    def consumed_amount_currency; end

    sig { params(value: ::String).returns(::String) }
    def consumed_amount_currency=(value); end

    sig { returns(T::Boolean) }
    def consumed_amount_currency?; end

    sig { returns(T.nilable(::String)) }
    def consumed_amount_currency_before_last_save; end

    sig { returns(T.untyped) }
    def consumed_amount_currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def consumed_amount_currency_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def consumed_amount_currency_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def consumed_amount_currency_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def consumed_amount_currency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def consumed_amount_currency_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def consumed_amount_currency_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def consumed_amount_currency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def consumed_amount_currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def consumed_amount_currency_was; end

    sig { void }
    def consumed_amount_currency_will_change!; end

    sig { returns(::BigDecimal) }
    def consumed_credits; end

    sig { params(value: ::BigDecimal).returns(::BigDecimal) }
    def consumed_credits=(value); end

    sig { returns(T::Boolean) }
    def consumed_credits?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def consumed_credits_before_last_save; end

    sig { returns(T.untyped) }
    def consumed_credits_before_type_cast; end

    sig { returns(T::Boolean) }
    def consumed_credits_came_from_user?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def consumed_credits_change; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def consumed_credits_change_to_be_saved; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def consumed_credits_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def consumed_credits_in_database; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def consumed_credits_previous_change; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def consumed_credits_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def consumed_credits_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def consumed_credits_was; end

    sig { void }
    def consumed_credits_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::BigDecimal) }
    def credits_balance; end

    sig { params(value: ::BigDecimal).returns(::BigDecimal) }
    def credits_balance=(value); end

    sig { returns(T::Boolean) }
    def credits_balance?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_balance_before_last_save; end

    sig { returns(T.untyped) }
    def credits_balance_before_type_cast; end

    sig { returns(T::Boolean) }
    def credits_balance_came_from_user?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def credits_balance_change; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def credits_balance_change_to_be_saved; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def credits_balance_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_balance_in_database; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def credits_balance_previous_change; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def credits_balance_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_balance_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_balance_was; end

    sig { void }
    def credits_balance_will_change!; end

    sig { returns(::BigDecimal) }
    def credits_ongoing_balance; end

    sig { params(value: ::BigDecimal).returns(::BigDecimal) }
    def credits_ongoing_balance=(value); end

    sig { returns(T::Boolean) }
    def credits_ongoing_balance?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_ongoing_balance_before_last_save; end

    sig { returns(T.untyped) }
    def credits_ongoing_balance_before_type_cast; end

    sig { returns(T::Boolean) }
    def credits_ongoing_balance_came_from_user?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def credits_ongoing_balance_change; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def credits_ongoing_balance_change_to_be_saved; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def credits_ongoing_balance_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_ongoing_balance_in_database; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def credits_ongoing_balance_previous_change; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def credits_ongoing_balance_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_ongoing_balance_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_ongoing_balance_was; end

    sig { void }
    def credits_ongoing_balance_will_change!; end

    sig { returns(::BigDecimal) }
    def credits_ongoing_usage_balance; end

    sig { params(value: ::BigDecimal).returns(::BigDecimal) }
    def credits_ongoing_usage_balance=(value); end

    sig { returns(T::Boolean) }
    def credits_ongoing_usage_balance?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_ongoing_usage_balance_before_last_save; end

    sig { returns(T.untyped) }
    def credits_ongoing_usage_balance_before_type_cast; end

    sig { returns(T::Boolean) }
    def credits_ongoing_usage_balance_came_from_user?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def credits_ongoing_usage_balance_change; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def credits_ongoing_usage_balance_change_to_be_saved; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def credits_ongoing_usage_balance_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_ongoing_usage_balance_in_database; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def credits_ongoing_usage_balance_previous_change; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def credits_ongoing_usage_balance_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_ongoing_usage_balance_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def credits_ongoing_usage_balance_was; end

    sig { void }
    def credits_ongoing_usage_balance_will_change!; end

    sig { returns(::String) }
    def customer_id; end

    sig { params(value: ::String).returns(::String) }
    def customer_id=(value); end

    sig { returns(T::Boolean) }
    def customer_id?; end

    sig { returns(T.nilable(::String)) }
    def customer_id_before_last_save; end

    sig { returns(T.untyped) }
    def customer_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def customer_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def customer_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def customer_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def customer_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def customer_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def customer_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def customer_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def customer_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def customer_id_was; end

    sig { void }
    def customer_id_will_change!; end

    sig { returns(T::Boolean) }
    def depleted_ongoing_balance; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def depleted_ongoing_balance=(value); end

    sig { returns(T::Boolean) }
    def depleted_ongoing_balance?; end

    sig { returns(T.nilable(T::Boolean)) }
    def depleted_ongoing_balance_before_last_save; end

    sig { returns(T.untyped) }
    def depleted_ongoing_balance_before_type_cast; end

    sig { returns(T::Boolean) }
    def depleted_ongoing_balance_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def depleted_ongoing_balance_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def depleted_ongoing_balance_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def depleted_ongoing_balance_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def depleted_ongoing_balance_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def depleted_ongoing_balance_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def depleted_ongoing_balance_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def depleted_ongoing_balance_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def depleted_ongoing_balance_was; end

    sig { void }
    def depleted_ongoing_balance_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expiration_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expiration_at=(value); end

    sig { returns(T::Boolean) }
    def expiration_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expiration_at_before_last_save; end

    sig { returns(T.untyped) }
    def expiration_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def expiration_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def expiration_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def expiration_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def expiration_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expiration_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def expiration_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def expiration_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expiration_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def expiration_at_was; end

    sig { void }
    def expiration_at_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def invoice_requires_successful_payment; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def invoice_requires_successful_payment=(value); end

    sig { returns(T::Boolean) }
    def invoice_requires_successful_payment?; end

    sig { returns(T.nilable(T::Boolean)) }
    def invoice_requires_successful_payment_before_last_save; end

    sig { returns(T.untyped) }
    def invoice_requires_successful_payment_before_type_cast; end

    sig { returns(T::Boolean) }
    def invoice_requires_successful_payment_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def invoice_requires_successful_payment_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def invoice_requires_successful_payment_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def invoice_requires_successful_payment_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def invoice_requires_successful_payment_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def invoice_requires_successful_payment_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def invoice_requires_successful_payment_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def invoice_requires_successful_payment_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def invoice_requires_successful_payment_was; end

    sig { void }
    def invoice_requires_successful_payment_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_balance_sync_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_balance_sync_at=(value); end

    sig { returns(T::Boolean) }
    def last_balance_sync_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_balance_sync_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_balance_sync_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_balance_sync_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_balance_sync_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_balance_sync_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_balance_sync_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_balance_sync_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_balance_sync_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_balance_sync_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_balance_sync_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_balance_sync_at_was; end

    sig { void }
    def last_balance_sync_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_consumed_credit_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_consumed_credit_at=(value); end

    sig { returns(T::Boolean) }
    def last_consumed_credit_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_consumed_credit_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_consumed_credit_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_consumed_credit_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_consumed_credit_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_consumed_credit_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_consumed_credit_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_consumed_credit_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_consumed_credit_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_consumed_credit_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_consumed_credit_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_consumed_credit_at_was; end

    sig { void }
    def last_consumed_credit_at_will_change!; end

    sig { returns(::Integer) }
    def lock_version; end

    sig { params(value: ::Integer).returns(::Integer) }
    def lock_version=(value); end

    sig { returns(T::Boolean) }
    def lock_version?; end

    sig { returns(T.nilable(::Integer)) }
    def lock_version_before_last_save; end

    sig { returns(T.untyped) }
    def lock_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def lock_version_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def lock_version_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def lock_version_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def lock_version_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def lock_version_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def lock_version_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def lock_version_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def lock_version_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def lock_version_was; end

    sig { void }
    def lock_version_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::Integer) }
    def ongoing_balance_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def ongoing_balance_cents=(value); end

    sig { returns(T::Boolean) }
    def ongoing_balance_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def ongoing_balance_cents_before_last_save; end

    sig { returns(T.untyped) }
    def ongoing_balance_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def ongoing_balance_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ongoing_balance_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ongoing_balance_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def ongoing_balance_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ongoing_balance_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ongoing_balance_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def ongoing_balance_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ongoing_balance_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def ongoing_balance_cents_was; end

    sig { void }
    def ongoing_balance_cents_will_change!; end

    sig { returns(::Integer) }
    def ongoing_usage_balance_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def ongoing_usage_balance_cents=(value); end

    sig { returns(T::Boolean) }
    def ongoing_usage_balance_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def ongoing_usage_balance_cents_before_last_save; end

    sig { returns(T.untyped) }
    def ongoing_usage_balance_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def ongoing_usage_balance_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ongoing_usage_balance_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ongoing_usage_balance_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def ongoing_usage_balance_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ongoing_usage_balance_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ongoing_usage_balance_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def ongoing_usage_balance_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ongoing_usage_balance_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def ongoing_usage_balance_cents_was; end

    sig { void }
    def ongoing_usage_balance_cents_will_change!; end

    sig { returns(::BigDecimal) }
    def rate_amount; end

    sig { params(value: ::BigDecimal).returns(::BigDecimal) }
    def rate_amount=(value); end

    sig { returns(T::Boolean) }
    def rate_amount?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def rate_amount_before_last_save; end

    sig { returns(T.untyped) }
    def rate_amount_before_type_cast; end

    sig { returns(T::Boolean) }
    def rate_amount_came_from_user?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def rate_amount_change; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def rate_amount_change_to_be_saved; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def rate_amount_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def rate_amount_in_database; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def rate_amount_previous_change; end

    sig { params(from: ::BigDecimal, to: ::BigDecimal).returns(T::Boolean) }
    def rate_amount_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def rate_amount_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def rate_amount_was; end

    sig { void }
    def rate_amount_will_change!; end

    sig { returns(T::Boolean) }
    def ready_to_be_refreshed; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def ready_to_be_refreshed=(value); end

    sig { returns(T::Boolean) }
    def ready_to_be_refreshed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_to_be_refreshed_before_last_save; end

    sig { returns(T.untyped) }
    def ready_to_be_refreshed_before_type_cast; end

    sig { returns(T::Boolean) }
    def ready_to_be_refreshed_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ready_to_be_refreshed_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ready_to_be_refreshed_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ready_to_be_refreshed_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_to_be_refreshed_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ready_to_be_refreshed_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ready_to_be_refreshed_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_to_be_refreshed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def ready_to_be_refreshed_was; end

    sig { void }
    def ready_to_be_refreshed_will_change!; end

    sig { void }
    def restore_balance_cents!; end

    sig { void }
    def restore_balance_currency!; end

    sig { void }
    def restore_consumed_amount_cents!; end

    sig { void }
    def restore_consumed_amount_currency!; end

    sig { void }
    def restore_consumed_credits!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_credits_balance!; end

    sig { void }
    def restore_credits_ongoing_balance!; end

    sig { void }
    def restore_credits_ongoing_usage_balance!; end

    sig { void }
    def restore_customer_id!; end

    sig { void }
    def restore_depleted_ongoing_balance!; end

    sig { void }
    def restore_expiration_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_invoice_requires_successful_payment!; end

    sig { void }
    def restore_last_balance_sync_at!; end

    sig { void }
    def restore_last_consumed_credit_at!; end

    sig { void }
    def restore_lock_version!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_ongoing_balance_cents!; end

    sig { void }
    def restore_ongoing_usage_balance_cents!; end

    sig { void }
    def restore_rate_amount!; end

    sig { void }
    def restore_ready_to_be_refreshed!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_terminated_at!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_balance_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_balance_cents?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_balance_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_balance_currency?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_consumed_amount_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_consumed_amount_cents?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_consumed_amount_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_consumed_amount_currency?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def saved_change_to_consumed_credits; end

    sig { returns(T::Boolean) }
    def saved_change_to_consumed_credits?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def saved_change_to_credits_balance; end

    sig { returns(T::Boolean) }
    def saved_change_to_credits_balance?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def saved_change_to_credits_ongoing_balance; end

    sig { returns(T::Boolean) }
    def saved_change_to_credits_ongoing_balance?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def saved_change_to_credits_ongoing_usage_balance; end

    sig { returns(T::Boolean) }
    def saved_change_to_credits_ongoing_usage_balance?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_customer_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_customer_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_depleted_ongoing_balance; end

    sig { returns(T::Boolean) }
    def saved_change_to_depleted_ongoing_balance?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_expiration_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_expiration_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_invoice_requires_successful_payment; end

    sig { returns(T::Boolean) }
    def saved_change_to_invoice_requires_successful_payment?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_balance_sync_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_balance_sync_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_consumed_credit_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_consumed_credit_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_lock_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_lock_version?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_ongoing_balance_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_ongoing_balance_cents?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_ongoing_usage_balance_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_ongoing_usage_balance_cents?; end

    sig { returns(T.nilable([::BigDecimal, ::BigDecimal])) }
    def saved_change_to_rate_amount; end

    sig { returns(T::Boolean) }
    def saved_change_to_rate_amount?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_ready_to_be_refreshed; end

    sig { returns(T::Boolean) }
    def saved_change_to_ready_to_be_refreshed?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_status?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_terminated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_terminated_at?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(::String) }
    def status; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def terminated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def terminated_at=(value); end

    sig { returns(T::Boolean) }
    def terminated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def terminated_at_before_last_save; end

    sig { returns(T.untyped) }
    def terminated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def terminated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def terminated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def terminated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def terminated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def terminated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def terminated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def terminated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def terminated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def terminated_at_was; end

    sig { void }
    def terminated_at_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_balance_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_balance_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_consumed_amount_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_consumed_amount_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_consumed_credits?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_credits_balance?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_credits_ongoing_balance?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_credits_ongoing_usage_balance?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_customer_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_depleted_ongoing_balance?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_expiration_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invoice_requires_successful_payment?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_balance_sync_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_consumed_credit_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_lock_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ongoing_balance_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ongoing_usage_balance_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_rate_amount?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ready_to_be_refreshed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_terminated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_terminated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ready_to_be_refreshed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Wallet).returns(BasicObject)).returns(T::Array[::Wallet]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def terminated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Wallet } }

    sig { returns(T::Array[::Wallet]) }
    def to_a; end

    sig { returns(T::Array[::Wallet]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Wallet } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Wallet } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Wallet } }

    sig do
      params(
        records: T.any(::Wallet, T::Enumerable[T.any(::Wallet, T::Enumerable[::Wallet])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Wallet, T::Enumerable[T.any(::Wallet, T::Enumerable[::Wallet])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Wallet, T::Enumerable[T.any(::Wallet, T::Enumerable[::Wallet])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Wallet]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Wallet, T::Enumerable[T.any(::Wallet, T::Enumerable[::Wallet])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Wallet, T::Enumerable[T.any(::Wallet, T::Enumerable[::Wallet])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Wallet, T::Enumerable[T.any(::Wallet, T::Enumerable[::Wallet])])
      ).returns(T::Array[::Wallet])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Wallet]) }
    def target; end

    sig { returns(T::Array[::Wallet]) }
    def to_a; end

    sig { returns(T::Array[::Wallet]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Wallet } }

    sig { returns(T::Array[::Wallet]) }
    def to_a; end

    sig { returns(T::Array[::Wallet]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Wallet } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(Integer) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Wallet } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
