# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `valvat` gem.
# Please instead update this file by running `bin/tapioca gem valvat`.


# source://valvat//lib/active_model/validations/valvat_validator.rb#7
module ActiveModel
  class << self
    # source://activemodel/8.0.1/lib/active_model/deprecator.rb#4
    def deprecator; end

    # source://activemodel/8.0.1/lib/active_model.rb#76
    def eager_load!; end

    # source://activemodel/8.0.1/lib/active_model/gem_version.rb#5
    def gem_version; end

    # source://activemodel/8.0.1/lib/active_model/version.rb#7
    def version; end
  end
end

# source://valvat//lib/active_model/validations/valvat_validator.rb#8
module ActiveModel::Validations
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  # source://activemodel/8.0.1/lib/active_model/validations.rb#328
  def errors; end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#372
  def freeze; end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#408
  def invalid?(context = T.unsafe(nil)); end

  def read_attribute_for_validation(*_arg0); end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#361
  def valid?(context = T.unsafe(nil)); end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#361
  def validate(context = T.unsafe(nil)); end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#417
  def validate!(context = T.unsafe(nil)); end

  # source://activemodel/8.0.1/lib/active_model/validations/with.rb#144
  def validates_with(*args, &block); end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#454
  def validation_context; end

  private

  # source://activemodel/8.0.1/lib/active_model/validations.rb#463
  def context_for_validation; end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#467
  def init_internals; end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#310
  def initialize_dup(other); end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#478
  def raise_validation_error; end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#473
  def run_validations!; end

  # source://activemodel/8.0.1/lib/active_model/validations.rb#459
  def validation_context=(context); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def _validators; end
    def _validators?; end
  end
end

# source://valvat//lib/active_model/validations/valvat_validator.rb#9
class ActiveModel::Validations::ValvatValidator < ::ActiveModel::EachValidator
  # @return [ValvatValidator] a new instance of ValvatValidator
  #
  # source://valvat//lib/active_model/validations/valvat_validator.rb#10
  def initialize(options); end

  # source://valvat//lib/active_model/validations/valvat_validator.rb#15
  def validate_each(record, attribute, value); end

  private

  # source://valvat//lib/active_model/validations/valvat_validator.rb#63
  def add_error(is_valid, record, attribute, iso_country_code); end

  # source://valvat//lib/active_model/validations/valvat_validator.rb#72
  def add_invalid_vat_error(record, attribute, iso_country_code); end

  # source://valvat//lib/active_model/validations/valvat_validator.rb#81
  def add_vies_down_error(record, attribute); end

  # @return [Boolean]
  #
  # source://valvat//lib/active_model/validations/valvat_validator.rb#53
  def country_does_not_match?(record, iso_country_code); end

  # source://valvat//lib/active_model/validations/valvat_validator.rb#59
  def iso_country_code_of(record); end

  # source://valvat//lib/active_model/validations/valvat_validator.rb#86
  def normalize_options(options); end

  # @return [Boolean]
  #
  # source://valvat//lib/active_model/validations/valvat_validator.rb#37
  def valid_checksum?(vat); end

  # @return [Boolean]
  #
  # source://valvat//lib/active_model/validations/valvat_validator.rb#43
  def vat_exists?(vat); end

  # @return [Boolean]
  #
  # source://valvat//lib/active_model/validations/valvat_validator.rb#33
  def vat_valid?(vat); end
end

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://valvat//lib/valvat.rb#67
  def Valvat(vat); end
end

# source://valvat//lib/valvat/error.rb#3
class Valvat
  # @return [Valvat] a new instance of Valvat
  #
  # source://valvat//lib/valvat.rb#14
  def initialize(raw); end

  # source://valvat//lib/valvat.rb#57
  def ==(other); end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat.rb#21
  def blank?; end

  # source://valvat//lib/valvat.rb#57
  def eql?(other); end

  # TODO: Remove method / not in use
  #
  # @return [Boolean]
  #
  # source://valvat//lib/valvat.rb#43
  def european?; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat.rb#33
  def exist?(options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat.rb#33
  def exists?(options = T.unsafe(nil)); end

  # source://valvat//lib/valvat.rb#62
  def inspect; end

  # source://valvat//lib/valvat.rb#38
  def iso_country_code; end

  # Returns the value of attribute raw.
  #
  # source://valvat//lib/valvat.rb#19
  def raw; end

  # source://valvat//lib/valvat.rb#49
  def to_a; end

  # source://valvat//lib/valvat.rb#53
  def to_s; end

  # Returns the value of attribute to_s_wo_country.
  #
  # source://valvat//lib/valvat.rb#19
  def to_s_wo_country; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat.rb#25
  def valid?; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat.rb#29
  def valid_checksum?; end

  # Returns the value of attribute vat_country_code.
  #
  # source://valvat//lib/valvat.rb#19
  def vat_country_code; end

  class << self
    # source://valvat//lib/valvat/options.rb#43
    def Options(options); end

    # Read-only access to config
    #
    # source://valvat//lib/valvat/configuration.rb#18
    def config; end

    # Configuration options should be set by passing a hash:
    #
    #   Valvat.configure(
    #     uk: { client_id: '<client_id>', client_secret: '<client_secret>' }
    #   )
    #
    # source://valvat//lib/valvat/configuration.rb#13
    def configure(options); end
  end
end

# source://valvat//lib/valvat/error.rb#35
class Valvat::AuthorizationError < ::Valvat::LookupError; end

# source://valvat//lib/valvat/error.rb#28
class Valvat::BlockedError < ::Valvat::LookupError; end

# source://valvat//lib/valvat/checksum.rb#4
module Valvat::Checksum
  class << self
    # source://valvat//lib/valvat/checksum.rb#65
    def validate(vat); end
  end
end

# source://valvat//lib/valvat/checksum.rb#71
Valvat::Checksum::ALGORITHMS = T.let(T.unsafe(nil), Hash)

# source://valvat//lib/valvat/checksum/at.rb#5
class Valvat::Checksum::AT < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/at.rb#6
  def check_digit; end

  # source://valvat//lib/valvat/checksum/at.rb#11
  def str_wo_country; end
end

# source://valvat//lib/valvat/checksum/be.rb#5
class Valvat::Checksum::BE < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/be.rb#8
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/bg.rb#5
class Valvat::Checksum::BG < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/bg.rb#48
  def build_prod(add = T.unsafe(nil)); end

  # source://valvat//lib/valvat/checksum/bg.rb#6
  def check_digit; end

  # source://valvat//lib/valvat/checksum/bg.rb#29
  def check_digit_foreign_natural_person; end

  # source://valvat//lib/valvat/checksum/bg.rb#37
  def check_digit_legal_person; end

  # source://valvat//lib/valvat/checksum/bg.rb#18
  def check_digit_local_natural_person; end

  # source://valvat//lib/valvat/checksum/bg.rb#10
  def check_digit_natural_person; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/bg.rb#56
  def natural_person?; end
end

# source://valvat//lib/valvat/checksum.rb#5
class Valvat::Checksum::Base
  # @return [Base] a new instance of Base
  #
  # source://valvat//lib/valvat/checksum.rb#13
  def initialize(vat); end

  # source://valvat//lib/valvat/checksum.rb#17
  def validate; end

  # Returns the value of attribute vat.
  #
  # source://valvat//lib/valvat/checksum.rb#6
  def vat; end

  private

  # source://valvat//lib/valvat/checksum.rb#35
  def figures; end

  # source://valvat//lib/valvat/checksum.rb#31
  def figures_str; end

  # source://valvat//lib/valvat/checksum.rb#27
  def given_check_digit; end

  # source://valvat//lib/valvat/checksum.rb#23
  def given_check_digit_str; end

  # source://valvat//lib/valvat/checksum.rb#39
  def str_wo_country; end

  # source://valvat//lib/valvat/checksum.rb#43
  def sum_figures_by(&block); end

  # source://valvat//lib/valvat/checksum.rb#58
  def sum_of_figues_for_pt_si; end

  # source://valvat//lib/valvat/checksum.rb#51
  def sum_of_figures_for_at_es_it_se(reverse_ints: T.unsafe(nil)); end

  # source://valvat//lib/valvat/checksum.rb#47
  def sum_of_squares(num); end

  class << self
    # source://valvat//lib/valvat/checksum.rb#8
    def check_digit_length(len = T.unsafe(nil)); end
  end
end

# source://valvat//lib/valvat/checksum/cy.rb#5
class Valvat::Checksum::CY < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/cy.rb#6
  def check_digit; end

  # source://valvat//lib/valvat/checksum/cy.rb#16
  def given_check_digit; end
end

# source://valvat//lib/valvat/checksum/de.rb#5
class Valvat::Checksum::DE < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/de.rb#9
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/de.rb#6
Valvat::Checksum::DE::M = T.let(T.unsafe(nil), Integer)

# source://valvat//lib/valvat/checksum/de.rb#7
Valvat::Checksum::DE::N = T.let(T.unsafe(nil), Integer)

# source://valvat//lib/valvat/checksum/dk.rb#5
class Valvat::Checksum::DK < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/dk.rb#8
  def check_digit; end

  # source://valvat//lib/valvat/checksum/dk.rb#15
  def given_check_digit; end
end

# source://valvat//lib/valvat/checksum/ee.rb#5
class Valvat::Checksum::EE < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/ee.rb#6
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/es.rb#5
class Valvat::Checksum::ES < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/es.rb#16
  def validate; end

  private

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/es.rb#73
  def cd_can_be_a_letter?; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/es.rb#77
  def cd_can_be_a_num?; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/es.rb#81
  def given_cd_is_a_letter?; end

  # source://valvat//lib/valvat/checksum/es.rb#32
  def given_check_digit; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/es.rb#69
  def legal_foreign_person?; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/es.rb#65
  def natural_person?; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/es.rb#22
  def passes_special_validations?; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/es.rb#61
  def person?; end

  # source://valvat//lib/valvat/checksum/es.rb#40
  def possible_cd_natural_person; end

  # source://valvat//lib/valvat/checksum/es.rb#46
  def possible_cds_legal_person; end

  # source://valvat//lib/valvat/checksum/es.rb#36
  def possible_check_digits; end

  # source://valvat//lib/valvat/checksum/es.rb#56
  def str_wo_country; end
end

# source://valvat//lib/valvat/checksum/es.rb#12
Valvat::Checksum::ES::CIF_MUST_BE_A_LETTER_EXP = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/checksum/es.rb#13
Valvat::Checksum::ES::CIF_MUST_BE_A_NUMBER_EXP = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/checksum/es.rb#10
Valvat::Checksum::ES::GIVEN_CD_IS_A_LETTER_EXP = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/checksum/es.rb#8
Valvat::Checksum::ES::LEGAL_PERSON_CHARS = T.let(T.unsafe(nil), Array)

# source://valvat//lib/valvat/checksum/es.rb#11
Valvat::Checksum::ES::LEGAL_PERSON_EXP = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/checksum/es.rb#6
Valvat::Checksum::ES::NATURAL_PERSON_CHARS = T.let(T.unsafe(nil), Array)

# source://valvat//lib/valvat/checksum/es.rb#7
Valvat::Checksum::ES::NATURAL_PERSON_EXP = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/checksum/es.rb#9
Valvat::Checksum::ES::NIE_DIGIT_BY_LETTER = T.let(T.unsafe(nil), Array)

# source://valvat//lib/valvat/checksum/es.rb#14
Valvat::Checksum::ES::SPECIAL_NIF_EXP = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/checksum/fi.rb#5
class Valvat::Checksum::FI < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/fi.rb#6
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/fr.rb#5
class Valvat::Checksum::FR < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/fr.rb#10
  def validate; end

  private

  # source://valvat//lib/valvat/checksum/fr.rb#29
  def alt_check_digit; end

  # source://valvat//lib/valvat/checksum/fr.rb#20
  def check_digit; end

  # source://valvat//lib/valvat/checksum/fr.rb#25
  def given_check_digit; end
end

# the valid characters for the first two digits (O and I are missing)
#
# source://valvat//lib/valvat/checksum/fr.rb#7
Valvat::Checksum::FR::ALPHABET = T.let(T.unsafe(nil), String)

# source://valvat//lib/valvat/checksum/fr.rb#8
Valvat::Checksum::FR::NUMERIC = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/checksum/gb.rb#5
class Valvat::Checksum::GB < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/gb.rb#11
  def validate; end

  private

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/gb.rb#36
  def all_zero?; end

  # source://valvat//lib/valvat/checksum/gb.rb#24
  def checksum; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/gb.rb#56
  def fobidden_in_new_format?; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/gb.rb#61
  def fobidden_in_old_format?; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/checksum/gb.rb#32
  def gov_or_health?; end

  # source://valvat//lib/valvat/checksum/gb.rb#52
  def new_format_remainder; end

  # source://valvat//lib/valvat/checksum/gb.rb#48
  def old_format_remainder; end

  # source://valvat//lib/valvat/checksum/gb.rb#28
  def vat_base; end

  # source://valvat//lib/valvat/checksum/gb.rb#40
  def vat_base_sum; end
end

# source://valvat//lib/valvat/checksum/gb.rb#8
Valvat::Checksum::GB::GOV_NUMBER = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/checksum/gb.rb#9
Valvat::Checksum::GB::HEALTH_NUMBER = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/checksum/gb.rb#7
Valvat::Checksum::GB::NEW_FORMAT_FORBIDDEN_RANGES = T.let(T.unsafe(nil), Array)

# source://valvat//lib/valvat/checksum/gb.rb#6
Valvat::Checksum::GB::OLD_FORMAT_FORBIDDEN_RANGES = T.let(T.unsafe(nil), Array)

# source://valvat//lib/valvat/checksum/gr.rb#5
class Valvat::Checksum::GR < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/gr.rb#6
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/hr.rb#5
class Valvat::Checksum::HR < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/hr.rb#6
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/hu.rb#5
class Valvat::Checksum::HU < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/hu.rb#6
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/ie.rb#5
class Valvat::Checksum::IE < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/ie.rb#6
  def check_digit; end

  # source://valvat//lib/valvat/checksum/ie.rb#34
  def figures_str; end

  # source://valvat//lib/valvat/checksum/ie.rb#16
  def given_check_digit; end

  # source://valvat//lib/valvat/checksum/ie.rb#24
  def str_wo_country; end
end

# source://valvat//lib/valvat/checksum/ie.rb#14
Valvat::Checksum::IE::CHARS = T.let(T.unsafe(nil), Array)

# source://valvat//lib/valvat/checksum/it.rb#5
class Valvat::Checksum::IT < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/it.rb#13
  def check_digit; end

  # source://valvat//lib/valvat/checksum/it.rb#6
  def validate; end
end

# source://valvat//lib/valvat/checksum/lt.rb#5
class Valvat::Checksum::LT < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/lt.rb#6
  def check_digit; end

  private

  # source://valvat//lib/valvat/checksum/lt.rb#15
  def sum_with(offset); end
end

# source://valvat//lib/valvat/checksum/lu.rb#5
class Valvat::Checksum::LU < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/lu.rb#8
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/mt.rb#5
class Valvat::Checksum::MT < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/mt.rb#8
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/nl.rb#5
class Valvat::Checksum::NL < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/nl.rb#11
  def check_digit; end

  # source://valvat//lib/valvat/checksum/nl.rb#17
  def str_wo_country; end

  # source://valvat//lib/valvat/checksum/nl.rb#6
  def validate; end
end

# source://valvat//lib/valvat/checksum/pl.rb#5
class Valvat::Checksum::PL < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/pl.rb#6
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/pt.rb#5
class Valvat::Checksum::PT < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/pt.rb#6
  def check_digit; end
end

# source://valvat//lib/valvat/checksum/ro.rb#5
class Valvat::Checksum::RO < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/ro.rb#6
  def check_digit; end

  # source://valvat//lib/valvat/checksum/ro.rb#13
  def figures_str; end
end

# source://valvat//lib/valvat/checksum/se.rb#5
class Valvat::Checksum::SE < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/se.rb#8
  def validate; end

  private

  # source://valvat//lib/valvat/checksum/se.rb#15
  def check_digit; end

  # source://valvat//lib/valvat/checksum/se.rb#19
  def given_check_digit; end

  # source://valvat//lib/valvat/checksum/se.rb#23
  def str_wo_country; end
end

# source://valvat//lib/valvat/checksum/si.rb#5
class Valvat::Checksum::SI < ::Valvat::Checksum::Base
  # source://valvat//lib/valvat/checksum/si.rb#11
  def check_digit; end

  # source://valvat//lib/valvat/checksum/si.rb#6
  def validate; end
end

# source://valvat//lib/valvat/configuration.rb#22
class Valvat::Configuration
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Configuration] a new instance of Configuration
  #
  # source://valvat//lib/valvat/configuration.rb#72
  def initialize; end

  # source://valvat//lib/valvat/configuration.rb#60
  def [](key); end

  # source://valvat//lib/valvat/configuration.rb#68
  def configure(options); end

  # source://valvat//lib/valvat/configuration.rb#64
  def dig(*keys); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://valvat//lib/valvat/configuration.rb#25
Valvat::Configuration::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://valvat//lib/valvat/error.rb#4
class Valvat::Error < ::RuntimeError; end

# source://valvat//lib/valvat/hmrc/access_token.rb#7
module Valvat::HMRC; end

# source://valvat//lib/valvat/hmrc/access_token.rb#8
class Valvat::HMRC::AccessToken
  # @return [AccessToken] a new instance of AccessToken
  #
  # source://valvat//lib/valvat/hmrc/access_token.rb#16
  def initialize(options = T.unsafe(nil)); end

  # source://valvat//lib/valvat/hmrc/access_token.rb#29
  def fetch(uri = T.unsafe(nil), request_count = T.unsafe(nil)); end

  private

  # source://valvat//lib/valvat/hmrc/access_token.rb#55
  def build_body; end

  # source://valvat//lib/valvat/hmrc/access_token.rb#64
  def build_https; end

  # source://valvat//lib/valvat/hmrc/access_token.rb#48
  def build_request(uri); end

  # See https://developer.service.hmrc.gov.uk/api-documentation/docs/authorisation/application-restricted-endpoints
  #
  # source://valvat//lib/valvat/hmrc/access_token.rb#79
  def handle_response!(response, request_count); end

  # source://valvat//lib/valvat/hmrc/access_token.rb#90
  def handle_response_error(response, request_count); end

  # source://valvat//lib/valvat/hmrc/access_token.rb#70
  def parse_response!(response); end

  # source://valvat//lib/valvat/hmrc/access_token.rb#74
  def parse_response_location(response); end

  # @raise [Error]
  #
  # source://valvat//lib/valvat/hmrc/access_token.rb#43
  def raise_if_invalid!; end

  class << self
    # source://valvat//lib/valvat/hmrc/access_token.rb#25
    def fetch(options = T.unsafe(nil)); end
  end
end

# source://valvat//lib/valvat/hmrc/access_token.rb#9
class Valvat::HMRC::AccessToken::Error < ::StandardError; end

# source://valvat//lib/valvat/hmrc/access_token.rb#14
Valvat::HMRC::AccessToken::GRANT_TYPE = T.let(T.unsafe(nil), String)

# source://valvat//lib/valvat/hmrc/access_token.rb#11
Valvat::HMRC::AccessToken::PRODUCTION_ENDPOINT_URL = T.let(T.unsafe(nil), String)

# source://valvat//lib/valvat/hmrc/access_token.rb#12
Valvat::HMRC::AccessToken::SANDBOX_ENDPOINT_URL = T.let(T.unsafe(nil), String)

# source://valvat//lib/valvat/hmrc/access_token.rb#13
Valvat::HMRC::AccessToken::SCOPE = T.let(T.unsafe(nil), String)

# source://valvat//lib/valvat/error.rb#33
class Valvat::HTTPError < ::Valvat::LookupError; end

# source://valvat//lib/valvat/error.rb#27
class Valvat::InvalidRequester < ::Valvat::LookupError; end

# source://valvat//lib/valvat/lookup/base.rb#7
class Valvat::Lookup
  # @return [Lookup] a new instance of Lookup
  #
  # source://valvat//lib/valvat/lookup.rb#9
  def initialize(vat, options = T.unsafe(nil)); end

  # source://valvat//lib/valvat/lookup.rb#14
  def validate; end

  private

  # source://valvat//lib/valvat/lookup.rb#43
  def handle_error(error); end

  # source://valvat//lib/valvat/lookup.rb#29
  def response; end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/lookup.rb#39
  def show_details?; end

  # source://valvat//lib/valvat/lookup.rb#33
  def webservice; end

  class << self
    # source://valvat//lib/valvat/lookup.rb#22
    def validate(vat, options = T.unsafe(nil)); end
  end
end

# source://valvat//lib/valvat/lookup/base.rb#8
class Valvat::Lookup::Base
  # @return [Base] a new instance of Base
  #
  # source://valvat//lib/valvat/lookup/base.rb#9
  def initialize(vat, options = T.unsafe(nil)); end

  # source://valvat//lib/valvat/lookup/base.rb#16
  def perform; end

  private

  # @raise [NotImplementedError]
  #
  # source://valvat//lib/valvat/lookup/base.rb#33
  def build_request(uri); end

  # @raise [NotImplementedError]
  #
  # source://valvat//lib/valvat/lookup/base.rb#29
  def endpoint_uri; end

  # source://valvat//lib/valvat/lookup/base.rb#41
  def fetch(uri, limit = T.unsafe(nil)); end

  # source://valvat//lib/valvat/lookup/base.rb#63
  def options_for(uri); end

  # @raise [NotImplementedError]
  #
  # source://valvat//lib/valvat/lookup/base.rb#37
  def parse(body); end

  # source://valvat//lib/valvat/lookup/base.rb#55
  def send_request(uri); end
end

# source://valvat//lib/valvat/lookup/hmrc.rb#11
class Valvat::Lookup::HMRC < ::Valvat::Lookup::Base
  # source://valvat//lib/valvat/lookup/hmrc.rb#19
  def perform; end

  private

  # source://valvat//lib/valvat/lookup/hmrc.rb#84
  def build_fault(raw); end

  # source://valvat//lib/valvat/lookup/hmrc.rb#92
  def build_headers!; end

  # source://valvat//lib/valvat/lookup/hmrc.rb#36
  def build_request(uri); end

  # Return a similar format to VIES
  # Main differences are:
  # - request_date is a (more precise) Time instead of Date
  # - address is newline separated instead of coma (also more precise)
  #
  # source://valvat//lib/valvat/lookup/hmrc.rb#48
  def convert(raw); end

  # source://valvat//lib/valvat/lookup/hmrc.rb#29
  def endpoint_uri; end

  # source://valvat//lib/valvat/lookup/hmrc.rb#96
  def fetch_access_token!; end

  # Example raw address from the API:
  # {
  #   "line1": "HM REVENUE AND CUSTOMS",
  #   "line2": "RUBY HOUSE",
  #   "line3": "8 RUBY PLACE",
  #   "line4": "ABERDEEN",
  #   "postcode": "AB10 1ZP",
  #   "countryCode": "GB"
  # }
  #
  # source://valvat//lib/valvat/lookup/hmrc.rb#71
  def format_address(address); end

  # source://valvat//lib/valvat/lookup/hmrc.rb#40
  def parse(body); end
end

# source://valvat//lib/valvat/lookup/hmrc.rb#75
Valvat::Lookup::HMRC::FAULTS = T.let(T.unsafe(nil), Hash)

# source://valvat//lib/valvat/lookup/hmrc.rb#14
Valvat::Lookup::HMRC::HEADERS = T.let(T.unsafe(nil), Hash)

# source://valvat//lib/valvat/lookup/hmrc.rb#12
Valvat::Lookup::HMRC::PRODUCTION_ENDPOINT_URL = T.let(T.unsafe(nil), String)

# source://valvat//lib/valvat/lookup/hmrc.rb#13
Valvat::Lookup::HMRC::SANDBOX_ENDPOINT_URL = T.let(T.unsafe(nil), String)

# source://valvat//lib/valvat/lookup/vies.rb#11
class Valvat::Lookup::VIES < ::Valvat::Lookup::Base
  private

  # source://valvat//lib/valvat/lookup/vies.rb#91
  def build_fault(hash); end

  # source://valvat//lib/valvat/lookup/vies.rb#44
  def build_request(uri); end

  # source://valvat//lib/valvat/lookup/vies.rb#58
  def convert_key(key); end

  # source://valvat//lib/valvat/lookup/vies.rb#66
  def convert_value(value); end

  # source://valvat//lib/valvat/lookup/vies.rb#70
  def convert_values(hash); end

  # source://valvat//lib/valvat/lookup/vies.rb#40
  def endpoint_uri; end

  # source://valvat//lib/valvat/lookup/vies.rb#50
  def parse(body); end
end

# source://valvat//lib/valvat/lookup/vies.rb#19
Valvat::Lookup::VIES::BODY = T.let(T.unsafe(nil), String)

# source://valvat//lib/valvat/lookup/vies.rb#36
Valvat::Lookup::VIES::BODY_TEMPLATE = T.let(T.unsafe(nil), ERB)

# source://valvat//lib/valvat/lookup/vies.rb#12
Valvat::Lookup::VIES::ENDPOINT_URI = T.let(T.unsafe(nil), URI::HTTPS)

# source://valvat//lib/valvat/lookup/vies.rb#78
Valvat::Lookup::VIES::FAULTS = T.let(T.unsafe(nil), Hash)

# source://valvat//lib/valvat/lookup/vies.rb#13
Valvat::Lookup::VIES::HEADERS = T.let(T.unsafe(nil), Hash)

# source://valvat//lib/valvat/error.rb#6
class Valvat::LookupError < ::Valvat::Error
  # @return [LookupError] a new instance of LookupError
  #
  # source://valvat//lib/valvat/error.rb#7
  def initialize(message, kind); end

  # @return [Boolean]
  #
  # source://valvat//lib/valvat/error.rb#17
  def eql?(other); end

  # source://valvat//lib/valvat/error.rb#13
  def to_s; end
end

# source://valvat//lib/valvat/error.rb#21
class Valvat::MaintenanceError < ::Valvat::LookupError; end

# source://valvat//lib/valvat/error.rb#24
class Valvat::MemberStateUnavailable < ::Valvat::MaintenanceError; end

# source://valvat//lib/valvat/options.rb#6
class Valvat::Options
  # @return [Options] a new instance of Options
  #
  # source://valvat//lib/valvat/options.rb#12
  def initialize(options, silence: T.unsafe(nil)); end

  # source://valvat//lib/valvat/options.rb#25
  def [](key); end

  # source://valvat//lib/valvat/options.rb#29
  def dig(*keys); end

  private

  # source://valvat//lib/valvat/options.rb#35
  def check_uk_key(silence); end
end

# source://valvat//lib/valvat/options.rb#7
Valvat::Options::DEPRECATED_KEYS = T.let(T.unsafe(nil), Hash)

# source://valvat//lib/valvat/error.rb#29
class Valvat::RateLimitError < ::Valvat::LookupError; end

# source://valvat//lib/valvat/error.rb#23
class Valvat::ServiceUnavailable < ::Valvat::MaintenanceError; end

# source://valvat//lib/valvat/syntax.rb#4
module Valvat::Syntax
  class << self
    # source://valvat//lib/valvat/syntax.rb#36
    def validate(vat); end
  end
end

# source://valvat//lib/valvat/syntax.rb#5
Valvat::Syntax::VAT_PATTERNS = T.let(T.unsafe(nil), Hash)

# source://valvat//lib/valvat/error.rb#26
class Valvat::Timeout < ::Valvat::LookupError; end

# source://valvat//lib/valvat/error.rb#31
class Valvat::UnknownLookupError < ::Valvat::LookupError; end

# source://valvat//lib/valvat/utils.rb#6
module Valvat::Utils
  class << self
    # @return [Boolean]
    #
    # source://valvat//lib/valvat/utils.rb#33
    def country_is_supported?(iso_country); end

    # source://valvat//lib/valvat/utils.rb#49
    def deep_merge(original_hash, hash_to_merge); end

    # source://valvat//lib/valvat/utils.rb#37
    def deep_symbolize_keys(value); end

    # source://valvat//lib/valvat/utils.rb#29
    def iso_country_to_vat_country(iso_country); end

    # source://valvat//lib/valvat/utils.rb#21
    def normalize(vat); end

    # source://valvat//lib/valvat/utils.rb#14
    def split(vat); end

    # source://valvat//lib/valvat/utils.rb#25
    def vat_country_to_iso_country(vat_country); end
  end
end

# source://valvat//lib/valvat/utils.rb#12
Valvat::Utils::CONVERT_ISO_TO_VAT_COUNTRY = T.let(T.unsafe(nil), Hash)

# source://valvat//lib/valvat/utils.rb#11
Valvat::Utils::CONVERT_VAT_TO_ISO_COUNTRY = T.let(T.unsafe(nil), Hash)

# source://valvat//lib/valvat/utils.rb#9
Valvat::Utils::COUNTRY_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/utils.rb#7
Valvat::Utils::EU_MEMBER_STATES = T.let(T.unsafe(nil), Array)

# source://valvat//lib/valvat/utils.rb#10
Valvat::Utils::NORMALIZE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://valvat//lib/valvat/utils.rb#8
Valvat::Utils::SUPPORTED_STATES = T.let(T.unsafe(nil), Array)

# source://valvat//lib/valvat/version.rb#4
Valvat::VERSION = T.let(T.unsafe(nil), String)
