# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-instrumentation-action_pack` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-instrumentation-action_pack`.


# OpenTelemetry is an open source observability framework, providing a
# general-purpose API, SDK, and related tools required for the instrumentation
# of cloud-native software, frameworks, and libraries.
#
# The OpenTelemetry module provides global accessors for telemetry objects.
# See the documentation for the `opentelemetry-api` gem for details.
#
# source://opentelemetry-instrumentation-action_pack//lib/opentelemetry/instrumentation.rb#13
module OpenTelemetry
  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#36
  def error_handler; end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#27
  def error_handler=(_arg0); end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#44
  def handle_error(exception: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#30
  def logger; end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#27
  def logger=(_arg0); end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#69
  def propagation; end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#27
  def propagation=(_arg0); end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#64
  def tracer_provider; end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#52
  def tracer_provider=(provider); end
end

# Instrumentation should be able to handle the case when the library is not installed on a user's system.
#
# source://opentelemetry-instrumentation-action_pack//lib/opentelemetry/instrumentation.rb#15
module OpenTelemetry::Instrumentation
  # source://opentelemetry-registry/0.3.1/lib/opentelemetry/instrumentation.rb#21
  def registry; end
end

# Contains the OpenTelemetry instrumentation for the ActionPack gem
#
# source://opentelemetry-instrumentation-action_pack//lib/opentelemetry/instrumentation/action_pack.rb#13
module OpenTelemetry::Instrumentation::ActionPack; end

# The {OpenTelemetry::Instrumentation::ActionPack::Instrumentation} class contains logic to detect and install the ActionPack instrumentation
#
# Installation and configuration of this instrumentation is done within the
# {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry/SDK#configure-instance_method OpenTelemetry::SDK#configure}
# block, calling {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry%2FSDK%2FConfigurator:use use()}
# or {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry%2FSDK%2FConfigurator:use_all use_all()}.
#
# ## Configuration keys and options
#
# ### `:span_naming`
#
# Specifies how the span names are set. Can be one of:
#
# - `:semconv` **(default)** - The span name will use HTTP semantic conventions '{method http.route}', for example `GET /users/:id`
# - `:class` - The span name will appear as '<ActionController class name>#<action>',
#   for example `UsersController#show`.
#
# @example An explicit default configuration
#   OpenTelemetry::SDK.configure do |c|
#   c.use_all({
#   'OpenTelemetry::Instrumentation::ActionPack' => {
#   span_naming: :class
#   },
#   })
#   end
#
# source://opentelemetry-instrumentation-action_pack//lib/opentelemetry/instrumentation/action_pack/instrumentation.rb#35
class OpenTelemetry::Instrumentation::ActionPack::Instrumentation < ::OpenTelemetry::Instrumentation::Base
  private

  # source://opentelemetry-instrumentation-action_pack//lib/opentelemetry/instrumentation/action_pack/instrumentation.rb#56
  def gem_version; end

  # source://opentelemetry-instrumentation-action_pack//lib/opentelemetry/instrumentation/action_pack/instrumentation.rb#60
  def patch; end

  # source://opentelemetry-instrumentation-action_pack//lib/opentelemetry/instrumentation/action_pack/instrumentation.rb#64
  def require_dependencies; end

  # source://opentelemetry-instrumentation-action_pack//lib/opentelemetry/instrumentation/action_pack/instrumentation.rb#68
  def require_railtie; end
end

# source://opentelemetry-instrumentation-action_pack//lib/opentelemetry/instrumentation/action_pack/instrumentation.rb#36
OpenTelemetry::Instrumentation::ActionPack::Instrumentation::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://opentelemetry-instrumentation-action_pack//lib/opentelemetry/instrumentation/action_pack/version.rb#10
OpenTelemetry::Instrumentation::ActionPack::VERSION = T.let(T.unsafe(nil), String)
