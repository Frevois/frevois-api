# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `clickhouse-activerecord` gem.
# Please instead update this file by running `bin/tapioca gem clickhouse-activerecord`.


# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/array.rb#3
module ActiveRecord
  class << self
    # source://activerecord/7.1.5.1/lib/active_record.rb#342
    def action_on_strict_loading_violation; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#342
    def action_on_strict_loading_violation=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#422
    def allow_deprecated_singular_associations_name; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#422
    def allow_deprecated_singular_associations_name=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#335
    def application_record_class; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#335
    def application_record_class=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#263
    def async_query_executor; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#263
    def async_query_executor=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#317
    def before_committed_on_all_records; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#317
    def before_committed_on_all_records=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#314
    def belongs_to_required_validates_foreign_key; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#314
    def belongs_to_required_validates_foreign_key=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#323
    def commit_transaction_on_non_local_return; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#323
    def commit_transaction_on_non_local_return=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#209
    def db_warnings_action; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#211
    def db_warnings_action=(action); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#236
    def db_warnings_ignore; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#236
    def db_warnings_ignore=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#192
    def default_timezone; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#196
    def default_timezone=(default_timezone); end

    # source://activerecord/7.1.5.1/lib/active_record/deprecator.rb#4
    def deprecator; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#177
    def disable_prepared_statements; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#177
    def disable_prepared_statements=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#476
    def disconnect_all!; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#382
    def dump_schema_after_migration; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#382
    def dump_schema_after_migration=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#392
    def dump_schemas; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#392
    def dump_schemas=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#465
    def eager_load!; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#361
    def error_on_ignored_order; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#361
    def error_on_ignored_order=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#454
    def generate_secure_token_on; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#454
    def generate_secure_token_on=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#286
    def global_executor_concurrency; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#278
    def global_executor_concurrency=(global_executor_concurrency); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#266
    def global_thread_pool_async_query_executor; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#290
    def index_nested_attribute_errors; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#290
    def index_nested_attribute_errors=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#183
    def lazily_load_schema_cache; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#183
    def lazily_load_schema_cache=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#245
    def legacy_connection_handling=(_); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#308
    def maintain_test_schema; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#308
    def maintain_test_schema=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#457
    def marshalling_format_version; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#461
    def marshalling_format_version=(value); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#373
    def migration_strategy; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#373
    def migration_strategy=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#425
    def query_transformers; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#425
    def query_transformers=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#305
    def queues; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#305
    def queues=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#440
    def raise_int_wider_than_64bit; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#440
    def raise_int_wider_than_64bit=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#311
    def raise_on_assign_to_attr_readonly; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#311
    def raise_on_assign_to_attr_readonly=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#242
    def reading_role; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#242
    def reading_role=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#320
    def run_after_transaction_callbacks_in_order_defined; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#320
    def run_after_transaction_callbacks_in_order_defined=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#189
    def schema_cache_ignored_tables; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#189
    def schema_cache_ignored_tables=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#353
    def schema_format; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#353
    def schema_format=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#395
    def suppress_multiple_database_warning; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#402
    def suppress_multiple_database_warning=(value); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#367
    def timestamped_migrations; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#367
    def timestamped_migrations=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#432
    def use_yaml_unsafe_load; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#432
    def use_yaml_unsafe_load=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#298
    def verbose_query_logs; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#298
    def verbose_query_logs=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#415
    def verify_foreign_keys_for_fixtures; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#415
    def verify_foreign_keys_for_fixtures=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record/version.rb#7
    def version; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#332
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#332
    def warn_on_records_fetched_greater_than=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#239
    def writing_role; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#239
    def writing_role=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record.rb#447
    def yaml_column_permitted_classes; end

    # source://activerecord/7.1.5.1/lib/active_record.rb#447
    def yaml_column_permitted_classes=(_arg0); end
  end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#24
class ActiveRecord::Base
  include ::ActiveModel::Access
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _before_commit_callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _commit_callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _create_callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _destroy_callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _find_callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _initialize_callbacks; end

  # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#9
  def _ransack_aliases; end

  # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#9
  def _ransack_aliases=(_arg0); end

  # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#9
  def _ransack_aliases?; end

  # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#8
  def _ransackers; end

  # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#8
  def _ransackers=(_arg0); end

  # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#8
  def _ransackers?; end

  # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _rollback_callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_commit_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_create_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_destroy_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_find_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_initialize_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_rollback_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_save_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_touch_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_update_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#951
  def _run_validation_callbacks(&block); end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _save_callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _touch_callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _update_callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _validate_callbacks; end

  # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#963
  def _validation_callbacks; end

  # source://activemodel/7.1.5.1/lib/active_model/validations.rb#71
  def _validators; end

  # source://activemodel/7.1.5.1/lib/active_model/validations.rb#71
  def _validators?; end

  # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activestorage/7.1.5.1/lib/active_storage/reflection.rb#53
  def attachment_reflections; end

  # source://activestorage/7.1.5.1/lib/active_storage/reflection.rb#53
  def attachment_reflections?; end

  # source://activemodel/7.1.5.1/lib/active_model/attribute_methods.rb#72
  def attribute_aliases; end

  # source://activemodel/7.1.5.1/lib/active_model/attribute_methods.rb#72
  def attribute_aliases?; end

  # source://activemodel/7.1.5.1/lib/active_model/attribute_methods.rb#73
  def attribute_method_patterns; end

  # source://activemodel/7.1.5.1/lib/active_model/attribute_methods.rb#73
  def attribute_method_patterns?; end

  # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#13
  def automatic_scope_inversing; end

  # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#13
  def automatic_scope_inversing?; end

  # source://activerecord/7.1.5.1/lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord/7.1.5.1/lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord/7.1.5.1/lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord/7.1.5.1/lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord/7.1.5.1/lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord/7.1.5.1/lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#178
  def column_for_attribute(name, &block); end

  # source://activerecord/7.1.5.1/lib/active_record/core.rb#97
  def default_connection_handler; end

  # source://activerecord/7.1.5.1/lib/active_record/core.rb#97
  def default_connection_handler?; end

  # source://activerecord/7.1.5.1/lib/active_record/core.rb#99
  def default_role; end

  # source://activerecord/7.1.5.1/lib/active_record/core.rb#99
  def default_role?; end

  # source://activerecord/7.1.5.1/lib/active_record/scoping/default.rb#20
  def default_scope_override; end

  # source://activerecord/7.1.5.1/lib/active_record/scoping/default.rb#19
  def default_scopes; end

  # source://activerecord/7.1.5.1/lib/active_record/core.rb#101
  def default_shard; end

  # source://activerecord/7.1.5.1/lib/active_record/core.rb#101
  def default_shard?; end

  # source://activerecord/7.1.5.1/lib/active_record/enum.rb#167
  def defined_enums; end

  # source://activerecord/7.1.5.1/lib/active_record/enum.rb#167
  def defined_enums?; end

  # source://activerecord/7.1.5.1/lib/active_record/core.rb#47
  def destroy_association_async_batch_size; end

  # source://activerecord/7.1.5.1/lib/active_record/core.rb#37
  def destroy_association_async_job(&block); end

  # source://activerecord/7.1.5.1/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes; end

  # source://activerecord/7.1.5.1/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes=(_arg0); end

  # source://activerecord/7.1.5.1/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes?; end

  # source://activemodel/7.1.5.1/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.1.5.1/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord/7.1.5.1/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord/7.1.5.1/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord/7.1.5.1/lib/active_record/core.rb#22
  def logger; end

  # source://activerecord/7.1.5.1/lib/active_record/core.rb#22
  def logger?; end

  # source://activemodel/7.1.5.1/lib/active_model/naming.rb#255
  def model_name(&block); end

  # source://activerecord/7.1.5.1/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord/7.1.5.1/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://activerecord/7.1.5.1/lib/active_record/normalization.rb#8
  def normalized_attributes; end

  # source://activerecord/7.1.5.1/lib/active_record/normalization.rb#8
  def normalized_attributes=(_arg0); end

  # source://activerecord/7.1.5.1/lib/active_record/normalization.rb#8
  def normalized_attributes?; end

  # source://activemodel/7.1.5.1/lib/active_model/conversion.rb#32
  def param_delimiter=(_arg0); end

  # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/dirty.rb#50
  def partial_inserts; end

  # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/dirty.rb#50
  def partial_inserts?; end

  # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/dirty.rb#49
  def partial_updates; end

  # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/dirty.rb#49
  def partial_updates?; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#163
  def pluralize_table_names; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#163
  def pluralize_table_names?; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#158
  def primary_key_prefix_type; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#158
  def primary_key_prefix_type?; end

  # source://activerecord/7.1.5.1/lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord/7.1.5.1/lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord/7.1.5.1/lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord/7.1.5.1/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord/7.1.5.1/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret?; end

  # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord/7.1.5.1/lib/active_record/inheritance.rb#43
  def store_full_class_name; end

  # source://activerecord/7.1.5.1/lib/active_record/inheritance.rb#43
  def store_full_class_name?; end

  # source://activerecord/7.1.5.1/lib/active_record/inheritance.rb#47
  def store_full_sti_class; end

  # source://activerecord/7.1.5.1/lib/active_record/inheritance.rb#47
  def store_full_sti_class?; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#159
  def table_name_prefix; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#159
  def table_name_prefix?; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#160
  def table_name_suffix; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#160
  def table_name_suffix?; end

  # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes; end

  # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes?; end

  # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types; end

  # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types?; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#178
  def type_for_attribute(attr_name, &block); end

  # source://activemodel/7.1.5.1/lib/active_model/validations.rb#67
  def validation_context; end

  private

  # source://activemodel/7.1.5.1/lib/active_model/validations.rb#67
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activerecord/7.1.5.1/lib/active_record/readonly_attributes.rb#11
    def _attr_readonly; end

    # source://activerecord/7.1.5.1/lib/active_record/readonly_attributes.rb#11
    def _attr_readonly=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/readonly_attributes.rb#11
    def _attr_readonly?; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _before_commit_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _before_commit_callbacks=(value); end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _commit_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _commit_callbacks=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/counter_cache.rb#9
    def _counter_cache_columns; end

    # source://activerecord/7.1.5.1/lib/active_record/counter_cache.rb#9
    def _counter_cache_columns=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/counter_cache.rb#9
    def _counter_cache_columns?; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _create_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _create_callbacks=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#24
    def _destroy_association_async_job; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#24
    def _destroy_association_async_job=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#24
    def _destroy_association_async_job?; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _destroy_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _destroy_callbacks=(value); end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _find_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _find_callbacks=(value); end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _initialize_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _initialize_callbacks=(value); end

    # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#9
    def _ransack_aliases; end

    # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#9
    def _ransack_aliases=(value); end

    # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#9
    def _ransack_aliases?; end

    # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#8
    def _ransackers; end

    # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#8
    def _ransackers=(value); end

    # source://ransack/4.1.1/lib/ransack/adapters/active_record/base.rb#8
    def _ransackers?; end

    # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _rollback_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _rollback_callbacks=(value); end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _save_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _save_callbacks=(value); end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _touch_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _touch_callbacks=(value); end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _update_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _update_callbacks=(value); end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _validate_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _validate_callbacks=(value); end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#955
    def _validation_callbacks; end

    # source://activesupport/7.1.5.1/lib/active_support/callbacks.rb#959
    def _validation_callbacks=(value); end

    # source://activemodel/7.1.5.1/lib/active_model/validations.rb#71
    def _validators; end

    # source://activemodel/7.1.5.1/lib/active_model/validations.rb#71
    def _validators=(value); end

    # source://activemodel/7.1.5.1/lib/active_model/validations.rb#71
    def _validators?; end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#105
    def application_record_class?; end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#125
    def asynchronous_queries_session; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#129
    def asynchronous_queries_tracker; end

    # source://activestorage/7.1.5.1/lib/active_storage/reflection.rb#53
    def attachment_reflections; end

    # source://activestorage/7.1.5.1/lib/active_storage/reflection.rb#53
    def attachment_reflections=(value); end

    # source://activestorage/7.1.5.1/lib/active_storage/reflection.rb#53
    def attachment_reflections?; end

    # source://activemodel/7.1.5.1/lib/active_model/attribute_methods.rb#72
    def attribute_aliases; end

    # source://activemodel/7.1.5.1/lib/active_model/attribute_methods.rb#72
    def attribute_aliases=(value); end

    # source://activemodel/7.1.5.1/lib/active_model/attribute_methods.rb#72
    def attribute_aliases?; end

    # source://activemodel/7.1.5.1/lib/active_model/attribute_methods.rb#73
    def attribute_method_patterns; end

    # source://activemodel/7.1.5.1/lib/active_model/attribute_methods.rb#73
    def attribute_method_patterns=(value); end

    # source://activemodel/7.1.5.1/lib/active_model/attribute_methods.rb#73
    def attribute_method_patterns?; end

    # source://activerecord/7.1.5.1/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord/7.1.5.1/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads?; end

    # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#13
    def automatic_scope_inversing; end

    # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#13
    def automatic_scope_inversing=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/reflection.rb#13
    def automatic_scope_inversing?; end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/7.1.5.1/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#89
    def belongs_to_required_by_default; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#89
    def belongs_to_required_by_default=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#89
    def belongs_to_required_by_default?; end

    # source://activerecord/7.1.5.1/lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord/7.1.5.1/lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord/7.1.5.1/lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord/7.1.5.1/lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/integration.rb#24
    def cache_versioning?; end

    # Establishes a connection to the database that's used by all Active Record objects
    #
    # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#27
    def clickhouse_connection(config); end

    # source://activerecord/7.1.5.1/lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord/7.1.5.1/lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#77
    def configurations; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#71
    def configurations=(config); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#189
    def connected_to_stack; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#203
    def connection_class; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#199
    def connection_class=(b); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#207
    def connection_class?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#211
    def connection_class_for_self; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#117
    def connection_handler; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#121
    def connection_handler=(handler); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#180
    def current_preventing_writes; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#143
    def current_role; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#161
    def current_shard; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/serialization.rb#20
    def default_column_serializer; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/serialization.rb#20
    def default_column_serializer=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/serialization.rb#20
    def default_column_serializer?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#97
    def default_connection_handler; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#97
    def default_connection_handler=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#97
    def default_connection_handler?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#99
    def default_role; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#99
    def default_role=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#99
    def default_role?; end

    # source://activerecord/7.1.5.1/lib/active_record/scoping/default.rb#20
    def default_scope_override; end

    # source://activerecord/7.1.5.1/lib/active_record/scoping/default.rb#20
    def default_scope_override=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/scoping/default.rb#19
    def default_scopes; end

    # source://activerecord/7.1.5.1/lib/active_record/scoping/default.rb#19
    def default_scopes=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#101
    def default_shard; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#101
    def default_shard=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#101
    def default_shard?; end

    # source://activerecord/7.1.5.1/lib/active_record/enum.rb#167
    def defined_enums; end

    # source://activerecord/7.1.5.1/lib/active_record/enum.rb#167
    def defined_enums=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/enum.rb#167
    def defined_enums?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#47
    def destroy_association_async_batch_size; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#47
    def destroy_association_async_batch_size=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#27
    def destroy_association_async_job; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#24
    def destroy_association_async_job=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes; end

    # source://activerecord/7.1.5.1/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#87
    def enumerate_columns_in_select_statements; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#87
    def enumerate_columns_in_select_statements=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#87
    def enumerate_columns_in_select_statements?; end

    # source://activerecord/7.1.5.1/lib/active_record/token_for.rb#11
    def generated_token_verifier; end

    # source://activerecord/7.1.5.1/lib/active_record/token_for.rb#11
    def generated_token_verifier=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#93
    def has_many_inversing; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#93
    def has_many_inversing=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#93
    def has_many_inversing?; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#165
    def immutable_strings_by_default; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#165
    def immutable_strings_by_default=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#165
    def immutable_strings_by_default?; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#164
    def implicit_order_column; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#164
    def implicit_order_column=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#164
    def implicit_order_column?; end

    # source://activemodel/7.1.5.1/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.1.5.1/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.1.5.1/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#167
    def inheritance_column; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#321
    def inheritance_column=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#167
    def inheritance_column?; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#162
    def internal_metadata_table_name; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#162
    def internal_metadata_table_name=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#162
    def internal_metadata_table_name?; end

    # source://activerecord/7.1.5.1/lib/active_record/store.rb#101
    def local_stored_attributes; end

    # source://activerecord/7.1.5.1/lib/active_record/store.rb#101
    def local_stored_attributes=(_arg0); end

    # source://activerecord/7.1.5.1/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord/7.1.5.1/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#22
    def logger; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#22
    def logger=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#22
    def logger?; end

    # source://activerecord/7.1.5.1/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/7.1.5.1/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://activerecord/7.1.5.1/lib/active_record/normalization.rb#8
    def normalized_attributes; end

    # source://activerecord/7.1.5.1/lib/active_record/normalization.rb#8
    def normalized_attributes=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/normalization.rb#8
    def normalized_attributes?; end

    # source://activemodel/7.1.5.1/lib/active_model/conversion.rb#32
    def param_delimiter; end

    # source://activemodel/7.1.5.1/lib/active_model/conversion.rb#32
    def param_delimiter=(value); end

    # source://activemodel/7.1.5.1/lib/active_model/conversion.rb#32
    def param_delimiter?; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/dirty.rb#50
    def partial_inserts; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/dirty.rb#50
    def partial_inserts=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/dirty.rb#50
    def partial_inserts?; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/dirty.rb#49
    def partial_updates; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/dirty.rb#49
    def partial_updates=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/dirty.rb#49
    def partial_updates?; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#163
    def pluralize_table_names; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#163
    def pluralize_table_names=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#163
    def pluralize_table_names?; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#158
    def primary_key_prefix_type; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#158
    def primary_key_prefix_type=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#158
    def primary_key_prefix_type?; end

    # source://activerecord/7.1.5.1/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/7.1.5.1/lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#95
    def run_commit_callbacks_on_first_saved_instances_in_transaction; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#95
    def run_commit_callbacks_on_first_saved_instances_in_transaction=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#95
    def run_commit_callbacks_on_first_saved_instances_in_transaction?; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#161
    def schema_migrations_table_name; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#161
    def schema_migrations_table_name=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#161
    def schema_migrations_table_name?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#103
    def shard_selector; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#103
    def shard_selector=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#103
    def shard_selector?; end

    # source://activerecord/7.1.5.1/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord/7.1.5.1/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret?; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord/7.1.5.1/lib/active_record/inheritance.rb#43
    def store_full_class_name; end

    # source://activerecord/7.1.5.1/lib/active_record/inheritance.rb#43
    def store_full_class_name=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/inheritance.rb#43
    def store_full_class_name?; end

    # source://activerecord/7.1.5.1/lib/active_record/inheritance.rb#47
    def store_full_sti_class; end

    # source://activerecord/7.1.5.1/lib/active_record/inheritance.rb#47
    def store_full_sti_class=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/inheritance.rb#47
    def store_full_sti_class?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#91
    def strict_loading_by_default; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#91
    def strict_loading_by_default=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#91
    def strict_loading_by_default?; end

    # source://activerecord/7.1.5.1/lib/active_record/core.rb#226
    def strict_loading_violation!(owner:, reflection:); end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#159
    def table_name_prefix; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#159
    def table_name_prefix=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#159
    def table_name_prefix?; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#160
    def table_name_suffix; end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#160
    def table_name_suffix=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#160
    def table_name_suffix?; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes?; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types; end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types=(value); end

    # source://activerecord/7.1.5.1/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types?; end

    # source://activerecord/7.1.5.1/lib/active_record/token_for.rb#10
    def token_definitions; end

    # source://activerecord/7.1.5.1/lib/active_record/token_for.rb#10
    def token_definitions=(value); end

    private

    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#167
    def _inheritance_column=(value); end
  end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/array.rb#4
module ActiveRecord::ConnectionAdapters; end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/array.rb#5
module ActiveRecord::ConnectionAdapters::Clickhouse; end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/column.rb#4
class ActiveRecord::ConnectionAdapters::Clickhouse::Column < ::ActiveRecord::ConnectionAdapters::Column
  # @return [Column] a new instance of Column
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/column.rb#8
  def initialize(name, default, sql_type_metadata = T.unsafe(nil), null = T.unsafe(nil), default_function = T.unsafe(nil), codec: T.unsafe(nil), **args); end

  # Returns the value of attribute codec.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/column.rb#6
  def codec; end

  private

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/column.rb#15
  def deduplicated; end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#109
class ActiveRecord::ConnectionAdapters::Clickhouse::IndexDefinition
  # @return [IndexDefinition] a new instance of IndexDefinition
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#112
  def initialize(table, name, expression, type, granularity, first:, after:, if_exists:, if_not_exists:); end

  # Returns the value of attribute after.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#110
  def after; end

  # Returns the value of attribute expression.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#110
  def expression; end

  # Returns the value of attribute first.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#110
  def first; end

  # Returns the value of attribute granularity.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#110
  def granularity; end

  # Returns the value of attribute if_exists.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#110
  def if_exists; end

  # Returns the value of attribute if_not_exists.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#110
  def if_not_exists; end

  # Returns the value of attribute name.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#110
  def name; end

  # Returns the value of attribute table.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#110
  def table; end

  # Returns the value of attribute type.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#110
  def type; end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/array.rb#6
module ActiveRecord::ConnectionAdapters::Clickhouse::OID; end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/array.rb#7
class ActiveRecord::ConnectionAdapters::Clickhouse::OID::Array < ::ActiveModel::Type::Value
  # @return [Array] a new instance of Array
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/array.rb#9
  def initialize(sql_type); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/array.rb#26
  def deserialize(value); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/array.rb#44
  def serialize(value); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/array.rb#22
  def type; end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/big_integer.rb#7
class ActiveRecord::ConnectionAdapters::Clickhouse::OID::BigInteger < ::ActiveModel::Type::BigInteger
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/big_integer.rb#12
  def limit; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/big_integer.rb#8
  def type; end

  private

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/big_integer.rb#18
  def _limit; end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/date.rb#7
class ActiveRecord::ConnectionAdapters::Clickhouse::OID::Date < ::ActiveRecord::Type::Date
  # Type cast a value for schema dumping. This method is private, as we are
  # hoping to remove it entirely.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/date.rb#15
  def type_cast_for_schema(value); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/date.rb#9
  def type_cast_from_database(value); end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/date_time.rb#7
class ActiveRecord::ConnectionAdapters::Clickhouse::OID::DateTime < ::ActiveRecord::Type::DateTime
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/date_time.rb#9
  def serialize(value); end

  # Type cast a value for schema dumping. This method is private, as we are
  # hoping to remove it entirely.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/date_time.rb#22
  def type_cast_for_schema(value); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/date_time.rb#16
  def type_cast_from_database(value); end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/map.rb#7
class ActiveRecord::ConnectionAdapters::Clickhouse::OID::Map < ::ActiveModel::Type::Value
  # @return [Map] a new instance of Map
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/map.rb#9
  def initialize(sql_type); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/map.rb#27
  def deserialize(value); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/map.rb#47
  def serialize(value); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/map.rb#23
  def type; end

  private

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/map.rb#71
  def bits_to_limit(bits); end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/uuid.rb#7
class ActiveRecord::ConnectionAdapters::Clickhouse::OID::Uuid < ::ActiveModel::Type::Value
  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/uuid.rb#17
  def changed?(old_value, new_value, _new_value_before_type_cast); end

  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/uuid.rb#22
  def changed_in_place?(raw_old_value, new_value); end

  # source://activemodel/7.1.5.1/lib/active_model/type/value.rb#43
  def serialize(value); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/uuid.rb#13
  def type; end

  private

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/uuid.rb#29
  def cast_value(value); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/uuid.rb#34
  def format_uuid(uuid); end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/uuid.rb#8
ActiveRecord::ConnectionAdapters::Clickhouse::OID::Uuid::ACCEPTABLE_UUID = T.let(T.unsafe(nil), Regexp)

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/oid/uuid.rb#9
ActiveRecord::ConnectionAdapters::Clickhouse::OID::Uuid::CANONICAL_UUID = T.let(T.unsafe(nil), Regexp)

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/quoting.rb#4
module ActiveRecord::ConnectionAdapters::Clickhouse::Quoting
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::ConnectionAdapters::Clickhouse::Quoting::ClassMethods
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/quoting.rb#7
module ActiveRecord::ConnectionAdapters::Clickhouse::Quoting::ClassMethods
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/quoting.rb#8
  def quote_column_name(name); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/quoting.rb#12
  def quote_table_name(name); end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#12
class ActiveRecord::ConnectionAdapters::Clickhouse::SchemaCreation < ::ActiveRecord::ConnectionAdapters::SchemaCreation
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#66
  def add_as_clause!(create_sql, options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#20
  def add_column_options!(sql, options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#50
  def add_table_options!(create_sql, options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#85
  def add_to_clause!(create_sql, options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#73
  def assign_database_to_subquery!(subquery); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#161
  def current_database; end

  # Returns any SQL string to go between CREATE and TABLE. May be nil.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#121
  def table_modifier_in_create(o); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#14
  def visit_AddColumnDefinition(o); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#126
  def visit_ChangeColumnDefinition(o); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#157
  def visit_CreateIndexDefinition(o); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#144
  def visit_IndexDefinition(o, create = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_creation.rb#96
  def visit_TableDefinition(o); end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#8
module ActiveRecord::ConnectionAdapters::Clickhouse::SchemaStatements
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#101
  def add_index_options(table_name, expression, **options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#141
  def assume_migrated_upto_version(version, migrations_paths = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#109
  def data_sources; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#120
  def do_execute(sql, name = T.unsafe(nil), format: T.unsafe(nil), settings: T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#113
  def do_system_execute(sql, name = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#51
  def exec_delete(_sql, _name = T.unsafe(nil), _binds = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#17
  def exec_insert(sql, name, _binds, _pk = T.unsafe(nil), _sequence_name = T.unsafe(nil), returning: T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#39
  def exec_insert_all(sql, name); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#45
  def exec_update(_sql, _name = T.unsafe(nil), _binds = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#13
  def execute(sql, name = T.unsafe(nil), settings: T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#81
  def functions; end

  # Not indexes on clickhouse
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#97
  def indexes(table_name, name = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#23
  def internal_exec_query(sql, name = T.unsafe(nil), binds = T.unsafe(nil), prepare: T.unsafe(nil), async: T.unsafe(nil), allow_retry: T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#75
  def materialized_views(name = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#87
  def show_create_function(function); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#91
  def table_options(table); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#63
  def tables(name = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#69
  def views(name = T.unsafe(nil)); end

  # Fix insert_all method
  # https://github.com/PNixx/clickhouse-activerecord/issues/71#issuecomment-1923244983
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#163
  def with_yaml_fallback(value); end

  protected

  # @raise [ActiveRecord::StatementInvalid]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#239
  def column_definitions(table_name); end

  # @raise [ActiveRecord::StatementInvalid]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#239
  def table_structure(table_name); end

  private

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#187
  def apply_format(sql, format); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#224
  def create_table_definition(table_name, **options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#262
  def extract_default_function(default); end

  # Extracts the value from a PostgreSQL column default definition.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#252
  def extract_value_from_default(default_expression, default_type); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#270
  def format_body_response(body, format); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#283
  def format_from_json_compact(body); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#287
  def format_from_json_compact_each_row_with_names_and_types(body); end

  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#266
  def has_default_function?(default); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#215
  def log_with_debug(sql, name = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#228
  def new_column_from_field(table_name, field, _definitions); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#304
  def parse_json_payload(payload); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#191
  def process_response(res, format, sql = T.unsafe(nil)); end

  # Make HTTP request to ClickHouse server
  #
  # @param sql [String]
  # @param format [String, nil]
  # @param settings [Hash]
  # @return [Net::HTTPResponse]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#178
  def request(sql, format = T.unsafe(nil), settings = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#220
  def schema_creation; end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#11
ActiveRecord::ConnectionAdapters::Clickhouse::SchemaStatements::DB_EXCEPTION_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/schema_statements.rb#9
ActiveRecord::ConnectionAdapters::Clickhouse::SchemaStatements::DEFAULT_RESPONSE_FORMAT = T.let(T.unsafe(nil), String)

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#6
class ActiveRecord::ConnectionAdapters::Clickhouse::TableDefinition < ::ActiveRecord::ConnectionAdapters::TableDefinition
  # @return [TableDefinition] a new instance of TableDefinition
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#10
  def initialize(conn, name, temporary: T.unsafe(nil), if_not_exists: T.unsafe(nil), options: T.unsafe(nil), as: T.unsafe(nil), comment: T.unsafe(nil), view: T.unsafe(nil), materialized: T.unsafe(nil), to: T.unsafe(nil), **_arg10); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#97
  def column(name, type, index: T.unsafe(nil), **options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#66
  def datetime(*args, **options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#80
  def enum(*args, **options); end

  # Returns the value of attribute if_not_exists.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#8
  def if_not_exists; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#39
  def integer(*args, **options); end

  # Returns the value of attribute materialized.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#8
  def materialized; end

  # Returns the value of attribute to.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#8
  def to; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#76
  def uuid(*args, **options); end

  # Returns the value of attribute view.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#8
  def view; end

  private

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse/table_definition.rb#104
  def valid_column_definition_options; end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#81
class ActiveRecord::ConnectionAdapters::ClickhouseAdapter < ::ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecord::ConnectionAdapters::Clickhouse::Quoting
  include ::ActiveRecord::ConnectionAdapters::Clickhouse::SchemaStatements
  extend ::ActiveRecord::ConnectionAdapters::Clickhouse::Quoting::ClassMethods

  # Initializes and connects a Clickhouse adapter.
  #
  # @return [ClickhouseAdapter] a new instance of ClickhouseAdapter
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#118
  def initialize(config_or_deprecated_connection, deprecated_logger = T.unsafe(nil), deprecated_connection_options = T.unsafe(nil), deprecated_config = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#406
  def add_column(table_name, column_name, type, **options); end

  # Adds index description to tables metadata
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#437
  def add_index(table_name, expression, **options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#498
  def apply_cluster(sql); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#165
  def arel_visitor; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#516
  def build_insert_sql(insert); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#420
  def change_column(table_name, column_name, type, **options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#431
  def change_column_default(table_name, column_name, default); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#425
  def change_column_null(table_name, column_name, null, default = T.unsafe(nil)); end

  # Deletes the secondary index files from disk without removing description
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#459
  def clear_index(table_name, name, if_exists: T.unsafe(nil), partition: T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#468
  def cluster; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#277
  def column_name_for_operation(operation, node); end

  # Create a new ClickHouse database.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#309
  def create_database(name); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#357
  def create_function(name, body, **options); end

  # Savepoints are not supported, noop
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#152
  def create_savepoint(name); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#298
  def create_schema_dumper(options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#330
  def create_table(table_name, request_settings: T.unsafe(nil), **options, &block); end

  # @yield [td]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#317
  def create_view(table_name, request_settings: T.unsafe(nil), **options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#476
  def database; end

  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#492
  def database_engine_atomic?; end

  # Drops a ClickHouse database.
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#363
  def drop_database(name); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#396
  def drop_function(name, options = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#371
  def drop_functions; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#381
  def drop_table(table_name, options = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#155
  def exec_rollback_to_savepoint(name); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#161
  def migrations_paths; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#169
  def native_database_types; end

  # SCHEMA STATEMENTS ========================================
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#287
  def primary_keys(table_name); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#253
  def quote(value); end

  # Quoting time without microseconds
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#265
  def quoted_date(value); end

  # Rebuilds the secondary index name for the specified partition_name
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#449
  def rebuild_index(table_name, name, if_exists: T.unsafe(nil), partition: T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#158
  def release_savepoint(name); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#414
  def remove_column(table_name, column_name, type = T.unsafe(nil), **options); end

  # Removes index description from tables metadata and deletes index files from disk
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#443
  def remove_index(table_name, name); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#377
  def rename_table(table_name, new_name); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#472
  def replica; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#488
  def replica_path(table); end

  # Return ClickHouse server version
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#147
  def server_version; end

  # @param table [String]
  # @return [String]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#304
  def show_create_table(table); end

  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#177
  def supports_indexes_in_create?; end

  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#508
  def supports_insert_on_duplicate_skip?; end

  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#512
  def supports_insert_on_duplicate_update?; end

  # In Rails 7 used constant TYPE_MAP, we need redefine method
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#249
  def type_map; end

  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#480
  def use_default_replicated_merge_tree_params?; end

  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#484
  def use_replica?; end

  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#173
  def valid_type?(type); end

  protected

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#527
  def change_column_for_alter(table_name, column_name, type, **options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#523
  def last_inserted_id(result); end

  private

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#552
  def apply_replica(table, options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#563
  def configure_replica(table, options); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#535
  def connect; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#548
  def reconnect; end

  class << self
    # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#182
    def extract_limit(sql_type); end

    # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#211
    def extract_precision(sql_type); end

    # `extract_scale` and `extract_precision` are the same as in the Rails abstract base class,
    # except this permits a space after the comma
    #
    # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#204
    def extract_scale(sql_type); end

    # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#215
    def initialize_type_map(m); end
  end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#84
ActiveRecord::ConnectionAdapters::ClickhouseAdapter::ADAPTER_NAME = T.let(T.unsafe(nil), String)

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#85
ActiveRecord::ConnectionAdapters::ClickhouseAdapter::NATIVE_DATABASE_TYPES = T.let(T.unsafe(nil), Hash)

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#51
module ActiveRecord::ModelSchema
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::ModelSchema::ClassMethods

  class << self
    # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#191
    def derive_join_table_name(first_table, second_table); end
  end

  module GeneratedClassMethods
    def immutable_strings_by_default; end
    def immutable_strings_by_default=(value); end
    def immutable_strings_by_default?; end
    def implicit_order_column; end
    def implicit_order_column=(value); end
    def implicit_order_column?; end
    def inheritance_column; end
    def inheritance_column=(value); end
    def inheritance_column?; end
    def internal_metadata_table_name; end
    def internal_metadata_table_name=(value); end
    def internal_metadata_table_name?; end
    def pluralize_table_names; end
    def pluralize_table_names=(value); end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type=(value); end
    def primary_key_prefix_type?; end
    def schema_migrations_table_name; end
    def schema_migrations_table_name=(value); end
    def schema_migrations_table_name?; end
    def table_name_prefix; end
    def table_name_prefix=(value); end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix=(value); end
    def table_name_suffix?; end
  end

  module GeneratedInstanceMethods
    def pluralize_table_names; end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type?; end
    def table_name_prefix; end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix?; end
  end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#52
module ActiveRecord::ModelSchema::ClassMethods
  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#502
  def _default_attributes; end

  # @raise [ActiveRecord::ActiveRecordError]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#68
  def _delete_record(constraints); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#434
  def _returning_columns_for_insert; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#444
  def attribute_types; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#416
  def attributes_builder; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#497
  def column_defaults; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#488
  def column_for_attribute(name); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#508
  def column_names; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#429
  def columns; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#424
  def columns_hash; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#519
  def content_columns; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#53
  def final(*_arg0, **_arg1, &_arg2); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#53
  def final!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#298
  def full_table_name_prefix; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#302
  def full_table_name_suffix; end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#53
  def group_by_grouping_sets(*_arg0, **_arg1, &_arg2); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#53
  def group_by_grouping_sets!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#327
  def ignored_columns; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#362
  def ignored_columns=(columns); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#60
  def is_view; end

  # @param value [Boolean]
  #
  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#64
  def is_view=(value); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#53
  def limit_by(*_arg0, **_arg1, &_arg2); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#53
  def limit_by!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#562
  def load_schema; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#407
  def next_sequence_value; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#401
  def prefetch_primary_key?; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#308
  def protected_environments; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#317
  def protected_environments=(environments); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#281
  def quoted_table_name; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#321
  def real_inheritance_column=(value); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#553
  def reset_column_information; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#375
  def reset_sequence_name; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#286
  def reset_table_name; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#367
  def sequence_name; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#394
  def sequence_name=(value); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#53
  def settings(*_arg0, **_arg1, &_arg2); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#53
  def settings!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#512
  def symbol_column_to_string(name_symbol); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#412
  def table_exists?; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#255
  def table_name; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#265
  def table_name=(value); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#464
  def type_for_attribute(attr_name, &block); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#53
  def window(*_arg0, **_arg1, &_arg2); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#53
  def window!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#449
  def yaml_encoder; end

  protected

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#577
  def initialize_load_schema_monitor; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#581
  def reload_schema_from_cache(recursive = T.unsafe(nil)); end

  private

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#662
  def _convert_type_from_options(type); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#646
  def compute_table_name; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#604
  def inherited(child_class); end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#617
  def load_schema!; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#613
  def schema_loaded?; end

  # source://activerecord/7.1.5.1/lib/active_record/model_schema.rb#640
  def undecorated_table_name(model_name); end
end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#39
module ActiveRecord::TypeCaster; end

# source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#40
class ActiveRecord::TypeCaster::Map
  # source://activerecord/7.1.5.1/lib/active_record/type_caster/map.rb#6
  def initialize(klass); end

  # source://clickhouse-activerecord//lib/active_record/connection_adapters/clickhouse_adapter.rb#41
  def is_view; end

  # source://activerecord/7.1.5.1/lib/active_record/type_caster/map.rb#10
  def type_cast_for_database(attr_name, value); end

  # source://activerecord/7.1.5.1/lib/active_record/type_caster/map.rb#15
  def type_for_attribute(name); end

  private

  # source://activerecord/7.1.5.1/lib/active_record/type_caster/map.rb#20
  def klass; end
end

# source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#3
module Arel
  class << self
    # source://activerecord/7.1.5.1/lib/arel.rb#60
    def arel_node?(value); end

    # source://activerecord/7.1.5.1/lib/arel.rb#64
    def fetch_attribute(value, &block); end

    # source://activerecord/7.1.5.1/lib/arel.rb#48
    def sql(sql_string, *positional_binds, **named_binds); end

    # source://activerecord/7.1.5.1/lib/arel.rb#56
    def star; end
  end
end

# source://clickhouse-activerecord//lib/arel/nodes/final.rb#2
module Arel::Nodes
  class << self
    # source://activerecord/7.1.5.1/lib/arel/nodes/casted.rb#48
    def build_quoted(other, attribute = T.unsafe(nil)); end
  end
end

# source://clickhouse-activerecord//lib/arel/nodes/final.rb#3
class Arel::Nodes::Final < ::Arel::Nodes::Unary
  # source://clickhouse-activerecord//lib/arel/nodes/final.rb#4
  def empty?(*_arg0, **_arg1, &_arg2); end
end

# source://clickhouse-activerecord//lib/arel/nodes/grouping_sets.rb#5
class Arel::Nodes::GroupingSets < ::Arel::Nodes::Unary
  # @return [GroupingSets] a new instance of GroupingSets
  #
  # source://clickhouse-activerecord//lib/arel/nodes/grouping_sets.rb#7
  def initialize(expr); end

  private

  # source://clickhouse-activerecord//lib/arel/nodes/grouping_sets.rb#14
  def wrap_grouping_sets(sets); end
end

# source://clickhouse-activerecord//lib/arel/nodes/limit_by.rb#3
class Arel::Nodes::LimitBy < ::Arel::Nodes::Unary
  # @raise [ArgumentError]
  # @return [LimitBy] a new instance of LimitBy
  #
  # source://clickhouse-activerecord//lib/arel/nodes/limit_by.rb#6
  def initialize(limit, column); end

  # Returns the value of attribute column.
  #
  # source://clickhouse-activerecord//lib/arel/nodes/limit_by.rb#4
  def column; end
end

# source://clickhouse-activerecord//lib/arel/nodes/settings.rb#3
class Arel::Nodes::Settings < ::Arel::Nodes::Unary
  # @raise [ArgumentError]
  # @return [Settings] a new instance of Settings
  #
  # source://clickhouse-activerecord//lib/arel/nodes/settings.rb#4
  def initialize(expr); end
end

# source://clickhouse-activerecord//lib/arel/nodes/using.rb#3
class Arel::Nodes::Using < ::Arel::Nodes::Unary; end

# source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#4
module Arel::Visitors; end

# source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#5
class Arel::Visitors::Clickhouse < ::Arel::Visitors::ToSql
  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#7
  def aggregate(name, o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#104
  def sanitize_as_setting_name(value); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#96
  def sanitize_as_setting_value(value); end

  # https://clickhouse.com/docs/en/sql-reference/statements/delete
  # DELETE and UPDATE in ClickHouse working only without table name
  #
  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#18
  def visit_Arel_Attributes_Attribute(o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#83
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#43
  def visit_Arel_Nodes_Final(o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#49
  def visit_Arel_Nodes_GroupingSets(o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#73
  def visit_Arel_Nodes_LimitBy(o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#78
  def visit_Arel_Nodes_Matches(o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#88
  def visit_Arel_Nodes_Rows(o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#27
  def visit_Arel_Nodes_SelectOptions(o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#54
  def visit_Arel_Nodes_Settings(o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#32
  def visit_Arel_Nodes_UpdateStatement(o, collector); end

  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#67
  def visit_Arel_Nodes_Using(o, collector); end

  private

  # Utilized by GroupingSet, Cube & RollUp visitors to
  # handle grouping aggregation semantics
  #
  # source://clickhouse-activerecord//lib/arel/visitors/clickhouse.rb#113
  def grouping_array_or_grouping_element(o, collector); end
end

# source://clickhouse-activerecord//lib/clickhouse-activerecord/version.rb#1
module ClickhouseActiverecord
  class << self
    # source://clickhouse-activerecord//lib/clickhouse-activerecord.rb#23
    def load; end
  end
end

# source://clickhouse-activerecord//lib/clickhouse-activerecord/railtie.rb#6
class ClickhouseActiverecord::Railtie < ::Rails::Railtie; end

# source://clickhouse-activerecord//lib/clickhouse-activerecord/schema.rb#4
class ClickhouseActiverecord::Schema < ::ActiveRecord::Schema
  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema.rb#5
  def define(*_arg0, **_arg1, &_arg2); end
end

# source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#2
class ClickhouseActiverecord::SchemaDumper < ::ActiveRecord::ConnectionAdapters::SchemaDumper
  # Returns the value of attribute simple.
  #
  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#4
  def simple; end

  # Sets the attribute simple
  #
  # @param value the value to set the attribute simple to.
  #
  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#4
  def simple=(_arg0); end

  private

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#115
  def column_spec_for_primary_key(column); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#141
  def format_colspec(colspec); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#134
  def format_options(options); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#124
  def function(function, stream); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#189
  def index_parts(index); end

  # @param column [ActiveRecord::ConnectionAdapters::Clickhouse::Column]
  #
  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#176
  def prepare_column_options(column); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#159
  def schema_array(column); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#149
  def schema_limit(column); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#171
  def schema_low_cardinality(column); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#163
  def schema_map(column); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#154
  def schema_unsigned(column); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#32
  def table(table, stream); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#17
  def tables(stream); end

  class << self
    # source://clickhouse-activerecord//lib/clickhouse-activerecord/schema_dumper.rb#7
    def dump(connection = T.unsafe(nil), stream = T.unsafe(nil), config = T.unsafe(nil), default = T.unsafe(nil)); end
  end
end

# source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#4
class ClickhouseActiverecord::Tasks
  # @return [Tasks] a new instance of Tasks
  #
  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#11
  def initialize(configuration); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#5
  def connection(&block); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#15
  def create; end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#26
  def drop; end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#5
  def establish_connection(*_arg0, **_arg1, &_arg2); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#78
  def migrate; end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#31
  def purge; end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#37
  def structure_dump(*args); end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#64
  def structure_load(*args); end

  private

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#98
  def check_target_version; end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#94
  def establish_master_connection; end

  # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#104
  def target_version; end

  class << self
    # @return [Boolean]
    #
    # source://clickhouse-activerecord//lib/clickhouse-activerecord/tasks.rb#7
    def using_database_configurations?; end
  end
end

# source://clickhouse-activerecord//lib/clickhouse-activerecord/version.rb#2
ClickhouseActiverecord::VERSION = T.let(T.unsafe(nil), String)

# source://clickhouse-activerecord//lib/core_extensions/active_record/internal_metadata.rb#1
module CoreExtensions; end

# source://clickhouse-activerecord//lib/core_extensions/active_record/internal_metadata.rb#2
module CoreExtensions::ActiveRecord; end

# source://clickhouse-activerecord//lib/core_extensions/active_record/internal_metadata.rb#3
module CoreExtensions::ActiveRecord::InternalMetadata
  # source://clickhouse-activerecord//lib/core_extensions/active_record/internal_metadata.rb#5
  def create_table; end

  private

  # source://clickhouse-activerecord//lib/core_extensions/active_record/internal_metadata.rb#62
  def connection; end

  # source://clickhouse-activerecord//lib/core_extensions/active_record/internal_metadata.rb#44
  def select_entry(connection_or_key, key = T.unsafe(nil)); end

  # source://clickhouse-activerecord//lib/core_extensions/active_record/internal_metadata.rb#34
  def update_entry(connection_or_key, key_or_new_value, new_value = T.unsafe(nil)); end
end

# source://clickhouse-activerecord//lib/core_extensions/active_record/migration/command_recorder.rb#3
module CoreExtensions::ActiveRecord::Migration; end

# source://clickhouse-activerecord//lib/core_extensions/active_record/migration/command_recorder.rb#4
module CoreExtensions::ActiveRecord::Migration::CommandRecorder
  # source://clickhouse-activerecord//lib/core_extensions/active_record/migration/command_recorder.rb#5
  def create_view(*args, &block); end

  private

  # source://clickhouse-activerecord//lib/core_extensions/active_record/migration/command_recorder.rb#11
  def invert_create_view(args); end
end

# source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#3
module CoreExtensions::ActiveRecord::Relation
  # When FINAL is specified, ClickHouse fully merges the data before returning the result and thus performs all data transformations that happen during merges for the given table engine.
  # For example:
  #
  #   users = User.final.all
  #   # SELECT users.* FROM users FINAL
  #
  # An <tt>ActiveRecord::ActiveRecordError</tt> will be raised if database not ClickHouse.
  #
  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#40
  def final; end

  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#44
  def final!; end

  # GROUPING SETS allows you to specify multiple groupings in the GROUP BY clause.
  # Whereas GROUP BY CUBE generates all possible groupings, GROUP BY GROUPING SETS generates only the specified groupings.
  # For example:
  #
  #   users = User.group_by_grouping_sets([], [:name], [:name, :age]).select(:name, :age, 'count(*)')
  #   # SELECT name, age, count(*) FROM users GROUP BY GROUPING SETS ( (), (name), (name, age) )
  #
  # which is generally equivalent to:
  #   # SELECT NULL, NULL, count(*) FROM users
  #   # UNION ALL
  #   # SELECT name, NULL, count(*) FROM users GROUP BY name
  #   # UNION ALL
  #   # SELECT name, age, count(*) FROM users GROUP BY name, age
  #
  # Raises <tt>ArgumentError</tt> if no grouping sets are specified are provided.
  #
  # @raise [ArgumentError]
  #
  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#65
  def group_by_grouping_sets(*grouping_sets); end

  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#71
  def group_by_grouping_sets!(*grouping_sets); end

  # The LIMIT BY clause permit to improve deduplication based on a unique key, it has better performances than
  # the GROUP BY clause
  #
  #   users = User.limit_by(1, id)
  #   # SELECT users.* FROM users LIMIT 1 BY id
  #
  # An <tt>ActiveRecord::ActiveRecordError</tt> will be reaised if database is not Clickhouse.
  #
  # @param opts [Array]
  #
  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#119
  def limit_by(*opts); end

  # @param opts [Array]
  #
  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#124
  def limit_by!(*opts); end

  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#4
  def reverse_order!; end

  # Define settings in the SETTINGS clause of the SELECT query. The setting value is applied only to that query and is reset to the default or previous value after the query is executed.
  # For example:
  #
  #   users = User.settings(optimize_read_in_order: 1, cast_keep_nullable: 1).where(name: 'John')
  #   # SELECT users.* FROM users WHERE users.name = 'John' SETTINGS optimize_read_in_order = 1, cast_keep_nullable = 1
  #
  # An <tt>ActiveRecord::ActiveRecordError</tt> will be raised if database not ClickHouse.
  #
  # @param opts [Hash]
  #
  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#22
  def settings(**opts); end

  # @param opts [Hash]
  #
  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#27
  def settings!(**opts); end

  # The USING clause specifies one or more columns to join, which establishes the equality of these columns. For example:
  #
  #   users = User.joins(:joins).using(:event_name, :date)
  #   # SELECT users.* FROM users INNER JOIN joins USING event_name,date
  #
  # An <tt>ActiveRecord::ActiveRecordError</tt> will be raised if database not ClickHouse.
  #
  # @param opts [Array]
  #
  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#84
  def using(*opts); end

  # @param opts [Array]
  #
  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#89
  def using!(*opts); end

  # Windows functions let you perform calculations across a set of rows that are related to the current row. For example:
  #
  #   users = User.window('x', order: 'date', partition: 'name', rows: 'UNBOUNDED PRECEDING').select('sum(value) OVER x')
  #   # SELECT sum(value) OVER x FROM users WINDOW x AS (PARTITION BY name ORDER BY date ROWS UNBOUNDED PRECEDING)
  #
  # @param name [String]
  # @param opts [Hash]
  #
  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#101
  def window(name, **opts); end

  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#105
  def window!(name, **opts); end

  private

  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#135
  def build_arel(connection_or_aliases = T.unsafe(nil), aliases = T.unsafe(nil)); end

  # @raise [::ActiveRecord::ActiveRecordError]
  #
  # source://clickhouse-activerecord//lib/core_extensions/active_record/relation.rb#131
  def check_command(cmd); end
end

# source://clickhouse-activerecord//lib/core_extensions/active_record/schema_migration.rb#3
module CoreExtensions::ActiveRecord::SchemaMigration
  # source://clickhouse-activerecord//lib/core_extensions/active_record/schema_migration.rb#51
  def connection; end

  # source://clickhouse-activerecord//lib/core_extensions/active_record/schema_migration.rb#5
  def create_table; end

  # source://clickhouse-activerecord//lib/core_extensions/active_record/schema_migration.rb#31
  def delete_version(version); end

  # source://clickhouse-activerecord//lib/core_extensions/active_record/schema_migration.rb#39
  def versions; end
end

# source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_core.rb#2
module CoreExtensions::Arel; end

# source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_core.rb#3
module CoreExtensions::Arel::Nodes; end

# source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_core.rb#4
module CoreExtensions::Arel::Nodes::SelectCore
  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_core.rb#13
  def eql?(other); end

  # Returns the value of attribute final.
  #
  # source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_core.rb#5
  def final; end

  # Sets the attribute final
  #
  # @param value the value to set the attribute final to.
  #
  # source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_core.rb#5
  def final=(_arg0); end

  # source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_core.rb#7
  def source; end
end

# source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_statement.rb#4
module CoreExtensions::Arel::Nodes::SelectStatement
  # source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_statement.rb#7
  def initialize(relation = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_statement.rb#13
  def eql?(other); end

  # Returns the value of attribute limit_by.
  #
  # source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_statement.rb#5
  def limit_by; end

  # Sets the attribute limit_by
  #
  # @param value the value to set the attribute limit_by to.
  #
  # source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_statement.rb#5
  def limit_by=(_arg0); end

  # Returns the value of attribute settings.
  #
  # source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_statement.rb#5
  def settings; end

  # Sets the attribute settings
  #
  # @param value the value to set the attribute settings to.
  #
  # source://clickhouse-activerecord//lib/core_extensions/arel/nodes/select_statement.rb#5
  def settings=(_arg0); end
end

# source://clickhouse-activerecord//lib/core_extensions/arel/select_manager.rb#3
module CoreExtensions::Arel::SelectManager
  # source://clickhouse-activerecord//lib/core_extensions/arel/select_manager.rb#5
  def final!; end

  # source://clickhouse-activerecord//lib/core_extensions/arel/select_manager.rb#33
  def limit_by(*exprs); end

  # @param values [Hash]
  #
  # source://clickhouse-activerecord//lib/core_extensions/arel/select_manager.rb#11
  def settings(values); end

  # source://clickhouse-activerecord//lib/core_extensions/arel/select_manager.rb#28
  def using(*exprs); end

  # @param windows [Array]
  #
  # source://clickhouse-activerecord//lib/core_extensions/arel/select_manager.rb#17
  def windows(windows); end
end

# source://clickhouse-activerecord//lib/core_extensions/arel/table.rb#3
module CoreExtensions::Arel::Table
  # source://clickhouse-activerecord//lib/core_extensions/arel/table.rb#4
  def is_view; end
end
