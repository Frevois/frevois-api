# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `throttling` gem.
# Please instead update this file by running `bin/tapioca gem throttling`.


# Simple throttling library to limit number of actions in time.
#
# source://throttling//lib/throttling.rb#5
module Throttling
  class << self
    # Disables throttling.
    #
    # source://throttling//lib/throttling.rb#75
    def disable!; end

    # Enables throttling.
    #
    # source://throttling//lib/throttling.rb#70
    def enable!; end

    # Get the value indicating whether throttling is enabled.
    #
    # @return [Boolean]
    #
    # source://throttling//lib/throttling.rb#59
    def enabled; end

    # Sets the value indicating whether throttling is enabled.
    #
    # source://throttling//lib/throttling.rb#65
    def enabled=(enabled); end

    # Get the value indicating whether throttling is enabled.
    #
    # @return [Boolean]
    #
    # source://throttling//lib/throttling.rb#59
    def enabled?; end

    # Returns a Throttling::Base instance for a given action.
    #
    # source://throttling//lib/throttling.rb#80
    def for(action); end

    # Gets a Hash with current throttling limits.
    #
    # source://throttling//lib/throttling.rb#49
    def limits; end

    # Sets current throttling limits.
    #
    # source://throttling//lib/throttling.rb#54
    def limits=(limits); end

    # Gets a throttling limits config file path.
    #
    # source://throttling//lib/throttling.rb#37
    def limits_config; end

    # Sets the configuration file path containing throttling limits.
    #
    # source://throttling//lib/throttling.rb#43
    def limits_config=(path); end

    # Gets the logger used to output errors or warnings.
    #
    # source://throttling//lib/throttling.rb#27
    def logger; end

    # Sets the logger used to output errors or warnings.
    #
    # source://throttling//lib/throttling.rb#32
    def logger=(logger); end

    # Resets all values to their default state (mostly for testing purpose).
    #
    # source://throttling//lib/throttling.rb#85
    def reset_defaults!; end

    # Gets current Throttling storage. By default returns Rails.cache
    # (if it is a Rails application).
    #
    # @raise [ArgumentError]
    #
    # source://throttling//lib/throttling.rb#9
    def storage; end

    # Sets a storage instance to store Throttling information in. Should implement to
    # to methods:
    #
    #     def fetch(key, options = {}, &block)
    #     def increment(key)
    #
    # Rails.cache is one of the storages conforming this interface.
    #
    # source://throttling//lib/throttling.rb#22
    def storage=(storage); end

    private

    # source://throttling//lib/throttling.rb#98
    def load_config(path); end
  end
end

# Class implements throttling for a single action.
#
# source://throttling//lib/throttling/base.rb#3
class Throttling::Base
  # @raise [ArgumentError]
  # @return [Base] a new instance of Base
  #
  # source://throttling//lib/throttling/base.rb#6
  def initialize(action); end

  # Returns the value of attribute action.
  #
  # source://throttling//lib/throttling/base.rb#4
  def action; end

  # Sets the attribute action
  #
  # @param value the value to set the attribute action to.
  #
  # source://throttling//lib/throttling/base.rb#4
  def action=(_arg0); end

  # source://throttling//lib/throttling/base.rb#32
  def check(check_type, check_value, auto_increment = T.unsafe(nil)); end

  # source://throttling//lib/throttling/base.rb#24
  def check_ip(ip); end

  # source://throttling//lib/throttling/base.rb#28
  def check_user_id(user_id); end

  # Returns the value of attribute limits.
  #
  # source://throttling//lib/throttling/base.rb#4
  def limits; end

  # Sets the attribute limits
  #
  # @param value the value to set the attribute limits to.
  #
  # source://throttling//lib/throttling/base.rb#4
  def limits=(_arg0); end

  private

  # source://throttling//lib/throttling/base.rb#71
  def hits_store_key(check_type, check_value, period_name, period_value); end

  # source://throttling//lib/throttling/base.rb#75
  def hits_store_ttl(check_period); end
end

# source://throttling//lib/throttling/indifferent_access.rb#3
Throttling::HashWithIndifferentAccess = ActiveSupport::HashWithIndifferentAccess

# source://throttling//lib/throttling/version.rb#2
Throttling::VERSION = T.let(T.unsafe(nil), String)
