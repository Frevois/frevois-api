# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gocardless_pro` gem.
# Please instead update this file by running `bin/tapioca gem gocardless_pro`.


#
# This client is automatically generated from a template and JSON schema definition.
# See https://github.com/gocardless/gocardless-pro-ruby#contributing before editing.
#
# source://gocardless_pro//lib/gocardless_pro.rb#13
module GoCardlessPro; end

# Thrown when something goes wrong with the request to the API
# and we don\'t get a proper response from the GC API
#
# source://gocardless_pro//lib/gocardless_pro/error/api_error.rb#4
class GoCardlessPro::ApiError < ::GoCardlessPro::Error; end

# wraps a faraday response object with some accessors
#
# source://gocardless_pro//lib/gocardless_pro/api_response.rb#3
class GoCardlessPro::ApiResponse
  extend ::Forwardable

  # @return [ApiResponse] a new instance of ApiResponse
  #
  # source://gocardless_pro//lib/gocardless_pro/api_response.rb#6
  def initialize(response); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def body(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def headers(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def status_code(*args, **_arg1, &block); end
end

# GoCardless API
#
# source://gocardless_pro//lib/gocardless_pro/api_service.rb#11
class GoCardlessPro::ApiService
  # Initialize an APIService
  #
  # @param url [String] the URL to make requests to
  # @param key [String] the API Key ID to use
  # @param secret [String] the API key secret to use
  # @param options [Hash] additional options to use when creating the service
  # @raise [ArgumentError]
  # @return [ApiService] a new instance of ApiService
  #
  # source://gocardless_pro//lib/gocardless_pro/api_service.rb#20
  def initialize(url, token, options = T.unsafe(nil)); end

  # inspect the API Service
  #
  # source://gocardless_pro//lib/gocardless_pro/api_service.rb#55
  def inspect; end

  # Make a request to the API
  #
  # @param method [Symbol] the method to use to make the request
  # @param path [String] the URL (without the base domain) to make the request to
  # @param options [Hash] the options hash
  # @raise [ArgumentError]
  #
  # source://gocardless_pro//lib/gocardless_pro/api_service.rb#46
  def make_request(method, path, options = T.unsafe(nil)); end

  # Returns the value of attribute on_idempotency_conflict.
  #
  # source://gocardless_pro//lib/gocardless_pro/api_service.rb#12
  def on_idempotency_conflict; end

  # inspect the API Service
  #
  # source://gocardless_pro//lib/gocardless_pro/api_service.rb#55
  def to_s; end

  private

  # source://gocardless_pro//lib/gocardless_pro/api_service.rb#64
  def unpack_url(url); end
end

# source://gocardless_pro//lib/gocardless_pro/error/authentication_error.rb#2
class GoCardlessPro::AuthenticationError < ::GoCardlessPro::InvalidApiUsageError; end

# A class for working with and talking to the GoCardless API
#
# source://gocardless_pro//lib/gocardless_pro/client.rb#3
class GoCardlessPro::Client
  extend ::Forwardable

  # Get a Client configured to use HTTP Basic authentication with the GC Api
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash<Symbol,String>] configuration for creating the client
  # @return [Client] A client configured to use the API with HTTP Basic
  #   authentication.
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#196
  def initialize(options); end

  # Access to the service for bank_authorisation to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#7
  def bank_authorisations; end

  # Access to the service for bank_details_lookup to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#12
  def bank_details_lookups; end

  # Access to the service for billing_request_flow to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#22
  def billing_request_flows; end

  # Access to the service for billing_request_template to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#27
  def billing_request_templates; end

  # Access to the service for billing_request to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#17
  def billing_requests; end

  # Access to the service for block to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#32
  def blocks; end

  # Access to the service for creditor_bank_account to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#42
  def creditor_bank_accounts; end

  # Access to the service for creditor to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#37
  def creditors; end

  # Access to the service for currency_exchange_rate to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#47
  def currency_exchange_rates; end

  # Access to the service for customer_bank_account to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#57
  def customer_bank_accounts; end

  # Access to the service for customer_notification to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#62
  def customer_notifications; end

  # Access to the service for customer to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#52
  def customers; end

  # Access to the service for event to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#67
  def events; end

  # Access to the service for export to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#72
  def exports; end

  # Access to the service for instalment_schedule to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#77
  def instalment_schedules; end

  # Access to the service for institution to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#82
  def institutions; end

  # Access to the service for logo to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#87
  def logos; end

  # Access to the service for mandate_import_entry to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#102
  def mandate_import_entries; end

  # Access to the service for mandate_import to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#97
  def mandate_imports; end

  # Access to the service for mandate_pdf to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#107
  def mandate_pdfs; end

  # Access to the service for mandate to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#92
  def mandates; end

  # Access to the service for negative_balance_limit to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#112
  def negative_balance_limits; end

  # Access to the service for payer_authorisation to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#117
  def payer_authorisations; end

  # Access to the service for payer_theme to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#122
  def payer_themes; end

  # Access to the service for payment to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#127
  def payments; end

  # Access to the service for payout_item to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#137
  def payout_items; end

  # Access to the service for payout to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#132
  def payouts; end

  # Access to the service for redirect_flow to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#142
  def redirect_flows; end

  # Access to the service for refund to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#147
  def refunds; end

  # Access to the service for scenario_simulator to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#152
  def scenario_simulators; end

  # Access to the service for scheme_identifier to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#157
  def scheme_identifiers; end

  # Access to the service for subscription to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#162
  def subscriptions; end

  # Access to the service for tax_rate to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#167
  def tax_rates; end

  # Access to the service for transferred_mandate to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#172
  def transferred_mandates; end

  # Access to the service for verification_detail to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#177
  def verification_details; end

  # Access to the service for webhook to make API calls
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#182
  def webhooks; end

  private

  # Get customized options.
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#217
  def custom_options(options); end

  # Get the default options.
  #
  # source://gocardless_pro//lib/gocardless_pro/client.rb#229
  def default_options; end

  # source://gocardless_pro//lib/gocardless_pro/client.rb#206
  def url_for_environment(environment); end

  # source://gocardless_pro//lib/gocardless_pro/client.rb#241
  def user_agent; end
end

# A class to represent an API Error
#
# source://gocardless_pro//lib/gocardless_pro/error.rb#3
class GoCardlessPro::Error < ::StandardError
  # intialize a new error
  # Â @param error the error from the API
  #
  # @raise [ArgumentError]
  # @return [Error] a new instance of Error
  #
  # source://gocardless_pro//lib/gocardless_pro/error.rb#8
  def initialize(error); end

  # access the code from the response
  #
  # source://gocardless_pro//lib/gocardless_pro/error.rb#40
  def code; end

  # access the documentation_url from the response
  #
  # source://gocardless_pro//lib/gocardless_pro/error.rb#15
  def documentation_url; end

  # Returns the value of attribute error.
  #
  # source://gocardless_pro//lib/gocardless_pro/error.rb#4
  def error; end

  # access the errors from the response
  #
  # source://gocardless_pro//lib/gocardless_pro/error.rb#50
  def errors; end

  # access the message from the response
  #
  # source://gocardless_pro//lib/gocardless_pro/error.rb#20
  def message; end

  # access the request_id from the response
  #
  # source://gocardless_pro//lib/gocardless_pro/error.rb#45
  def request_id; end

  # source://gocardless_pro//lib/gocardless_pro/error.rb#24
  def to_s; end

  # access the type from the response
  #
  # source://gocardless_pro//lib/gocardless_pro/error.rb#35
  def type; end
end

# Thrown when the API returns a GoCardlessError
#
# source://gocardless_pro//lib/gocardless_pro/error/gocardless_error.rb#3
class GoCardlessPro::GoCardlessError < ::GoCardlessPro::Error; end

# source://gocardless_pro//lib/gocardless_pro/error/invalid_state_error.rb#24
class GoCardlessPro::IdempotencyConflict < ::GoCardlessPro::Error; end

# Thrown when the API returns an invalid usage error
#
# source://gocardless_pro//lib/gocardless_pro/error/invalid_api_usage_error.rb#3
class GoCardlessPro::InvalidApiUsageError < ::GoCardlessPro::Error; end

# Thrown when the API returns an invalid state error
#
# source://gocardless_pro//lib/gocardless_pro/error/invalid_state_error.rb#3
class GoCardlessPro::InvalidStateError < ::GoCardlessPro::Error
  # source://gocardless_pro//lib/gocardless_pro/error/invalid_state_error.rb#11
  def conflicting_resource_id; end

  # @return [Boolean]
  #
  # source://gocardless_pro//lib/gocardless_pro/error/invalid_state_error.rb#7
  def idempotent_creation_conflict?; end

  private

  # source://gocardless_pro//lib/gocardless_pro/error/invalid_state_error.rb#19
  def idempotent_creation_conflict_error; end
end

# source://gocardless_pro//lib/gocardless_pro/error/invalid_state_error.rb#5
GoCardlessPro::InvalidStateError::CONFLICTING_RESOURCE_ID = T.let(T.unsafe(nil), String)

# source://gocardless_pro//lib/gocardless_pro/error/invalid_state_error.rb#4
GoCardlessPro::InvalidStateError::IDEMPOTENT_CREATION_CONFLICT = T.let(T.unsafe(nil), String)

# Wraps a response from an API LIST endpoint
#
# source://gocardless_pro//lib/gocardless_pro/list_response.rb#3
class GoCardlessPro::ListResponse
  # Initialize a list response
  #
  # @option option
  # @option option
  # @option option
  # @param options [Hash]
  # @param option [Hash] a customizable set of options
  # @return [ListResponse] a new instance of ListResponse
  #
  # source://gocardless_pro//lib/gocardless_pro/list_response.rb#11
  def initialize(options = T.unsafe(nil)); end

  # return the after cursor for paginating
  #
  # source://gocardless_pro//lib/gocardless_pro/list_response.rb#29
  def after; end

  # source://gocardless_pro//lib/gocardless_pro/list_response.rb#19
  def api_response; end

  # return the before cursor for paginating
  #
  # source://gocardless_pro//lib/gocardless_pro/list_response.rb#24
  def before; end

  # Returns the value of attribute records.
  #
  # source://gocardless_pro//lib/gocardless_pro/list_response.rb#4
  def records; end
end

# source://gocardless_pro//lib/gocardless_pro/middlewares/raise_gocardless_errors.rb#2
module GoCardlessPro::Middlewares; end

# source://gocardless_pro//lib/gocardless_pro/middlewares/raise_gocardless_errors.rb#3
class GoCardlessPro::Middlewares::RaiseGoCardlessErrors < ::Faraday::Middleware
  # @raise [error_class]
  #
  # source://gocardless_pro//lib/gocardless_pro/middlewares/raise_gocardless_errors.rb#8
  def on_complete(env); end

  private

  # source://gocardless_pro//lib/gocardless_pro/middlewares/raise_gocardless_errors.rb#25
  def error_class_for_status(code); end

  # source://gocardless_pro//lib/gocardless_pro/middlewares/raise_gocardless_errors.rb#33
  def error_class_for_type(type); end

  # source://gocardless_pro//lib/gocardless_pro/middlewares/raise_gocardless_errors.rb#42
  def generate_error_data(env); end

  # @return [Boolean]
  #
  # source://gocardless_pro//lib/gocardless_pro/middlewares/raise_gocardless_errors.rb#52
  def json?(env); end
end

# source://gocardless_pro//lib/gocardless_pro/middlewares/raise_gocardless_errors.rb#4
GoCardlessPro::Middlewares::RaiseGoCardlessErrors::API_ERROR_STATUSES = T.let(T.unsafe(nil), Range)

# source://gocardless_pro//lib/gocardless_pro/middlewares/raise_gocardless_errors.rb#6
GoCardlessPro::Middlewares::RaiseGoCardlessErrors::API_STATUS_NO_CONTENT = T.let(T.unsafe(nil), Integer)

# source://gocardless_pro//lib/gocardless_pro/middlewares/raise_gocardless_errors.rb#5
GoCardlessPro::Middlewares::RaiseGoCardlessErrors::CLIENT_ERROR_STATUSES = T.let(T.unsafe(nil), Range)

# A class that can take an API LIST query and auto paginate through results
#
# source://gocardless_pro//lib/gocardless_pro/paginator.rb#3
class GoCardlessPro::Paginator
  # initialize a paginator
  #
  # @option options
  # @option options
  # @param options [Hash]
  # @return [Paginator] a new instance of Paginator
  #
  # source://gocardless_pro//lib/gocardless_pro/paginator.rb#8
  def initialize(options = T.unsafe(nil)); end

  # Get a lazy enumerable for listing data from the API
  #
  # source://gocardless_pro//lib/gocardless_pro/paginator.rb#14
  def enumerator; end

  private

  # source://gocardless_pro//lib/gocardless_pro/paginator.rb#32
  def get_initial_response; end
end

# source://gocardless_pro//lib/gocardless_pro/error/permission_error.rb#2
class GoCardlessPro::PermissionError < ::GoCardlessPro::InvalidApiUsageError; end

# source://gocardless_pro//lib/gocardless_pro/error/rate_limit_error.rb#2
class GoCardlessPro::RateLimitError < ::GoCardlessPro::InvalidApiUsageError; end

# A class that wraps an API request
#
# source://gocardless_pro//lib/gocardless_pro/request.rb#5
class GoCardlessPro::Request
  # Initialize a request class, which makes calls to the API
  #
  # @param connection
  # @param method [Symbol] the method to make the request with
  # @param path [String] the path to make the request to
  # @param options [hash] options for the request
  # @param headers [hash] headers to send with the request
  # @return [Request] a new instance of Request
  #
  # source://gocardless_pro//lib/gocardless_pro/request.rb#19
  def initialize(connection, method, path, options); end

  # Make the API request
  #
  # source://gocardless_pro//lib/gocardless_pro/request.rb#66
  def make_request; end

  # Make the request and wrap it in a Response object
  #
  # source://gocardless_pro//lib/gocardless_pro/request.rb#41
  def request; end

  # Fetch the body to send with the request
  #
  # source://gocardless_pro//lib/gocardless_pro/request.rb#76
  def request_body; end

  # Get the query params to send with the request
  #
  # source://gocardless_pro//lib/gocardless_pro/request.rb#87
  def request_query; end

  # source://gocardless_pro//lib/gocardless_pro/request.rb#49
  def with_retries; end

  private

  # @return [Boolean]
  #
  # source://gocardless_pro//lib/gocardless_pro/request.rb#97
  def should_retry?(exception); end
end

# source://gocardless_pro//lib/gocardless_pro/request.rb#6
GoCardlessPro::Request::MAX_RETRIES = T.let(T.unsafe(nil), Integer)

# source://gocardless_pro//lib/gocardless_pro/request.rb#8
GoCardlessPro::Request::RETRYABLE_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://gocardless_pro//lib/gocardless_pro/request.rb#7
GoCardlessPro::Request::RETRY_DELAY = T.let(T.unsafe(nil), Float)

# A module containing classes for each of the resources in the GC Api
#
# source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#10
module GoCardlessPro::Resources; end

# Bank Authorisations can be used to authorise Billing Requests.
# Authorisations
# are created against a specific bank, usually the bank that provides the
# payer's
# account.
#
# Creation of Bank Authorisations is only permitted from GoCardless hosted
# UIs
# (see Billing Request Flows) to ensure we meet regulatory requirements for
# checkout flows.
#
# source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#23
class GoCardlessPro::Resources::BankAuthorisation
  # Initialize a bank_authorisation resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [BankAuthorisation] a new instance of BankAuthorisation
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#36
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#52
  def api_response; end

  # Returns the value of attribute authorisation_type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#24
  def authorisation_type; end

  # Returns the value of attribute authorised_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#25
  def authorised_at; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#26
  def created_at; end

  # Returns the value of attribute expires_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#27
  def expires_at; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#28
  def id; end

  # Returns the value of attribute last_visited_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#29
  def last_visited_at; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#57
  def links; end

  # Returns the value of attribute qr_code_url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#30
  def qr_code_url; end

  # Returns the value of attribute redirect_uri.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#31
  def redirect_uri; end

  # Provides the bank_authorisation resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#62
  def to_h; end

  # Returns the value of attribute url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#32
  def url; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#66
class GoCardlessPro::Resources::BankAuthorisation::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#67
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#71
  def billing_request; end

  # source://gocardless_pro//lib/gocardless_pro/resources/bank_authorisation.rb#75
  def institution; end
end

# Look up the name and reachability of a bank account.
#
# source://gocardless_pro//lib/gocardless_pro/resources/bank_details_lookup.rb#14
class GoCardlessPro::Resources::BankDetailsLookup
  # Initialize a bank_details_lookup resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [BankDetailsLookup] a new instance of BankDetailsLookup
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_details_lookup.rb#21
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/bank_details_lookup.rb#30
  def api_response; end

  # Returns the value of attribute available_debit_schemes.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_details_lookup.rb#15
  def available_debit_schemes; end

  # Returns the value of attribute bank_name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_details_lookup.rb#16
  def bank_name; end

  # Returns the value of attribute bic.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_details_lookup.rb#17
  def bic; end

  # Provides the bank_details_lookup resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/bank_details_lookup.rb#35
  def to_h; end
end

# Billing Requests help create resources that require input or action from a
# customer. An example of required input might be additional customer
# billing
# details, while an action would be asking a customer to authorise a payment
# using their mobile banking app.
#
# See [Billing Requests:
# Overview](https://developer.gocardless.com/getting-started/billing-requests/overview/)
# for how-to's, explanations and tutorials.
#
# source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#22
class GoCardlessPro::Resources::BillingRequest
  # Initialize a billing_request resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [BillingRequest] a new instance of BillingRequest
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#36
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute actions.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#23
  def actions; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#53
  def api_response; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#24
  def created_at; end

  # Returns the value of attribute fallback_enabled.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#25
  def fallback_enabled; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#26
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#58
  def links; end

  # Returns the value of attribute mandate_request.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#27
  def mandate_request; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#28
  def metadata; end

  # Returns the value of attribute payment_request.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#29
  def payment_request; end

  # Returns the value of attribute purpose_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#30
  def purpose_code; end

  # Returns the value of attribute resources.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#31
  def resources; end

  # Returns the value of attribute status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#32
  def status; end

  # Provides the billing_request resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#63
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#67
class GoCardlessPro::Resources::BillingRequest::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#68
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#72
  def bank_authorisation; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#76
  def creditor; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#80
  def customer; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#84
  def customer_bank_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#88
  def customer_billing_detail; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#92
  def mandate_request; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#96
  def mandate_request_mandate; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#100
  def organisation; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#104
  def payment_provider; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#108
  def payment_request; end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request.rb#112
  def payment_request_payment; end
end

# Billing Request Flows can be created to enable a payer to authorise a
# payment created for a scheme with strong payer
# authorisation (such as open banking single payments).
#
# source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#16
class GoCardlessPro::Resources::BillingRequestFlow
  # Initialize a billing_request_flow resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [BillingRequestFlow] a new instance of BillingRequestFlow
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#37
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#61
  def api_response; end

  # Returns the value of attribute authorisation_url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#17
  def authorisation_url; end

  # Returns the value of attribute auto_fulfil.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#18
  def auto_fulfil; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#19
  def created_at; end

  # Returns the value of attribute customer_details_captured.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#20
  def customer_details_captured; end

  # Returns the value of attribute exit_uri.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#21
  def exit_uri; end

  # Returns the value of attribute expires_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#22
  def expires_at; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#23
  def id; end

  # Returns the value of attribute language.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#24
  def language; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#66
  def links; end

  # Returns the value of attribute lock_bank_account.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#25
  def lock_bank_account; end

  # Returns the value of attribute lock_currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#26
  def lock_currency; end

  # Returns the value of attribute lock_customer_details.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#27
  def lock_customer_details; end

  # Returns the value of attribute prefilled_bank_account.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#28
  def prefilled_bank_account; end

  # Returns the value of attribute prefilled_customer.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#29
  def prefilled_customer; end

  # Returns the value of attribute redirect_uri.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#30
  def redirect_uri; end

  # Returns the value of attribute session_token.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#31
  def session_token; end

  # Returns the value of attribute show_redirect_buttons.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#32
  def show_redirect_buttons; end

  # Returns the value of attribute show_success_redirect_button.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#33
  def show_success_redirect_button; end

  # Provides the billing_request_flow resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#71
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#75
class GoCardlessPro::Resources::BillingRequestFlow::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#76
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_flow.rb#80
  def billing_request; end
end

# Billing Request Templates are reusable templates that result in
# numerous Billing Requests with similar attributes. They provide
# a no-code solution for generating various types of multi-user payment
# links.
#
# Each template includes a reusable URL that can be embedded in a website
# or shared with customers via email. Every time the URL is opened,
# it generates a new Billing Request.
#
# Billing Request Templates overcome the key limitation of the Billing
# Request:
# a Billing Request cannot be shared among multiple users because it is
# intended
# for single-use and is designed to cater to the unique needs of individual
# customers.
#
# source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#28
class GoCardlessPro::Resources::BillingRequestTemplate
  # Initialize a billing_request_template resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [BillingRequestTemplate] a new instance of BillingRequestTemplate
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#49
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#72
  def api_response; end

  # Returns the value of attribute authorisation_url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#29
  def authorisation_url; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#30
  def created_at; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#31
  def id; end

  # Returns the value of attribute mandate_request_currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#32
  def mandate_request_currency; end

  # Returns the value of attribute mandate_request_description.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#33
  def mandate_request_description; end

  # Returns the value of attribute mandate_request_metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#34
  def mandate_request_metadata; end

  # Returns the value of attribute mandate_request_scheme.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#35
  def mandate_request_scheme; end

  # Returns the value of attribute mandate_request_verify.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#36
  def mandate_request_verify; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#37
  def metadata; end

  # Returns the value of attribute name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#38
  def name; end

  # Returns the value of attribute payment_request_amount.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#39
  def payment_request_amount; end

  # Returns the value of attribute payment_request_currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#40
  def payment_request_currency; end

  # Returns the value of attribute payment_request_description.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#41
  def payment_request_description; end

  # Returns the value of attribute payment_request_metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#42
  def payment_request_metadata; end

  # Returns the value of attribute payment_request_scheme.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#43
  def payment_request_scheme; end

  # Returns the value of attribute redirect_uri.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#44
  def redirect_uri; end

  # Provides the billing_request_template resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#77
  def to_h; end

  # Returns the value of attribute updated_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/billing_request_template.rb#45
  def updated_at; end
end

# Blocks are created to prevent certain customer details from being used
# when creating
# mandates.
#
# The details used to create blocks can be exact matches, like a bank
# account or an email,
# or a more generic match such as an email domain or bank name. Please be
# careful when creating
# blocks for more generic matches as this may block legitimate payers from
# using your service.
#
# New block types may be added over time.
#
# A block is in essence a simple rule that is used to match against details
# in a newly
# created mandate. If there is a successful match then the mandate is
# transitioned to a
# "blocked" state.
#
# Please note:
#
#   - Payments and subscriptions cannot be created against a mandate in
# blocked state.
#   - A mandate can never be transitioned out of the blocked state.
#
# The one exception to this is when blocking a 'bank_name'. This block will
# prevent bank
# accounts from being created for banks that match the given name. To ensure
# we match
# bank names correctly an existing bank account must be used when creating
# this block. Please
# be aware that we cannot always match a bank account to a given bank name.
#
# <p class="notice">
#   This API is currently only available for GoCardless Protect+ integrators
# - please <a href="mailto:help@gocardless.com">get in touch</a> if you
# would like to use this API.
# </p>
#
# source://gocardless_pro//lib/gocardless_pro/resources/block.rb#51
class GoCardlessPro::Resources::Block
  # Initialize a block resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Block] a new instance of Block
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#63
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute active.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#52
  def active; end

  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#77
  def api_response; end

  # Returns the value of attribute block_type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#53
  def block_type; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#54
  def created_at; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#55
  def id; end

  # Returns the value of attribute reason_description.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#56
  def reason_description; end

  # Returns the value of attribute reason_type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#57
  def reason_type; end

  # Returns the value of attribute resource_reference.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#58
  def resource_reference; end

  # Provides the block resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#82
  def to_h; end

  # Returns the value of attribute updated_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/block.rb#59
  def updated_at; end
end

# Each [payment](#core-endpoints-payments) taken through the API is linked
# to a "creditor", to whom the payment is then paid out. In most cases your
# organisation will have a single "creditor", but the API also supports
# collecting payments on behalf of others.
#
# Currently, for Anti Money Laundering reasons, any creditors you add must
# be directly related to your organisation.
#
# source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#20
class GoCardlessPro::Resources::Creditor
  # Initialize a creditor resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Creditor] a new instance of Creditor
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#44
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute address_line1.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#21
  def address_line1; end

  # Returns the value of attribute address_line2.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#22
  def address_line2; end

  # Returns the value of attribute address_line3.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#23
  def address_line3; end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#71
  def api_response; end

  # Returns the value of attribute bank_reference_prefix.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#24
  def bank_reference_prefix; end

  # Returns the value of attribute can_create_refunds.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#25
  def can_create_refunds; end

  # Returns the value of attribute city.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#26
  def city; end

  # Returns the value of attribute country_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#27
  def country_code; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#28
  def created_at; end

  # Returns the value of attribute creditor_type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#29
  def creditor_type; end

  # Returns the value of attribute custom_payment_pages_enabled.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#30
  def custom_payment_pages_enabled; end

  # Returns the value of attribute fx_payout_currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#31
  def fx_payout_currency; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#32
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#76
  def links; end

  # Returns the value of attribute logo_url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#33
  def logo_url; end

  # Returns the value of attribute mandate_imports_enabled.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#34
  def mandate_imports_enabled; end

  # Returns the value of attribute merchant_responsible_for_notifications.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#35
  def merchant_responsible_for_notifications; end

  # Returns the value of attribute name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#36
  def name; end

  # Returns the value of attribute postal_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#37
  def postal_code; end

  # Returns the value of attribute region.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#38
  def region; end

  # Returns the value of attribute scheme_identifiers.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#39
  def scheme_identifiers; end

  # Provides the creditor resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#81
  def to_h; end

  # Returns the value of attribute verification_status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#40
  def verification_status; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#85
class GoCardlessPro::Resources::Creditor::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#86
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#90
  def default_aud_payout_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#94
  def default_cad_payout_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#98
  def default_dkk_payout_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#102
  def default_eur_payout_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#106
  def default_gbp_payout_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#110
  def default_nzd_payout_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#114
  def default_sek_payout_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor.rb#118
  def default_usd_payout_account; end
end

# Creditor Bank Accounts hold the bank details of a
# [creditor](#core-endpoints-creditors). These are the bank accounts which
# your [payouts](#core-endpoints-payouts) will be sent to.
#
# Note that creditor bank accounts must be unique, and so you will encounter
# a `bank_account_exists` error if you try to create a duplicate bank
# account. You may wish to handle this by updating the existing record
# instead, the ID of which will be provided as
# `links[creditor_bank_account]` in the error response.
#
# <p class="restricted-notice"><strong>Restricted</strong>: This API is not
# available for partner integrations.</p>
#
# source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#25
class GoCardlessPro::Resources::CreditorBankAccount
  # Initialize a creditor_bank_account resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [CreditorBankAccount] a new instance of CreditorBankAccount
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#40
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute account_holder_name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#26
  def account_holder_name; end

  # Returns the value of attribute account_number_ending.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#27
  def account_number_ending; end

  # Returns the value of attribute account_type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#28
  def account_type; end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#58
  def api_response; end

  # Returns the value of attribute bank_name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#29
  def bank_name; end

  # Returns the value of attribute country_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#30
  def country_code; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#31
  def created_at; end

  # Returns the value of attribute currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#32
  def currency; end

  # Returns the value of attribute enabled.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#33
  def enabled; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#34
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#63
  def links; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#35
  def metadata; end

  # Provides the creditor_bank_account resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#68
  def to_h; end

  # Returns the value of attribute verification_status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#36
  def verification_status; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#72
class GoCardlessPro::Resources::CreditorBankAccount::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#73
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/creditor_bank_account.rb#77
  def creditor; end
end

# Currency exchange rates from our foreign exchange provider.
#
# source://gocardless_pro//lib/gocardless_pro/resources/currency_exchange_rate.rb#14
class GoCardlessPro::Resources::CurrencyExchangeRate
  # Initialize a currency_exchange_rate resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [CurrencyExchangeRate] a new instance of CurrencyExchangeRate
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/currency_exchange_rate.rb#22
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/currency_exchange_rate.rb#32
  def api_response; end

  # Returns the value of attribute rate.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/currency_exchange_rate.rb#15
  def rate; end

  # Returns the value of attribute source.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/currency_exchange_rate.rb#16
  def source; end

  # Returns the value of attribute target.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/currency_exchange_rate.rb#17
  def target; end

  # Returns the value of attribute time.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/currency_exchange_rate.rb#18
  def time; end

  # Provides the currency_exchange_rate resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/currency_exchange_rate.rb#37
  def to_h; end
end

# Customer objects hold the contact details for a customer. A customer can
# have several [customer bank
# accounts](#core-endpoints-customer-bank-accounts), which in turn can have
# several Direct Debit [mandates](#core-endpoints-mandates).
#
# source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#17
class GoCardlessPro::Resources::Customer
  # Initialize a customer resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Customer] a new instance of Customer
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#39
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute address_line1.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#18
  def address_line1; end

  # Returns the value of attribute address_line2.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#19
  def address_line2; end

  # Returns the value of attribute address_line3.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#20
  def address_line3; end

  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#63
  def api_response; end

  # Returns the value of attribute city.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#21
  def city; end

  # Returns the value of attribute company_name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#22
  def company_name; end

  # Returns the value of attribute country_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#23
  def country_code; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#24
  def created_at; end

  # Returns the value of attribute danish_identity_number.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#25
  def danish_identity_number; end

  # Returns the value of attribute email.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#26
  def email; end

  # Returns the value of attribute family_name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#27
  def family_name; end

  # Returns the value of attribute given_name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#28
  def given_name; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#29
  def id; end

  # Returns the value of attribute language.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#30
  def language; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#31
  def metadata; end

  # Returns the value of attribute phone_number.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#32
  def phone_number; end

  # Returns the value of attribute postal_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#33
  def postal_code; end

  # Returns the value of attribute region.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#34
  def region; end

  # Returns the value of attribute swedish_identity_number.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#35
  def swedish_identity_number; end

  # Provides the customer resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer.rb#68
  def to_h; end
end

# Customer Bank Accounts hold the bank details of a
# [customer](#core-endpoints-customers). They always belong to a
# [customer](#core-endpoints-customers), and may be linked to several Direct
# Debit [mandates](#core-endpoints-mandates).
#
# Note that customer bank accounts must be unique, and so you will encounter
# a `bank_account_exists` error if you try to create a duplicate bank
# account. You may wish to handle this by updating the existing record
# instead, the ID of which will be provided as
# `links[customer_bank_account]` in the error response.
#
# _Note:_ To ensure the customer's bank accounts are valid, verify them
# first
# using
#
# [bank_details_lookups](#bank-details-lookups-perform-a-bank-details-lookup),
# before proceeding with creating the accounts
#
# source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#30
class GoCardlessPro::Resources::CustomerBankAccount
  # Initialize a customer_bank_account resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [CustomerBankAccount] a new instance of CustomerBankAccount
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#44
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute account_holder_name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#31
  def account_holder_name; end

  # Returns the value of attribute account_number_ending.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#32
  def account_number_ending; end

  # Returns the value of attribute account_type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#33
  def account_type; end

  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#61
  def api_response; end

  # Returns the value of attribute bank_name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#34
  def bank_name; end

  # Returns the value of attribute country_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#35
  def country_code; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#36
  def created_at; end

  # Returns the value of attribute currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#37
  def currency; end

  # Returns the value of attribute enabled.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#38
  def enabled; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#39
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#66
  def links; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#40
  def metadata; end

  # Provides the customer_bank_account resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#71
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#75
class GoCardlessPro::Resources::CustomerBankAccount::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#76
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/customer_bank_account.rb#80
  def customer; end
end

# Customer Notifications represent the notification which is due to be sent
# to a customer
# after an event has happened. The event, the resource and the customer to
# be notified
# are all identified in the `links` property.
#
# Note that these are ephemeral records - once the notification has been
# actioned in some
# way, it is no longer visible using this API.
#
# <p class="restricted-notice"><strong>Restricted</strong>: This API is
# currently only available for approved integrators - please <a
# href="mailto:help@gocardless.com">get in touch</a> if you would like to
# use this API.</p>
#
# source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#27
class GoCardlessPro::Resources::CustomerNotification
  # Initialize a customer_notification resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [CustomerNotification] a new instance of CustomerNotification
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#36
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute action_taken.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#28
  def action_taken; end

  # Returns the value of attribute action_taken_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#29
  def action_taken_at; end

  # Returns the value of attribute action_taken_by.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#30
  def action_taken_by; end

  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#48
  def api_response; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#31
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#53
  def links; end

  # Provides the customer_notification resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#58
  def to_h; end

  # Returns the value of attribute type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#32
  def type; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#62
class GoCardlessPro::Resources::CustomerNotification::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#63
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#67
  def customer; end

  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#71
  def event; end

  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#75
  def mandate; end

  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#79
  def payment; end

  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#83
  def refund; end

  # source://gocardless_pro//lib/gocardless_pro/resources/customer_notification.rb#87
  def subscription; end
end

# Events are stored for all webhooks. An event refers to a resource which
# has been updated, for example a payment which has been collected, or a
# mandate which has been transferred. Event creation is an asynchronous
# process, so it can take some time between an action occurring and its
# corresponding event getting included in API responses. See
# [here](#event-actions) for a complete list of event types.
#
# source://gocardless_pro//lib/gocardless_pro/resources/event.rb#19
class GoCardlessPro::Resources::Event
  # Initialize a event resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Event] a new instance of Event
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#31
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute action.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#20
  def action; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#46
  def api_response; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#21
  def created_at; end

  # Returns the value of attribute customer_notifications.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#22
  def customer_notifications; end

  # Returns the value of attribute details.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#23
  def details; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#24
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#51
  def links; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#25
  def metadata; end

  # Returns the value of attribute resource_metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#26
  def resource_metadata; end

  # Returns the value of attribute resource_type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#27
  def resource_type; end

  # Provides the event resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#56
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/event.rb#60
class GoCardlessPro::Resources::Event::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#61
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#65
  def bank_authorisation; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#69
  def billing_request; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#73
  def billing_request_flow; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#77
  def creditor; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#81
  def customer; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#85
  def customer_bank_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#89
  def instalment_schedule; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#93
  def mandate; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#97
  def mandate_request_mandate; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#101
  def new_customer_bank_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#105
  def new_mandate; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#109
  def organisation; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#113
  def parent_event; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#117
  def payer_authorisation; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#121
  def payment; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#125
  def payment_request_payment; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#129
  def payout; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#133
  def previous_customer_bank_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#137
  def refund; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#141
  def scheme_identifier; end

  # source://gocardless_pro//lib/gocardless_pro/resources/event.rb#145
  def subscription; end
end

# File-based exports of data
#
# source://gocardless_pro//lib/gocardless_pro/resources/export.rb#14
class GoCardlessPro::Resources::Export
  # Initialize a export resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Export] a new instance of Export
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/export.rb#23
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/export.rb#34
  def api_response; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/export.rb#15
  def created_at; end

  # Returns the value of attribute currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/export.rb#16
  def currency; end

  # Returns the value of attribute download_url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/export.rb#17
  def download_url; end

  # Returns the value of attribute export_type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/export.rb#18
  def export_type; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/export.rb#19
  def id; end

  # Provides the export resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/export.rb#39
  def to_h; end
end

# Instalment schedules are objects which represent a collection of related
# payments, with the
# intention to collect the `total_amount` specified. The API supports both
# schedule-based
# creation (similar to subscriptions) as well as explicit selection of
# differing payment
# amounts and charge dates.
#
# Unlike subscriptions, the payments are created immediately, so the
# instalment schedule
# cannot be modified once submitted and instead can only be cancelled (which
# will cancel
# any of the payments which have not yet been submitted).
#
# Customers will receive a single notification about the complete schedule
# of collection.
#
# source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#30
class GoCardlessPro::Resources::InstalmentSchedule
  # Initialize a instalment_schedule resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [InstalmentSchedule] a new instance of InstalmentSchedule
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#42
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#57
  def api_response; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#31
  def created_at; end

  # Returns the value of attribute currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#32
  def currency; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#33
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#62
  def links; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#34
  def metadata; end

  # Returns the value of attribute name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#35
  def name; end

  # Returns the value of attribute payment_errors.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#36
  def payment_errors; end

  # Returns the value of attribute status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#37
  def status; end

  # Provides the instalment_schedule resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#67
  def to_h; end

  # Returns the value of attribute total_amount.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#38
  def total_amount; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#71
class GoCardlessPro::Resources::InstalmentSchedule::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#72
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#76
  def customer; end

  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#80
  def mandate; end

  # source://gocardless_pro//lib/gocardless_pro/resources/instalment_schedule.rb#84
  def payments; end
end

# Institutions that are supported when creating [Bank
# Authorisations](#billing-requests-bank-authorisations) for a particular
# country or purpose.
#
# Not all institutions support both Payment Initiation (PIS) and Account
# Information (AIS) services.
#
# source://gocardless_pro//lib/gocardless_pro/resources/institution.rb#19
class GoCardlessPro::Resources::Institution
  # Initialize a institution resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Institution] a new instance of Institution
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/institution.rb#29
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/institution.rb#41
  def api_response; end

  # Returns the value of attribute autocompletes_collect_bank_account.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/institution.rb#20
  def autocompletes_collect_bank_account; end

  # Returns the value of attribute country_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/institution.rb#21
  def country_code; end

  # Returns the value of attribute icon_url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/institution.rb#22
  def icon_url; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/institution.rb#23
  def id; end

  # Returns the value of attribute logo_url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/institution.rb#24
  def logo_url; end

  # Returns the value of attribute name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/institution.rb#25
  def name; end

  # Provides the institution resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/institution.rb#46
  def to_h; end
end

# Logos are image uploads that, when associated with a creditor, are shown
# on the [billing request flow](#billing-requests-billing-request-flows)
# payment pages.
#
# source://gocardless_pro//lib/gocardless_pro/resources/logo.rb#16
class GoCardlessPro::Resources::Logo
  # Initialize a logo resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Logo] a new instance of Logo
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/logo.rb#21
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/logo.rb#28
  def api_response; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/logo.rb#17
  def id; end

  # Provides the logo resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/logo.rb#33
  def to_h; end
end

# Mandates represent the Direct Debit mandate with a
# [customer](#core-endpoints-customers).
#
# GoCardless will notify you via a [webhook](#appendix-webhooks) whenever
# the status of a mandate changes.
#
# source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#18
class GoCardlessPro::Resources::Mandate
  # Initialize a mandate resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Mandate] a new instance of Mandate
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#35
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#55
  def api_response; end

  # Returns the value of attribute authorisation_source.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#19
  def authorisation_source; end

  # Returns the value of attribute consent_parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#20
  def consent_parameters; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#21
  def created_at; end

  # Returns the value of attribute funds_settlement.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#22
  def funds_settlement; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#23
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#60
  def links; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#24
  def metadata; end

  # Returns the value of attribute next_possible_charge_date.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#25
  def next_possible_charge_date; end

  # Returns the value of attribute next_possible_standard_ach_charge_date.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#26
  def next_possible_standard_ach_charge_date; end

  # Returns the value of attribute payments_require_approval.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#27
  def payments_require_approval; end

  # Returns the value of attribute reference.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#28
  def reference; end

  # Returns the value of attribute scheme.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#29
  def scheme; end

  # Returns the value of attribute status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#30
  def status; end

  # Provides the mandate resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#65
  def to_h; end

  # Returns the value of attribute verified_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#31
  def verified_at; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#69
class GoCardlessPro::Resources::Mandate::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#70
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#74
  def creditor; end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#78
  def customer; end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#82
  def customer_bank_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate.rb#86
  def new_mandate; end
end

# Mandate Imports allow you to migrate existing mandates from other
# providers into the
# GoCardless platform.
#
# The process is as follows:
#
#   1. [Create a mandate
# import](#mandate-imports-create-a-new-mandate-import)
#   2. [Add entries](#mandate-import-entries-add-a-mandate-import-entry) to
# the import
#   3. [Submit](#mandate-imports-submit-a-mandate-import) the import
#   4. Wait until a member of the GoCardless team approves the import, at
# which point the mandates will be created
#   5. [Link up the
# mandates](#mandate-import-entries-list-all-mandate-import-entries) in your
# system
#
# When you add entries to your mandate import, they are not turned into
# actual mandates
# until the mandate import is submitted by you via the API, and then
# processed by a member
# of the GoCardless team. When that happens, a mandate will be created for
# each entry in the import.
#
# We will issue a `mandate_created` webhook for each entry, which will be
# the same as the webhooks
# triggered when [ creating a mandate ](#mandates-create-a-mandate) using
# the mandates API. Once these
# webhooks start arriving, any reconciliation can now be accomplished by
# [checking the current status](#mandate-imports-get-a-mandate-import) of
# the mandate import and
# [linking up the mandates to your
# system](#mandate-import-entries-list-all-mandate-import-entries).
#
# <p class="notice">Note that all Mandate Imports have an upper limit of
# 30,000 entries, so we recommend you split your import into several smaller
# imports if you're planning to exceed this threshold.</p>
#
# <p class="restricted-notice"><strong>Restricted</strong>: This API is
# currently only available for approved integrators - please <a
# href="mailto:help@gocardless.com">get in touch</a> if you would like to
# use this API.</p>
#
# source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#55
class GoCardlessPro::Resources::MandateImport
  # Initialize a mandate_import resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [MandateImport] a new instance of MandateImport
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#63
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#74
  def api_response; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#56
  def created_at; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#57
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#79
  def links; end

  # Returns the value of attribute scheme.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#58
  def scheme; end

  # Returns the value of attribute status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#59
  def status; end

  # Provides the mandate_import resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#84
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#88
class GoCardlessPro::Resources::MandateImport::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#89
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import.rb#93
  def creditor; end
end

# Mandate Import Entries are added to a [Mandate
# Import](#core-endpoints-mandate-imports).
# Each entry corresponds to one mandate to be imported into GoCardless.
#
# To import a mandate you will need:
# <ol>
#   <li>Identifying information about the customer (name/company and
# address)</li>
#   <li>Bank account details, consisting of an account holder name and
#      either an IBAN or <a href="#appendix-local-bank-details">local bank
# details</a></li>
#   <li>Amendment details (SEPA only)</li>
# </ol>
#
# We suggest you provide a `record_identifier` (which is unique within the
# context of a
# single mandate import) to help you to identify mandates that have been
# created once the
# import has been processed by GoCardless. You can
# [list the mandate import
# entries](#mandate-import-entries-list-all-mandate-import-entries),
# match them up in your system using the `record_identifier`, and look at
# the `links`
# fields to find the mandate, customer and customer bank account that have
# been imported.
#
# <p class="restricted-notice"><strong>Restricted</strong>: This API is
# currently only available for approved integrators - please <a
# href="mailto:help@gocardless.com">get in touch</a> if you would like to
# use this API.</p>
#
# source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#43
class GoCardlessPro::Resources::MandateImportEntry
  # Initialize a mandate_import_entry resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [MandateImportEntry] a new instance of MandateImportEntry
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#49
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#58
  def api_response; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#44
  def created_at; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#63
  def links; end

  # Returns the value of attribute record_identifier.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#45
  def record_identifier; end

  # Provides the mandate_import_entry resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#68
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#72
class GoCardlessPro::Resources::MandateImportEntry::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#73
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#77
  def customer; end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#81
  def customer_bank_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#85
  def mandate; end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_import_entry.rb#89
  def mandate_import; end
end

# Mandate PDFs allow you to easily display [scheme-rules
# compliant](#appendix-compliance-requirements) Direct Debit mandates to
# your customers.
#
# source://gocardless_pro//lib/gocardless_pro/resources/mandate_pdf.rb#16
class GoCardlessPro::Resources::MandatePdf
  # Initialize a mandate_pdf resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [MandatePdf] a new instance of MandatePdf
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_pdf.rb#22
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_pdf.rb#30
  def api_response; end

  # Returns the value of attribute expires_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_pdf.rb#17
  def expires_at; end

  # Provides the mandate_pdf resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_pdf.rb#35
  def to_h; end

  # Returns the value of attribute url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/mandate_pdf.rb#18
  def url; end
end

# The negative balance limit is a threshold for the creditor balance beyond
# which refunds are not permitted. The default limit is zero â refunds are
# not permitted if the creditor has a negative balance. The limit can be
# changed on a per-creditor basis.
#
# source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#18
class GoCardlessPro::Resources::NegativeBalanceLimit
  # Initialize a negative_balance_limit resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [NegativeBalanceLimit] a new instance of NegativeBalanceLimit
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#26
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#37
  def api_response; end

  # Returns the value of attribute balance_limit.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#19
  def balance_limit; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#20
  def created_at; end

  # Returns the value of attribute currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#21
  def currency; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#22
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#42
  def links; end

  # Provides the negative_balance_limit resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#47
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#51
class GoCardlessPro::Resources::NegativeBalanceLimit::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#52
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#56
  def creator_user; end

  # source://gocardless_pro//lib/gocardless_pro/resources/negative_balance_limit.rb#60
  def creditor; end
end

# <p class="restricted-notice">
#   Don't use Payer Authorisations for new integrations.
#   It is deprecated in favour of
#   <a
# href="https://developer.gocardless.com/getting-started/billing-requests/overview/">
#   Billing Requests</a>. Use Billing Requests to build any future
# integrations.
# </p>
#
# Payer Authorisation resource acts as a wrapper for creating customer, bank
# account and mandate details in a single request.
# PayerAuthorisation API enables the integrators to build their own custom
# payment pages.
#
# The process to use the Payer Authorisation API is as follows:
#
#   1. Create a Payer Authorisation, either empty or with already available
# information
#   2. Update the authorisation with additional information or fix any
# mistakes
#   3. Submit the authorisation, after the payer has reviewed their
# information
#   4. [coming soon] Redirect the payer to the verification mechanisms from
# the response of the Submit request (this will be introduced as a
# non-breaking change)
#   5. Confirm the authorisation to indicate that the resources can be
# created
#
# After the Payer Authorisation is confirmed, resources will eventually be
# created as it's an asynchronous process.
#
# To retrieve the status and ID of the linked resources you can do one of
# the following:
# <ol>
#   <li> Listen to <code>  payer_authorisation_completed </code>  <a
# href="#appendix-webhooks"> webhook</a> (recommended)</li>
#   <li> Poll the GET <a
# href="#payer-authorisations-get-a-single-payer-authorisation">
# endpoint</a></li>
#   <li> Poll the GET events API
# <code>https://api.gocardless.com/events?payer_authorisation={id}&action=completed</code>
# </li>
# </ol>
#
# <p class="notice">
#   Note that the `create` and `update` endpoints behave differently than
#   other existing `create` and `update` endpoints. The Payer Authorisation
# is still saved if incomplete data is provided.
#   We return the list of incomplete data in the `incomplete_fields` along
# with the resources in the body of the response.
#   The bank account details(account_number, bank_code & branch_code) must
# be sent together rather than splitting across different request for both
# `create` and `update` endpoints.
#   <br><br>
#   The API is designed to be flexible and allows you to collect information
# in multiple steps without storing any sensitive data in the browser or in
# your servers.
# </p>
#
# source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#71
class GoCardlessPro::Resources::PayerAuthorisation
  # Initialize a payer_authorisation resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [PayerAuthorisation] a new instance of PayerAuthorisation
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#82
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#96
  def api_response; end

  # Returns the value of attribute bank_account.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#72
  def bank_account; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#73
  def created_at; end

  # Returns the value of attribute customer.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#74
  def customer; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#75
  def id; end

  # Returns the value of attribute incomplete_fields.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#76
  def incomplete_fields; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#101
  def links; end

  # Returns the value of attribute mandate.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#77
  def mandate; end

  # Returns the value of attribute status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#78
  def status; end

  # Provides the payer_authorisation resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#106
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#110
class GoCardlessPro::Resources::PayerAuthorisation::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#111
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#115
  def bank_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#119
  def customer; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payer_authorisation.rb#123
  def mandate; end
end

# Custom colour themes for payment pages and customer notifications.
#
# source://gocardless_pro//lib/gocardless_pro/resources/payer_theme.rb#14
class GoCardlessPro::Resources::PayerTheme
  # Initialize a payer_theme resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [PayerTheme] a new instance of PayerTheme
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_theme.rb#19
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/payer_theme.rb#26
  def api_response; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_theme.rb#15
  def id; end

  # Provides the payer_theme resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payer_theme.rb#31
  def to_h; end
end

# Payment objects represent payments from a
# [customer](#core-endpoints-customers) to a
# [creditor](#core-endpoints-creditors), taken against a Direct Debit
# [mandate](#core-endpoints-mandates).
#
# GoCardless will notify you via a [webhook](#appendix-webhooks) whenever
# the state of a payment changes.
#
# source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#20
class GoCardlessPro::Resources::Payment
  # Initialize a payment resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Payment] a new instance of Payment
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#37
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute amount.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#21
  def amount; end

  # Returns the value of attribute amount_refunded.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#22
  def amount_refunded; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#57
  def api_response; end

  # Returns the value of attribute charge_date.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#23
  def charge_date; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#24
  def created_at; end

  # Returns the value of attribute currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#25
  def currency; end

  # Returns the value of attribute description.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#26
  def description; end

  # Returns the value of attribute faster_ach.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#27
  def faster_ach; end

  # Returns the value of attribute fx.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#28
  def fx; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#29
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#62
  def links; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#30
  def metadata; end

  # Returns the value of attribute reference.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#31
  def reference; end

  # Returns the value of attribute retry_if_possible.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#32
  def retry_if_possible; end

  # Returns the value of attribute status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#33
  def status; end

  # Provides the payment resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#67
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#71
class GoCardlessPro::Resources::Payment::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#72
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#76
  def creditor; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#80
  def instalment_schedule; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#84
  def mandate; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#88
  def payout; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payment.rb#92
  def subscription; end
end

# Payouts represent transfers from GoCardless to a
# [creditor](#core-endpoints-creditors). Each payout contains the funds
# collected from one or many [payments](#core-endpoints-payments). All the
# payments in a payout will have been collected in the same currency.
# Payouts are created automatically after a payment has been successfully
# collected.
#
# source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#19
class GoCardlessPro::Resources::Payout
  # Initialize a payout resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Payout] a new instance of Payout
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#35
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute amount.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#20
  def amount; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#54
  def api_response; end

  # Returns the value of attribute arrival_date.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#21
  def arrival_date; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#22
  def created_at; end

  # Returns the value of attribute currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#23
  def currency; end

  # Returns the value of attribute deducted_fees.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#24
  def deducted_fees; end

  # Returns the value of attribute fx.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#25
  def fx; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#26
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#59
  def links; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#27
  def metadata; end

  # Returns the value of attribute payout_type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#28
  def payout_type; end

  # Returns the value of attribute reference.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#29
  def reference; end

  # Returns the value of attribute status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#30
  def status; end

  # Returns the value of attribute tax_currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#31
  def tax_currency; end

  # Provides the payout resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#64
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#68
class GoCardlessPro::Resources::Payout::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#69
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#73
  def creditor; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payout.rb#77
  def creditor_bank_account; end
end

# When we collect a payment on your behalf, we add the money you've
# collected to your
# GoCardless balance, minus any fees paid. Periodically (usually every
# working day),
# we take any positive balance in your GoCardless account, and pay it out to
# your
# nominated bank account.
#
# Other actions in your GoCardless account can also affect your balance. For
# example,
# if a customer charges back a payment, we'll deduct the payment's amount
# from your
# balance, but add any fees you paid for that payment back to your balance.
#
# The Payout Items API allows you to view, on a per-payout basis, the credit
# and debit
# items that make up that payout's amount.  Payout items can only be
# retrieved for payouts
# created in the last 6 months. Requests for older payouts will return an
# HTTP status
# <code>410 Gone</code>.
#
# source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#35
class GoCardlessPro::Resources::PayoutItem
  # Initialize a payout_item resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [PayoutItem] a new instance of PayoutItem
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#42
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute amount.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#36
  def amount; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#52
  def api_response; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#57
  def links; end

  # Returns the value of attribute taxes.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#37
  def taxes; end

  # Provides the payout_item resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#62
  def to_h; end

  # Returns the value of attribute type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#38
  def type; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#66
class GoCardlessPro::Resources::PayoutItem::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#67
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#71
  def mandate; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#75
  def payment; end

  # source://gocardless_pro//lib/gocardless_pro/resources/payout_item.rb#79
  def refund; end
end

# <p class="deprecated-notice"><strong>Deprecated</strong>: Redirect Flows
# are legacy APIs and cannot be used by new integrators.
#     The [Billing Request flow](#billing-requests) API should be used for
# your payment flows.</p>
#
# Redirect flows enable you to use GoCardless' [hosted payment
# pages](https://pay-sandbox.gocardless.com/AL000000AKFPFF) to set up
# mandates with your customers. These pages are fully compliant and have
# been translated into Danish, Dutch, French, German, Italian, Norwegian,
# Portuguese, Slovak, Spanish and Swedish.
#
# The overall flow is:
#
# 1. You [create](#redirect-flows-create-a-redirect-flow) a redirect flow
# for your customer, and redirect them to the returned redirect url, e.g.
# `https://pay.gocardless.com/flow/RE123`.
#
# 2. Your customer supplies their name, email, address, and bank account
# details, and submits the form. This securely stores their details, and
# redirects them back to your `success_redirect_url` with
# `redirect_flow_id=RE123` in the querystring.
#
# 3. You [complete](#redirect-flows-complete-a-redirect-flow) the redirect
# flow, which creates a [customer](#core-endpoints-customers), [customer
# bank account](#core-endpoints-customer-bank-accounts), and
# [mandate](#core-endpoints-mandates), and returns the ID of the mandate.
# You may wish to create a [subscription](#core-endpoints-subscriptions) or
# [payment](#core-endpoints-payments) at this point.
#
# Once you have [completed](#redirect-flows-complete-a-redirect-flow) the
# redirect flow via the API, you should display a confirmation page to your
# customer, confirming that their Direct Debit has been set up. You can
# build your own page, or redirect to the one we provide in the
# `confirmation_url` attribute of the redirect flow.
#
# Redirect flows expire 30 minutes after they are first created. You cannot
# complete an expired redirect flow. For an integrator this is shorter and
# they will expire after 10 minutes.
#
# source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#51
class GoCardlessPro::Resources::RedirectFlow
  # Initialize a redirect_flow resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [RedirectFlow] a new instance of RedirectFlow
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#65
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#82
  def api_response; end

  # Returns the value of attribute confirmation_url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#52
  def confirmation_url; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#53
  def created_at; end

  # Returns the value of attribute description.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#54
  def description; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#55
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#87
  def links; end

  # Returns the value of attribute mandate_reference.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#56
  def mandate_reference; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#57
  def metadata; end

  # Returns the value of attribute redirect_url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#58
  def redirect_url; end

  # Returns the value of attribute scheme.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#59
  def scheme; end

  # Returns the value of attribute session_token.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#60
  def session_token; end

  # Returns the value of attribute success_redirect_url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#61
  def success_redirect_url; end

  # Provides the redirect_flow resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#92
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#96
class GoCardlessPro::Resources::RedirectFlow::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#97
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#101
  def billing_request; end

  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#105
  def creditor; end

  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#109
  def customer; end

  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#113
  def customer_bank_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/redirect_flow.rb#117
  def mandate; end
end

# Refund objects represent (partial) refunds of a
# [payment](#core-endpoints-payments) back to the
# [customer](#core-endpoints-customers).
#
# GoCardless will notify you via a [webhook](#appendix-webhooks) whenever a
# refund is created, and will update the `amount_refunded` property of the
# payment.
#
# source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#20
class GoCardlessPro::Resources::Refund
  # Initialize a refund resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Refund] a new instance of Refund
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#32
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute amount.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#21
  def amount; end

  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#47
  def api_response; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#22
  def created_at; end

  # Returns the value of attribute currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#23
  def currency; end

  # Returns the value of attribute fx.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#24
  def fx; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#25
  def id; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#52
  def links; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#26
  def metadata; end

  # Returns the value of attribute reference.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#27
  def reference; end

  # Returns the value of attribute status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#28
  def status; end

  # Provides the refund resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#57
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#61
class GoCardlessPro::Resources::Refund::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#62
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#66
  def mandate; end

  # source://gocardless_pro//lib/gocardless_pro/resources/refund.rb#70
  def payment; end
end

# Scenario Simulators allow you to manually trigger and test certain paths
# that your
# integration will encounter in the real world. These endpoints are only
# active in the
# sandbox environment.
#
# source://gocardless_pro//lib/gocardless_pro/resources/scenario_simulator.rb#18
class GoCardlessPro::Resources::ScenarioSimulator
  # Initialize a scenario_simulator resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [ScenarioSimulator] a new instance of ScenarioSimulator
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scenario_simulator.rb#23
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/scenario_simulator.rb#30
  def api_response; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scenario_simulator.rb#19
  def id; end

  # Provides the scenario_simulator resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scenario_simulator.rb#35
  def to_h; end
end

# This represents a scheme identifier (e.g. a SUN in Bacs or a CID in SEPA).
# Scheme identifiers are used to specify the beneficiary name that appears
# on customers' bank statements.
#
# source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#17
class GoCardlessPro::Resources::SchemeIdentifier
  # Initialize a scheme_identifier resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [SchemeIdentifier] a new instance of SchemeIdentifier
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#39
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute address_line1.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#18
  def address_line1; end

  # Returns the value of attribute address_line2.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#19
  def address_line2; end

  # Returns the value of attribute address_line3.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#20
  def address_line3; end

  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#63
  def api_response; end

  # Returns the value of attribute can_specify_mandate_reference.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#21
  def can_specify_mandate_reference; end

  # Returns the value of attribute city.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#22
  def city; end

  # Returns the value of attribute country_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#23
  def country_code; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#24
  def created_at; end

  # Returns the value of attribute currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#25
  def currency; end

  # Returns the value of attribute email.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#26
  def email; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#27
  def id; end

  # Returns the value of attribute minimum_advance_notice.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#28
  def minimum_advance_notice; end

  # Returns the value of attribute name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#29
  def name; end

  # Returns the value of attribute phone_number.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#30
  def phone_number; end

  # Returns the value of attribute postal_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#31
  def postal_code; end

  # Returns the value of attribute reference.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#32
  def reference; end

  # Returns the value of attribute region.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#33
  def region; end

  # Returns the value of attribute scheme.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#34
  def scheme; end

  # Returns the value of attribute status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#35
  def status; end

  # Provides the scheme_identifier resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/scheme_identifier.rb#68
  def to_h; end
end

# Subscriptions create [payments](#core-endpoints-payments) according to a
# schedule.
#
# ### Recurrence Rules
#
# The following rules apply when specifying recurrence:
#
# - If `day_of_month` and `start_date` are not provided `start_date` will be
# the [mandate](#core-endpoints-mandates)'s `next_possible_charge_date` and
# the subscription will then recur based on the `interval` & `interval_unit`
# - If `month` or `day_of_month` are present the following validations
# apply:
#
# | __interval_unit__ | __month__                                      |
# __day_of_month__                           |
# | :---------------- | :--------------------------------------------- |
# :----------------------------------------- |
# | yearly            | optional (required if `day_of_month` provided) |
# optional (invalid if `month` not provided) |
# | monthly           | invalid                                        |
# optional                                   |
# | weekly            | invalid                                        |
# invalid                                    |
#
# Examples:
#
# | __interval_unit__ | __interval__ | __month__ | __day_of_month__ | valid?
#                                             |
# | :---------------- | :----------- | :-------- | :--------------- |
# :------------------------------------------------- |
# | yearly            | 1            | january   | -1               | valid
#                                             |
# | monthly           | 6            |           |                  | valid
#                                             |
# | monthly           | 6            |           | 12               | valid
#                                             |
# | weekly            | 2            |           |                  | valid
#                                             |
# | yearly            | 1            | march     |                  |
# invalid - missing `day_of_month`                   |
# | yearly            | 1            |           | 2                |
# invalid - missing `month`                          |
# | monthly           | 6            | august    | 12               |
# invalid - `month` must be blank                    |
# | weekly            | 2            | october   | 10               |
# invalid - `month` and `day_of_month` must be blank |
#
# ### Rolling dates
#
# When a charge date falls on a non-business day, one of two things will
# happen:
#
# - if the recurrence rule specified `-1` as the `day_of_month`, the charge
# date will be rolled __backwards__ to the previous business day (i.e., the
# last working day of the month).
# - otherwise the charge date will be rolled __forwards__ to the next
# business day.
#
# source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#70
class GoCardlessPro::Resources::Subscription
  # Initialize a subscription resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Subscription] a new instance of Subscription
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#94
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute amount.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#71
  def amount; end

  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#121
  def api_response; end

  # Returns the value of attribute app_fee.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#72
  def app_fee; end

  # Returns the value of attribute count.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#73
  def count; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#74
  def created_at; end

  # Returns the value of attribute currency.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#75
  def currency; end

  # Returns the value of attribute day_of_month.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#76
  def day_of_month; end

  # Returns the value of attribute earliest_charge_date_after_resume.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#77
  def earliest_charge_date_after_resume; end

  # Returns the value of attribute end_date.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#78
  def end_date; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#79
  def id; end

  # Returns the value of attribute interval.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#80
  def interval; end

  # Returns the value of attribute interval_unit.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#81
  def interval_unit; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#126
  def links; end

  # Returns the value of attribute metadata.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#82
  def metadata; end

  # Returns the value of attribute month.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#83
  def month; end

  # Returns the value of attribute name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#84
  def name; end

  # Returns the value of attribute parent_plan_paused.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#85
  def parent_plan_paused; end

  # Returns the value of attribute payment_reference.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#86
  def payment_reference; end

  # Returns the value of attribute retry_if_possible.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#87
  def retry_if_possible; end

  # Returns the value of attribute start_date.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#88
  def start_date; end

  # Returns the value of attribute status.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#89
  def status; end

  # Provides the subscription resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#131
  def to_h; end

  # Returns the value of attribute upcoming_payments.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#90
  def upcoming_payments; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#135
class GoCardlessPro::Resources::Subscription::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#136
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/subscription.rb#140
  def mandate; end
end

# Tax rates from tax authority.
#
# We also maintain a [static list of the tax rates for each
# jurisdiction](#appendix-tax-rates).
#
# source://gocardless_pro//lib/gocardless_pro/resources/tax_rate.rb#17
class GoCardlessPro::Resources::TaxRate
  # Initialize a tax_rate resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [TaxRate] a new instance of TaxRate
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/tax_rate.rb#27
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/tax_rate.rb#39
  def api_response; end

  # Returns the value of attribute end_date.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/tax_rate.rb#18
  def end_date; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/tax_rate.rb#19
  def id; end

  # Returns the value of attribute jurisdiction.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/tax_rate.rb#20
  def jurisdiction; end

  # Returns the value of attribute percentage.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/tax_rate.rb#21
  def percentage; end

  # Returns the value of attribute start_date.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/tax_rate.rb#22
  def start_date; end

  # Provides the tax_rate resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/tax_rate.rb#44
  def to_h; end

  # Returns the value of attribute type.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/tax_rate.rb#23
  def type; end
end

# Mandates that have been transferred using Current Account Switch Service
#
# source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#14
class GoCardlessPro::Resources::TransferredMandate
  # Initialize a transferred_mandate resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [TransferredMandate] a new instance of TransferredMandate
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#21
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#31
  def api_response; end

  # Returns the value of attribute encrypted_customer_bank_details.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#15
  def encrypted_customer_bank_details; end

  # Returns the value of attribute encrypted_decryption_key.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#16
  def encrypted_decryption_key; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#36
  def links; end

  # Returns the value of attribute public_key_id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#17
  def public_key_id; end

  # Provides the transferred_mandate resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#41
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#45
class GoCardlessPro::Resources::TransferredMandate::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#46
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#50
  def customer_bank_account; end

  # source://gocardless_pro//lib/gocardless_pro/resources/transferred_mandate.rb#54
  def mandate; end
end

# Verification details represent any information needed by GoCardless to
# verify a creditor.
#
# <p class="restricted-notice"><strong>Restricted</strong>:
#   These endpoints are restricted to customers who want to collect their
# merchant's
#   verification details and pass them to GoCardless via our API. Please
# [get in
#   touch](mailto:help@gocardless.com) if you wish to enable this feature on
# your
#   account.</p>
#
# source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#24
class GoCardlessPro::Resources::VerificationDetail
  # Initialize a verification_detail resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [VerificationDetail] a new instance of VerificationDetail
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#37
  def initialize(object, response = T.unsafe(nil)); end

  # Returns the value of attribute address_line1.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#25
  def address_line1; end

  # Returns the value of attribute address_line2.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#26
  def address_line2; end

  # Returns the value of attribute address_line3.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#27
  def address_line3; end

  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#53
  def api_response; end

  # Returns the value of attribute city.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#28
  def city; end

  # Returns the value of attribute company_number.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#29
  def company_number; end

  # Returns the value of attribute description.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#30
  def description; end

  # Returns the value of attribute directors.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#31
  def directors; end

  # Return the links that the resource has
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#58
  def links; end

  # Returns the value of attribute name.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#32
  def name; end

  # Returns the value of attribute postal_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#33
  def postal_code; end

  # Provides the verification_detail resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#63
  def to_h; end
end

# source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#67
class GoCardlessPro::Resources::VerificationDetail::Links
  # @return [Links] a new instance of Links
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#68
  def initialize(links); end

  # source://gocardless_pro//lib/gocardless_pro/resources/verification_detail.rb#72
  def creditor; end
end

# Basic description of a webhook
#
# source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#14
class GoCardlessPro::Resources::Webhook
  # Initialize a webhook resource instance
  #
  # @param object [Hash] an object returned from the API
  # @return [Webhook] a new instance of Webhook
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#31
  def initialize(object, response = T.unsafe(nil)); end

  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#50
  def api_response; end

  # Returns the value of attribute created_at.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#15
  def created_at; end

  # Returns the value of attribute id.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#16
  def id; end

  # Returns the value of attribute is_test.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#17
  def is_test; end

  # Returns the value of attribute request_body.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#18
  def request_body; end

  # Returns the value of attribute request_headers.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#19
  def request_headers; end

  # Returns the value of attribute response_body.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#20
  def response_body; end

  # Returns the value of attribute response_body_truncated.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#21
  def response_body_truncated; end

  # Returns the value of attribute response_code.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#22
  def response_code; end

  # Returns the value of attribute response_headers.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#23
  def response_headers; end

  # Returns the value of attribute response_headers_content_truncated.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#24
  def response_headers_content_truncated; end

  # Returns the value of attribute response_headers_count_truncated.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#25
  def response_headers_count_truncated; end

  # Returns the value of attribute successful.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#26
  def successful; end

  # Provides the webhook resource as a hash of all its readable attributes
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#55
  def to_h; end

  # Returns the value of attribute url.
  #
  # source://gocardless_pro//lib/gocardless_pro/resources/webhook.rb#27
  def url; end
end

# A class to wrap an API response
#
# source://gocardless_pro//lib/gocardless_pro/response.rb#3
class GoCardlessPro::Response
  extend ::Forwardable

  # Initialize a response instance
  #
  # @param response an API response
  # @return [Response] a new instance of Response
  #
  # source://gocardless_pro//lib/gocardless_pro/response.rb#11
  def initialize(response); end

  # Return the body of parsed JSON body of the API response
  #
  # source://gocardless_pro//lib/gocardless_pro/response.rb#16
  def body; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def headers(*args, **_arg1, &block); end

  # Returns the limit parameter from the response
  #
  # source://gocardless_pro//lib/gocardless_pro/response.rb#26
  def limit; end

  # Returns the meta hash of the response
  #
  # source://gocardless_pro//lib/gocardless_pro/response.rb#21
  def meta; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def status_code(*args, **_arg1, &block); end
end

# Module that contains all services for making requests to the API.
#
# source://gocardless_pro//lib/gocardless_pro/services/base_service.rb#5
module GoCardlessPro::Services; end

# Service for making requests to the BankAuthorisation endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/bank_authorisations_service.rb#12
class GoCardlessPro::Services::BankAuthorisationsService < ::GoCardlessPro::Services::BaseService
  # Create a Bank Authorisation.
  # Example URL: /bank_authorisations
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/bank_authorisations_service.rb#16
  def create(options = T.unsafe(nil)); end

  # Get a single bank authorisation.
  # Example URL: /bank_authorisations/:identity
  #
  # @param identity # Unique identifier, beginning with "BAU".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/bank_authorisations_service.rb#53
  def get(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/bank_authorisations_service.rb#77
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/bank_authorisations_service.rb#72
  def unenvelope_body(body); end
end

# Service for making requests to the BankDetailsLookup endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/bank_details_lookups_service.rb#12
class GoCardlessPro::Services::BankDetailsLookupsService < ::GoCardlessPro::Services::BaseService
  # Performs a bank details lookup. As part of the lookup, a modulus check and
  # reachability check are performed.
  #
  # For UK-based bank accounts, where an account holder name is provided (and an
  # account number, a sort code or an iban
  # are already present), we verify that the account holder name and bank account
  # number match the details held by
  # the relevant bank.
  #
  # If your request returns an [error](#api-usage-errors) or the
  # `available_debit_schemes`
  # attribute is an empty array, you will not be able to collect payments from the
  # specified bank account. GoCardless may be able to collect payments from an
  # account
  # even if no `bic` is returned.
  #
  # Bank account details may be supplied using [local
  # details](#appendix-local-bank-details) or an IBAN.
  #
  # _ACH scheme_ For compliance reasons, an extra validation step is done using
  # a third-party provider to make sure the customer's bank account can accept
  # Direct Debit. If a bank account is discovered to be closed or invalid, the
  # customer is requested to adjust the account number/routing number and
  # succeed in this check to continue with the flow.
  #
  # _Note:_ Usage of this endpoint is monitored. If your organisation relies on
  # GoCardless for
  # modulus or reachability checking but not for payment collection, please get in
  # touch.
  # Example URL: /bank_details_lookups
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/bank_details_lookups_service.rb#44
  def create(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/bank_details_lookups_service.rb#70
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/bank_details_lookups_service.rb#65
  def unenvelope_body(body); end
end

# Base Service that all services inherit from.
#
# source://gocardless_pro//lib/gocardless_pro/services/base_service.rb#7
class GoCardlessPro::Services::BaseService
  # Create a new service instance to make requests against
  #
  # @param api_service [GoCardlessPro::ApiService] }] an instance of the ApiService
  # @return [BaseService] a new instance of BaseService
  #
  # source://gocardless_pro//lib/gocardless_pro/services/base_service.rb#11
  def initialize(api_service); end

  # Get the envelope key for the given service. Children are expected to implement this method.
  #
  # @raise [NotImplementedError]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/base_service.rb#25
  def envelope_key; end

  # Make a request to the API using the API service instance
  #
  # @param method [Symbol] the method to use to make the request
  # @param path [String] the URL (without the base domain) to make the request to
  # @param options [Hash] the options hash - either the query parameters for a GET, or the body if POST/PUT
  #
  # source://gocardless_pro//lib/gocardless_pro/services/base_service.rb#20
  def make_request(method, path, options = T.unsafe(nil)); end

  # take a URL with placeholder params and substitute them out for the actual value
  #
  # @param url [String] the URL with placeholders in
  # @param param_map [Hash] a hash of placeholders and their actual values (which will be escaped)
  #
  # source://gocardless_pro//lib/gocardless_pro/services/base_service.rb#32
  def sub_url(url, param_map); end
end

# Service for making requests to the BillingRequestFlow endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/billing_request_flows_service.rb#12
class GoCardlessPro::Services::BillingRequestFlowsService < ::GoCardlessPro::Services::BaseService
  # Creates a new billing request flow.
  # Example URL: /billing_request_flows
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_flows_service.rb#16
  def create(options = T.unsafe(nil)); end

  # Returns the flow having generated a fresh session token which can be used to
  # power
  # integrations that manipulate the flow.
  # Example URL: /billing_request_flows/:identity/actions/initialise
  #
  # @param identity # Unique identifier, beginning with "BRF".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_flows_service.rb#39
  def initialise(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_flows_service.rb#67
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_flows_service.rb#62
  def unenvelope_body(body); end
end

# Service for making requests to the BillingRequestTemplate endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/billing_request_templates_service.rb#12
class GoCardlessPro::Services::BillingRequestTemplatesService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_templates_service.rb#35
  def all(options = T.unsafe(nil)); end

  # Example URL: /billing_request_templates
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_templates_service.rb#64
  def create(options = T.unsafe(nil)); end

  # Fetches a Billing Request Template
  # Example URL: /billing_request_templates/:identity
  #
  # @param identity # Unique identifier, beginning with "BRT".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_templates_service.rb#47
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # Billing Request Templates.
  # Example URL: /billing_request_templates
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_templates_service.rb#17
  def list(options = T.unsafe(nil)); end

  # Updates a Billing Request Template, which will affect all future Billing
  # Requests created by this template.
  # Example URL: /billing_request_templates/:identity
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_templates_service.rb#102
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_templates_service.rb#130
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_request_templates_service.rb#125
  def unenvelope_body(body); end
end

# Service for making requests to the BillingRequest endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#12
class GoCardlessPro::Services::BillingRequestsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#300
  def all(options = T.unsafe(nil)); end

  # Immediately cancels a billing request, causing all billing request flows
  # to expire.
  # Example URL: /billing_requests/:identity/actions/cancel
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#244
  def cancel(identity, options = T.unsafe(nil)); end

  # This will allow for the updating of the currency and subsequently the scheme
  # if
  # needed for a Billing Request. This will only be available for mandate only
  # flows
  # which do not have the lock_currency flag set to true on the Billing Request
  # Flow. It
  # will also not support any request which has a payments request.
  # Example URL: /billing_requests/:identity/actions/choose_currency
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#421
  def choose_currency(identity, options = T.unsafe(nil)); end

  # If the billing request has a pending
  # <code>collect_bank_account</code> action, this endpoint can be
  # used to collect the details in order to complete it.
  #
  # The endpoint takes the same payload as Customer Bank Accounts, but check
  # the bank account is valid for the billing request scheme before creating
  # and attaching it.
  #
  # If the scheme is PayTo and the pay_id is available, this can be included in
  # the payload along with the
  # country_code.
  #
  # _ACH scheme_ For compliance reasons, an extra validation step is done using
  # a third-party provider to make sure the customer's bank account can accept
  # Direct Debit. If a bank account is discovered to be closed or invalid, the
  # customer is requested to adjust the account number/routing number and
  # succeed in this check to continue with the flow.
  #
  # _BACS scheme_ [Payer Name
  # Verification](https://hub.gocardless.com/s/article/Introduction-to-Payer-Name-Verification?language=en_GB)
  # is enabled by default for UK based bank accounts, meaning we verify the
  # account holder name and bank account
  # number match the details held by the relevant bank.
  # Example URL: /billing_requests/:identity/actions/collect_bank_account
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#123
  def collect_bank_account(identity, options = T.unsafe(nil)); end

  # If the billing request has a pending <code>collect_customer_details</code>
  # action, this endpoint can be used to collect the details in order to
  # complete it.
  #
  # The endpoint takes the same payload as Customers, but checks that the
  # customer fields are populated correctly for the billing request scheme.
  #
  # Whatever is provided to this endpoint is used to update the referenced
  # customer, and will take effect immediately after the request is
  # successful.
  # Example URL: /billing_requests/:identity/actions/collect_customer_details
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#62
  def collect_customer_details(identity, options = T.unsafe(nil)); end

  # This is needed when you have a mandate request. As a scheme compliance rule we
  # are required to
  # allow the payer to crosscheck the details entered by them and confirm it.
  # Example URL: /billing_requests/:identity/actions/confirm_payer_details
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#164
  def confirm_payer_details(identity, options = T.unsafe(nil)); end

  # Example URL: /billing_requests
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#16
  def create(options = T.unsafe(nil)); end

  # Triggers a fallback from the open-banking flow to direct debit. Note, the
  # billing request must have fallback enabled.
  # Example URL: /billing_requests/:identity/actions/fallback
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#376
  def fallback(identity, options = T.unsafe(nil)); end

  # If a billing request is ready to be fulfilled, call this endpoint to cause
  # it to fulfil, executing the payment.
  # Example URL: /billing_requests/:identity/actions/fulfil
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#204
  def fulfil(identity, options = T.unsafe(nil)); end

  # Fetches a billing request
  # Example URL: /billing_requests/:identity
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#312
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # billing requests.
  # Example URL: /billing_requests
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#282
  def list(options = T.unsafe(nil)); end

  # Notifies the customer linked to the billing request, asking them to authorise
  # it.
  # Currently, the customer can only be notified by email.
  #
  # This endpoint is currently supported only for Instant Bank Pay Billing
  # Requests.
  # Example URL: /billing_requests/:identity/actions/notify
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#336
  def notify(identity, options = T.unsafe(nil)); end

  # Creates an Institution object and attaches it to the Billing Request
  # Example URL: /billing_requests/:identity/actions/select_institution
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#460
  def select_institution(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#504
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/billing_requests_service.rb#499
  def unenvelope_body(body); end
end

# Service for making requests to the Block endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/blocks_service.rb#12
class GoCardlessPro::Services::BlocksService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/blocks_service.rb#89
  def all(options = T.unsafe(nil)); end

  # Creates new blocks for a given reference. By default blocks will be active.
  # Returns 201 if at least one block was created. Returns 200 if there were no
  # new
  # blocks created.
  # Example URL: /blocks/block_by_ref
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/blocks_service.rb#180
  def block_by_ref(options = T.unsafe(nil)); end

  # Creates a new Block of a given type. By default it will be active.
  # Example URL: /blocks
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/blocks_service.rb#16
  def create(options = T.unsafe(nil)); end

  # Disables a block so that it no longer will prevent mandate creation.
  # Example URL: /blocks/:identity/actions/disable
  #
  # @param identity # Unique identifier, beginning with "BLC".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/blocks_service.rb#101
  def disable(identity, options = T.unsafe(nil)); end

  # Enables a previously disabled block so that it will prevent mandate creation
  # Example URL: /blocks/:identity/actions/enable
  #
  # @param identity # Unique identifier, beginning with "BLC".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/blocks_service.rb#140
  def enable(identity, options = T.unsafe(nil)); end

  # Retrieves the details of an existing block.
  # Example URL: /blocks/:identity
  #
  # @param identity # Unique identifier, beginning with "BLC".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/blocks_service.rb#53
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # blocks.
  # Example URL: /blocks
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/blocks_service.rb#71
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/blocks_service.rb#224
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/blocks_service.rb#219
  def unenvelope_body(body); end
end

# Service for making requests to the CreditorBankAccount endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/creditor_bank_accounts_service.rb#12
class GoCardlessPro::Services::CreditorBankAccountsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditor_bank_accounts_service.rb#70
  def all(options = T.unsafe(nil)); end

  # Creates a new creditor bank account object.
  # Example URL: /creditor_bank_accounts
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditor_bank_accounts_service.rb#16
  def create(options = T.unsafe(nil)); end

  # Immediately disables the bank account, no money can be paid out to a disabled
  # account.
  #
  # This will return a `disable_failed` error if the bank account has already been
  # disabled.
  #
  # A disabled bank account can be re-enabled by creating a new bank account
  # resource with the same details.
  # Example URL: /creditor_bank_accounts/:identity/actions/disable
  #
  # @param identity # Unique identifier, beginning with "BA".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditor_bank_accounts_service.rb#108
  def disable(identity, options = T.unsafe(nil)); end

  # Retrieves the details of an existing creditor bank account.
  # Example URL: /creditor_bank_accounts/:identity
  #
  # @param identity # Unique identifier, beginning with "BA".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditor_bank_accounts_service.rb#82
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # creditor bank accounts.
  # Example URL: /creditor_bank_accounts
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditor_bank_accounts_service.rb#52
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditor_bank_accounts_service.rb#152
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditor_bank_accounts_service.rb#147
  def unenvelope_body(body); end
end

# Service for making requests to the Creditor endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/creditors_service.rb#12
class GoCardlessPro::Services::CreditorsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditors_service.rb#70
  def all(options = T.unsafe(nil)); end

  # Creates a new creditor.
  # Example URL: /creditors
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditors_service.rb#16
  def create(options = T.unsafe(nil)); end

  # Retrieves the details of an existing creditor.
  # Example URL: /creditors/:identity
  #
  # @param identity # Unique identifier, beginning with "CR".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditors_service.rb#82
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # creditors.
  # Example URL: /creditors
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditors_service.rb#52
  def list(options = T.unsafe(nil)); end

  # Updates a creditor object. Supports all of the fields supported when creating
  # a creditor.
  # Example URL: /creditors/:identity
  #
  # @param identity # Unique identifier, beginning with "CR".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditors_service.rb#102
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditors_service.rb#130
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/creditors_service.rb#125
  def unenvelope_body(body); end
end

# Service for making requests to the CurrencyExchangeRate endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/currency_exchange_rates_service.rb#12
class GoCardlessPro::Services::CurrencyExchangeRatesService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/currency_exchange_rates_service.rb#35
  def all(options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of all
  # exchange rates.
  # Example URL: /currency_exchange_rates
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/currency_exchange_rates_service.rb#17
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/currency_exchange_rates_service.rb#52
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/currency_exchange_rates_service.rb#47
  def unenvelope_body(body); end
end

# Service for making requests to the CustomerBankAccount endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/customer_bank_accounts_service.rb#12
class GoCardlessPro::Services::CustomerBankAccountsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_bank_accounts_service.rb#82
  def all(options = T.unsafe(nil)); end

  # Creates a new customer bank account object.
  #
  # There are three different ways to supply bank account details:
  #
  # - [Local details](#appendix-local-bank-details)
  #
  # - IBAN
  #
  # - [Customer Bank Account
  # Tokens](#javascript-flow-create-a-customer-bank-account-token)
  #
  # For more information on the different fields required in each country, see
  # [local bank details](#appendix-local-bank-details).
  # Example URL: /customer_bank_accounts
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_bank_accounts_service.rb#28
  def create(options = T.unsafe(nil)); end

  # Immediately cancels all associated mandates and cancellable payments.
  #
  # This will return a `disable_failed` error if the bank account has already been
  # disabled.
  #
  # A disabled bank account can be re-enabled by creating a new bank account
  # resource with the same details.
  # Example URL: /customer_bank_accounts/:identity/actions/disable
  #
  # @param identity # Unique identifier, beginning with "BA".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_bank_accounts_service.rb#143
  def disable(identity, options = T.unsafe(nil)); end

  # Retrieves the details of an existing bank account.
  # Example URL: /customer_bank_accounts/:identity
  #
  # @param identity # Unique identifier, beginning with "BA".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_bank_accounts_service.rb#94
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your bank
  # accounts.
  # Example URL: /customer_bank_accounts
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_bank_accounts_service.rb#64
  def list(options = T.unsafe(nil)); end

  # Updates a customer bank account object. Only the metadata parameter is
  # allowed.
  # Example URL: /customer_bank_accounts/:identity
  #
  # @param identity # Unique identifier, beginning with "BA".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_bank_accounts_service.rb#114
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_bank_accounts_service.rb#187
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_bank_accounts_service.rb#182
  def unenvelope_body(body); end
end

# Service for making requests to the CustomerNotification endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/customer_notifications_service.rb#12
class GoCardlessPro::Services::CustomerNotificationsService < ::GoCardlessPro::Services::BaseService
  # "Handling" a notification means that you have sent the notification yourself
  # (and
  # don't want GoCardless to send it).
  # If the notification has already been actioned, or the deadline to notify has
  # passed,
  # this endpoint will return an `already_actioned` error and you should not take
  # further action. This endpoint takes no additional parameters.
  #
  # Example URL: /customer_notifications/:identity/actions/handle
  #
  # @param identity # The id of the notification.
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_notifications_service.rb#25
  def handle(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_notifications_service.rb#53
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customer_notifications_service.rb#48
  def unenvelope_body(body); end
end

# Service for making requests to the Customer endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/customers_service.rb#12
class GoCardlessPro::Services::CustomersService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customers_service.rb#70
  def all(options = T.unsafe(nil)); end

  # Creates a new customer object.
  # Example URL: /customers
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customers_service.rb#16
  def create(options = T.unsafe(nil)); end

  # Retrieves the details of an existing customer.
  # Example URL: /customers/:identity
  #
  # @param identity # Unique identifier, beginning with "CU".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customers_service.rb#82
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # customers.
  # Example URL: /customers
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customers_service.rb#52
  def list(options = T.unsafe(nil)); end

  # Removed customers will not appear in search results or lists of customers (in
  # our API
  # or exports), and it will not be possible to load an individually removed
  # customer by
  # ID.
  #
  # <p class="restricted-notice"><strong>The action of removing a customer cannot
  # be reversed, so please use with care.</strong></p>
  # Example URL: /customers/:identity
  #
  # @param identity # Unique identifier, beginning with "CU".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customers_service.rb#132
  def remove(identity, options = T.unsafe(nil)); end

  # Updates a customer object. Supports all of the fields supported when creating
  # a customer.
  # Example URL: /customers/:identity
  #
  # @param identity # Unique identifier, beginning with "CU".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customers_service.rb#102
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customers_service.rb#156
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/customers_service.rb#151
  def unenvelope_body(body); end
end

# Service for making requests to the Event endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/events_service.rb#12
class GoCardlessPro::Services::EventsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/events_service.rb#35
  def all(options = T.unsafe(nil)); end

  # Retrieves the details of a single event.
  # Example URL: /events/:identity
  #
  # @param identity # Unique identifier, beginning with "EV".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/events_service.rb#47
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # events.
  # Example URL: /events
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/events_service.rb#17
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/events_service.rb#71
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/events_service.rb#66
  def unenvelope_body(body); end
end

# Service for making requests to the Export endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/exports_service.rb#12
class GoCardlessPro::Services::ExportsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/exports_service.rb#53
  def all(options = T.unsafe(nil)); end

  # Returns a single export.
  # Example URL: /exports/:identity
  #
  # @param identity # Unique identifier, beginning with "EX".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/exports_service.rb#18
  def get(identity, options = T.unsafe(nil)); end

  # Returns a list of exports which are available for download.
  # Example URL: /exports
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/exports_service.rb#35
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/exports_service.rb#70
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/exports_service.rb#65
  def unenvelope_body(body); end
end

# Service for making requests to the InstalmentSchedule endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/instalment_schedules_service.rb#12
class GoCardlessPro::Services::InstalmentSchedulesService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/instalment_schedules_service.rb#136
  def all(options = T.unsafe(nil)); end

  # Immediately cancels an instalment schedule; no further payments will be
  # collected for it.
  #
  # This will fail with a `cancellation_failed` error if the instalment schedule
  # is already cancelled or has completed.
  # Example URL: /instalment_schedules/:identity/actions/cancel
  #
  # @param identity # Unique identifier, beginning with "IS".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/instalment_schedules_service.rb#194
  def cancel(identity, options = T.unsafe(nil)); end

  # Creates a new instalment schedule object, along with the associated payments.
  # This
  # API is recommended if you know the specific dates you wish to charge.
  # Otherwise,
  # please check out the [scheduling
  # version](#instalment-schedules-create-with-schedule).
  #
  # The `instalments` property is an array of payment properties (`amount` and
  # `charge_date`).
  #
  # It can take quite a while to create the associated payments, so the API will
  # return
  # the status as `pending` initially. When processing has completed, a subsequent
  # GET
  # request for the instalment schedule will either have the status `success` and
  # link
  # to the created payments, or the status `error` and detailed information about
  # the
  # failures.
  # Example URL: /instalment_schedules
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/instalment_schedules_service.rb#34
  def create_with_dates(options = T.unsafe(nil)); end

  # Creates a new instalment schedule object, along with the associated payments.
  # This
  # API is recommended if you wish to use the GoCardless scheduling logic. For
  # finer
  # control over the individual dates, please check out the [alternative
  # version](#instalment-schedules-create-with-dates).
  #
  # It can take quite a while to create the associated payments, so the API will
  # return
  # the status as `pending` initially. When processing has completed, a subsequent
  # GET request for the instalment schedule will either have the status `success`
  # and link to
  # the created payments, or the status `error` and detailed information about the
  # failures.
  # Example URL: /instalment_schedules
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/instalment_schedules_service.rb#82
  def create_with_schedule(options = T.unsafe(nil)); end

  # Retrieves the details of an existing instalment schedule.
  # Example URL: /instalment_schedules/:identity
  #
  # @param identity # Unique identifier, beginning with "IS".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/instalment_schedules_service.rb#148
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # instalment schedules.
  # Example URL: /instalment_schedules
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/instalment_schedules_service.rb#118
  def list(options = T.unsafe(nil)); end

  # Updates an instalment schedule. This accepts only the metadata parameter.
  # Example URL: /instalment_schedules/:identity
  #
  # @param identity # Unique identifier, beginning with "IS".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/instalment_schedules_service.rb#167
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/instalment_schedules_service.rb#238
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/instalment_schedules_service.rb#233
  def unenvelope_body(body); end
end

# Service for making requests to the Institution endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/institutions_service.rb#12
class GoCardlessPro::Services::InstitutionsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/institutions_service.rb#34
  def all(options = T.unsafe(nil)); end

  # Returns a list of supported institutions.
  # Example URL: /institutions
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/institutions_service.rb#16
  def list(options = T.unsafe(nil)); end

  # Returns all institutions valid for a Billing Request.
  #
  # This endpoint is currently supported only for FasterPayments.
  # Example URL: /billing_requests/:identity/institutions
  #
  # @param identity # Unique identifier, beginning with "BRQ".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/institutions_service.rb#48
  def list_for_billing_request(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/institutions_service.rb#74
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/institutions_service.rb#69
  def unenvelope_body(body); end
end

# Service for making requests to the Logo endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/logos_service.rb#12
class GoCardlessPro::Services::LogosService < ::GoCardlessPro::Services::BaseService
  # Creates a new logo associated with a creditor. If a creditor already has a
  # logo, this will update the existing logo linked to the creditor.
  #
  # We support JPG and PNG formats. Your logo will be scaled to a maximum of 300px
  # by 40px. For more guidance on how to upload logos that will look
  # great across your customer payment page and notification emails see
  # [here](https://developer.gocardless.com/gc-embed/setting-up-branding#tips_for_uploading_your_logo).
  # Example URL: /branding/logos
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/logos_service.rb#22
  def create_for_creditor(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/logos_service.rb#48
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/logos_service.rb#43
  def unenvelope_body(body); end
end

# Service for making requests to the MandateImportEntry endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/mandate_import_entries_service.rb#12
class GoCardlessPro::Services::MandateImportEntriesService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_import_entries_service.rb#67
  def all(options = T.unsafe(nil)); end

  # For an existing [mandate import](#core-endpoints-mandate-imports), this
  # endpoint can
  # be used to add individual mandates to be imported into GoCardless.
  #
  # You can add no more than 30,000 rows to a single mandate import.
  # If you attempt to go over this limit, the API will return a
  # `record_limit_exceeded` error.
  # Example URL: /mandate_import_entries
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_import_entries_service.rb#22
  def create(options = T.unsafe(nil)); end

  # For an existing mandate import, this endpoint lists all of the entries
  # attached.
  #
  # After a mandate import has been submitted, you can use this endpoint to
  # associate records
  # in your system (using the `record_identifier` that you provided when creating
  # the
  # mandate import).
  #
  # Example URL: /mandate_import_entries
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_import_entries_service.rb#49
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_import_entries_service.rb#84
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_import_entries_service.rb#79
  def unenvelope_body(body); end
end

# Service for making requests to the MandateImport endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/mandate_imports_service.rb#12
class GoCardlessPro::Services::MandateImportsService < ::GoCardlessPro::Services::BaseService
  # Cancels the mandate import, which aborts the import process and stops the
  # mandates
  # being set up in GoCardless. Once the import has been cancelled, it can no
  # longer have
  # entries added to it. Mandate imports which have already been submitted or
  # processed
  # cannot be cancelled.
  # Example URL: /mandate_imports/:identity/actions/cancel
  #
  # @param identity # Unique identifier, beginning with "IM".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_imports_service.rb#131
  def cancel(identity, options = T.unsafe(nil)); end

  # Mandate imports are first created, before mandates are added one-at-a-time, so
  # this endpoint merely signals the start of the import process. Once you've
  # finished
  # adding entries to an import, you should
  # [submit](#mandate-imports-submit-a-mandate-import) it.
  # Example URL: /mandate_imports
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_imports_service.rb#20
  def create(options = T.unsafe(nil)); end

  # Returns a single mandate import.
  # Example URL: /mandate_imports/:identity
  #
  # @param identity # Unique identifier, beginning with "IM".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_imports_service.rb#57
  def get(identity, options = T.unsafe(nil)); end

  # Submits the mandate import, which allows it to be processed by a member of the
  # GoCardless team. Once the import has been submitted, it can no longer have
  # entries
  # added to it.
  #
  # In our sandbox environment, to aid development, we automatically process
  # mandate
  # imports approximately 10 seconds after they are submitted. This will allow you
  # to
  # test both the "submitted" response and wait for the webhook to confirm the
  # processing has begun.
  # Example URL: /mandate_imports/:identity/actions/submit
  #
  # @param identity # Unique identifier, beginning with "IM".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_imports_service.rb#86
  def submit(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_imports_service.rb#175
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_imports_service.rb#170
  def unenvelope_body(body); end
end

# Service for making requests to the MandatePdf endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/mandate_pdfs_service.rb#12
class GoCardlessPro::Services::MandatePdfsService < ::GoCardlessPro::Services::BaseService
  # Generates a PDF mandate and returns its temporary URL.
  #
  # Customer and bank account details can be left blank (for a blank mandate),
  # provided manually, or inferred from the ID of an existing
  # [mandate](#core-endpoints-mandates).
  #
  # By default, we'll generate PDF mandates in English.
  #
  # To generate a PDF mandate in another language, set the `Accept-Language`
  # header when creating the PDF mandate to the relevant [ISO
  # 639-1](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code
  # supported for the scheme.
  #
  # | Scheme           | Supported languages
  #
  #     |
  # | :--------------- |
  # :-------------------------------------------------------------------------------------------------------------------------------------------
  # |
  # | ACH              | English (`en`)
  #
  #     |
  # | Autogiro         | English (`en`), Swedish (`sv`)
  #
  #     |
  # | Bacs             | English (`en`)
  #
  #     |
  # | BECS             | English (`en`)
  #
  #     |
  # | BECS NZ          | English (`en`)
  #
  #     |
  # | Betalingsservice | Danish (`da`), English (`en`)
  #
  #     |
  # | PAD              | English (`en`)
  #
  #     |
  # | SEPA Core        | Danish (`da`), Dutch (`nl`), English (`en`), French
  # (`fr`), German (`de`), Italian (`it`), Portuguese (`pt`), Spanish (`es`),
  # Swedish (`sv`) |
  # Example URL: /mandate_pdfs
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_pdfs_service.rb#58
  def create(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_pdfs_service.rb#84
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandate_pdfs_service.rb#79
  def unenvelope_body(body); end
end

# Service for making requests to the Mandate endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/mandates_service.rb#12
class GoCardlessPro::Services::MandatesService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandates_service.rb#70
  def all(options = T.unsafe(nil)); end

  # Immediately cancels a mandate and all associated cancellable payments. Any
  # metadata supplied to this endpoint will be stored on the mandate cancellation
  # event it causes.
  #
  # This will fail with a `cancellation_failed` error if the mandate is already
  # cancelled.
  # Example URL: /mandates/:identity/actions/cancel
  #
  # apply to mandates created before 2016.
  #
  # @param identity # Unique identifier, beginning with "MD". Note that this prefix may not
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandates_service.rb#132
  def cancel(identity, options = T.unsafe(nil)); end

  # Creates a new mandate object.
  # Example URL: /mandates
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandates_service.rb#16
  def create(options = T.unsafe(nil)); end

  # Retrieves the details of an existing mandate.
  # Example URL: /mandates/:identity
  #
  # apply to mandates created before 2016.
  #
  # @param identity # Unique identifier, beginning with "MD". Note that this prefix may not
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandates_service.rb#83
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # mandates.
  # Example URL: /mandates
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandates_service.rb#52
  def list(options = T.unsafe(nil)); end

  # <a name="mandate_not_inactive"></a>Reinstates a cancelled or expired mandate
  # to the banks. You will receive a `resubmission_requested` webhook, but after
  # that reinstating the mandate follows the same process as its initial creation,
  # so you will receive a `submitted` webhook, followed by a `reinstated` or
  # `failed` webhook up to two working days later. Any metadata supplied to this
  # endpoint will be stored on the `resubmission_requested` event it causes.
  #
  # This will fail with a `mandate_not_inactive` error if the mandate is already
  # being submitted, or is active.
  #
  # Mandates can be resubmitted up to 10 times.
  # Example URL: /mandates/:identity/actions/reinstate
  #
  # apply to mandates created before 2016.
  #
  # @param identity # Unique identifier, beginning with "MD". Note that this prefix may not
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandates_service.rb#182
  def reinstate(identity, options = T.unsafe(nil)); end

  # Updates a mandate object. This accepts only the metadata parameter.
  # Example URL: /mandates/:identity
  #
  # apply to mandates created before 2016.
  #
  # @param identity # Unique identifier, beginning with "MD". Note that this prefix may not
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandates_service.rb#103
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandates_service.rb#226
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/mandates_service.rb#221
  def unenvelope_body(body); end
end

# Service for making requests to the NegativeBalanceLimit endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/negative_balance_limits_service.rb#12
class GoCardlessPro::Services::NegativeBalanceLimitsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/negative_balance_limits_service.rb#35
  def all(options = T.unsafe(nil)); end

  # Creates a new negative balance limit, which replaces the existing limit (if
  # present) for that currency and creditor combination.
  #
  # Example URL: /negative_balance_limits
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/negative_balance_limits_service.rb#47
  def create(options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of negative
  # balance limits.
  # Example URL: /negative_balance_limits
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/negative_balance_limits_service.rb#17
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/negative_balance_limits_service.rb#73
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/negative_balance_limits_service.rb#68
  def unenvelope_body(body); end
end

# Service for making requests to the PayerAuthorisation endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/payer_authorisations_service.rb#12
class GoCardlessPro::Services::PayerAuthorisationsService < ::GoCardlessPro::Services::BaseService
  # Confirms the Payer Authorisation, indicating that the resources are ready to
  # be created.
  # A Payer Authorisation cannot be confirmed if it hasn't been submitted yet.
  #
  # <p class="notice">
  #   The main use of the confirm endpoint is to enable integrators to acknowledge
  # the end of the setup process.
  #   They might want to make the payers go through some other steps after they go
  # through our flow or make them go through the necessary verification mechanism
  # (upcoming feature).
  # </p>
  # Example URL: /payer_authorisations/:identity/actions/confirm
  #
  # @param identity # Unique identifier, beginning with "PA".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payer_authorisations_service.rb#161
  def confirm(identity, options = T.unsafe(nil)); end

  # Creates a Payer Authorisation. The resource is saved to the database even if
  # incomplete. An empty array of incomplete_fields means that the resource is
  # valid. The ID of the resource is used for the other actions. This endpoint has
  # been designed this way so you do not need to save any payer data on your
  # servers or the browser while still being able to implement a progressive
  # solution, such as a multi-step form.
  # Example URL: /payer_authorisations
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payer_authorisations_service.rb#41
  def create(options = T.unsafe(nil)); end

  # Retrieves the details of a single existing Payer Authorisation. It can be used
  # for polling the status of a Payer Authorisation.
  # Example URL: /payer_authorisations/:identity
  #
  # @param identity # Unique identifier, beginning with "PA".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payer_authorisations_service.rb#19
  def get(identity, options = T.unsafe(nil)); end

  # Submits all the data previously pushed to this PayerAuthorisation for
  # verification. This time, a 200 HTTP status is returned if the resource is
  # valid and a 422 error response in case of validation errors. After it is
  # successfully submitted, the Payer Authorisation can no longer be edited.
  # Example URL: /payer_authorisations/:identity/actions/submit
  #
  # @param identity # Unique identifier, beginning with "PA".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payer_authorisations_service.rb#112
  def submit(identity, options = T.unsafe(nil)); end

  # Updates a Payer Authorisation. Updates the Payer Authorisation with the
  # request data. Can be invoked as many times as needed. Only fields present in
  # the request will be modified. An empty array of incomplete_fields means that
  # the resource is valid. This endpoint has been designed this way so you do not
  # need to save any payer data on your servers or the browser while still being
  # able to implement a progressive solution, such a multi-step form. <p
  # class="notice"> Note that in order to update the `metadata` attribute values
  # it must be sent completely as it overrides the previously existing values.
  # </p>
  # Example URL: /payer_authorisations/:identity
  #
  # @param identity # Unique identifier, beginning with "PA".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payer_authorisations_service.rb#86
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payer_authorisations_service.rb#205
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payer_authorisations_service.rb#200
  def unenvelope_body(body); end
end

# Service for making requests to the PayerTheme endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/payer_themes_service.rb#12
class GoCardlessPro::Services::PayerThemesService < ::GoCardlessPro::Services::BaseService
  # Creates a new payer theme associated with a creditor. If a creditor already
  # has payer themes, this will update the existing payer theme linked to the
  # creditor.
  # Example URL: /branding/payer_themes
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payer_themes_service.rb#18
  def create_for_creditor(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payer_themes_service.rb#44
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payer_themes_service.rb#39
  def unenvelope_body(body); end
end

# Service for making requests to the Payment endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/payments_service.rb#12
class GoCardlessPro::Services::PaymentsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payments_service.rb#75
  def all(options = T.unsafe(nil)); end

  # Cancels the payment if it has not already been submitted to the banks. Any
  # metadata supplied to this endpoint will be stored on the payment cancellation
  # event it causes.
  #
  # This will fail with a `cancellation_failed` error unless the payment's status
  # is `pending_submission`.
  # Example URL: /payments/:identity/actions/cancel
  #
  # @param identity # Unique identifier, beginning with "PM".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payments_service.rb#134
  def cancel(identity, options = T.unsafe(nil)); end

  # <a name="mandate_is_inactive"></a>Creates a new payment object.
  #
  # This fails with a `mandate_is_inactive` error if the linked
  # [mandate](#core-endpoints-mandates) is cancelled or has failed. Payments can
  # be created against mandates with status of: `pending_customer_approval`,
  # `pending_submission`, `submitted`, and `active`.
  # Example URL: /payments
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payments_service.rb#21
  def create(options = T.unsafe(nil)); end

  # Retrieves the details of a single existing payment.
  # Example URL: /payments/:identity
  #
  # @param identity # Unique identifier, beginning with "PM".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payments_service.rb#87
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # payments.
  # Example URL: /payments
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payments_service.rb#57
  def list(options = T.unsafe(nil)); end

  # <a name="retry_failed"></a>Retries a failed payment if the underlying mandate
  # is active. You will receive a `resubmission_requested` webhook, but after that
  # retrying the payment follows the same process as its initial creation, so you
  # will receive a `submitted` webhook, followed by a `confirmed` or `failed`
  # event. Any metadata supplied to this endpoint will be stored against the
  # payment submission event it causes.
  #
  # This will return a `retry_failed` error if the payment has not failed.
  #
  # Payments can be retried up to 3 times.
  # Example URL: /payments/:identity/actions/retry
  #
  # @param identity # Unique identifier, beginning with "PM".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payments_service.rb#182
  def retry(identity, options = T.unsafe(nil)); end

  # Updates a payment object. This accepts only the metadata parameter.
  # Example URL: /payments/:identity
  #
  # @param identity # Unique identifier, beginning with "PM".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payments_service.rb#106
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payments_service.rb#226
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payments_service.rb#221
  def unenvelope_body(body); end
end

# Service for making requests to the PayoutItem endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/payout_items_service.rb#12
class GoCardlessPro::Services::PayoutItemsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payout_items_service.rb#40
  def all(options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of items in
  # the payout.
  #
  # <strong>This endpoint only serves requests for payouts created in the last 6
  # months. Requests for older payouts will return an HTTP status <code>410
  # Gone</code>.</strong>
  #
  # Example URL: /payout_items
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payout_items_service.rb#22
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payout_items_service.rb#57
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payout_items_service.rb#52
  def unenvelope_body(body); end
end

# Service for making requests to the Payout endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/payouts_service.rb#12
class GoCardlessPro::Services::PayoutsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payouts_service.rb#35
  def all(options = T.unsafe(nil)); end

  # Retrieves the details of a single payout. For an example of how to reconcile
  # the transactions in a payout, see [this
  # guide](#events-reconciling-payouts-with-events).
  # Example URL: /payouts/:identity
  #
  # @param identity # Unique identifier, beginning with "PO".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payouts_service.rb#49
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # payouts.
  # Example URL: /payouts
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payouts_service.rb#17
  def list(options = T.unsafe(nil)); end

  # Updates a payout object. This accepts only the metadata parameter.
  # Example URL: /payouts/:identity
  #
  # @param identity # Unique identifier, beginning with "PO".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payouts_service.rb#68
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payouts_service.rb#96
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/payouts_service.rb#91
  def unenvelope_body(body); end
end

# Service for making requests to the RedirectFlow endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/redirect_flows_service.rb#12
class GoCardlessPro::Services::RedirectFlowsService < ::GoCardlessPro::Services::BaseService
  # This creates a [customer](#core-endpoints-customers), [customer bank
  # account](#core-endpoints-customer-bank-accounts), and
  # [mandate](#core-endpoints-mandates) using the details supplied by your
  # customer and returns the ID of the created mandate.
  #
  # This will return a `redirect_flow_incomplete` error if your customer has not
  # yet been redirected back to your site, and a `redirect_flow_already_completed`
  # error if your integration has already completed this flow. It will return a
  # `bad_request` error if the `session_token` differs to the one supplied when
  # the redirect flow was created.
  # Example URL: /redirect_flows/:identity/actions/complete
  #
  # @param identity # Unique identifier, beginning with "RE".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/redirect_flows_service.rb#82
  def complete(identity, options = T.unsafe(nil)); end

  # Creates a redirect flow object which can then be used to redirect your
  # customer to the GoCardless hosted payment pages.
  # Example URL: /redirect_flows
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/redirect_flows_service.rb#17
  def create(options = T.unsafe(nil)); end

  # Returns all details about a single redirect flow
  # Example URL: /redirect_flows/:identity
  #
  # @param identity # Unique identifier, beginning with "RE".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/redirect_flows_service.rb#54
  def get(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/redirect_flows_service.rb#126
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/redirect_flows_service.rb#121
  def unenvelope_body(body); end
end

# Service for making requests to the Refund endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/refunds_service.rb#12
class GoCardlessPro::Services::RefundsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/refunds_service.rb#86
  def all(options = T.unsafe(nil)); end

  # Creates a new refund object.
  #
  # This fails with:<a name="total_amount_confirmation_invalid"></a><a
  # name="number_of_refunds_exceeded"></a><a
  # name="available_refund_amount_insufficient"></a>
  #
  # - `total_amount_confirmation_invalid` if the confirmation amount doesn't match
  # the total amount refunded for the payment. This safeguard is there to prevent
  # two processes from creating refunds without awareness of each other.
  #
  # - `number_of_refunds_exceeded` if five or more refunds have already been
  # created against the payment.
  #
  # - `available_refund_amount_insufficient` if the creditor does not have
  # sufficient balance for refunds available to cover the cost of the requested
  # refund.
  #
  # Example URL: /refunds
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/refunds_service.rb#32
  def create(options = T.unsafe(nil)); end

  # Retrieves all details for a single refund
  # Example URL: /refunds/:identity
  #
  # @param identity # Unique identifier, beginning with "RF".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/refunds_service.rb#98
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # refunds.
  # Example URL: /refunds
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/refunds_service.rb#68
  def list(options = T.unsafe(nil)); end

  # Updates a refund object.
  # Example URL: /refunds/:identity
  #
  # @param identity # Unique identifier, beginning with "RF".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/refunds_service.rb#117
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/refunds_service.rb#145
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/refunds_service.rb#140
  def unenvelope_body(body); end
end

# Service for making requests to the ScenarioSimulator endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/scenario_simulators_service.rb#12
class GoCardlessPro::Services::ScenarioSimulatorsService < ::GoCardlessPro::Services::BaseService
  # Runs the specific scenario simulator against the specific resource
  # Example URL: /scenario_simulators/:identity/actions/run
  #
  # One of:
  # <ul>
  # <li>`creditor_verification_status_action_required`: Sets a creditor's
  # `verification status` to `action required`, meaning that the creditor
  # must provide further information to GoCardless in order to verify their
  # account to receive payouts.</li>
  # <li>`creditor_verification_status_in_review`: Sets a creditor's
  # `verification status` to `in review`, meaning that the creditor has
  # provided all of the information requested by GoCardless to verify their
  # account, and is now awaiting review.</li>
  # <li>`creditor_verification_status_successful`: Sets a creditor's
  # `verification status` to `successful`, meaning that the creditor is
  # fully verified and can receive payouts.</li>
  # <li>`payment_confirmed`: Transitions a payment through to `confirmed`.
  # It must start in the `pending_submission` state, and its mandate must be
  # in the `activated` state (unless it is a payment for ACH, BECS, BECS_NZ
  # or SEPA, in which cases the mandate may be `pending_submission`, since
  # their mandates are submitted with their first payment).</li>
  # <li>`payment_paid_out`: Transitions a payment through to `paid_out`,
  # having been collected successfully and paid out to you. It must start in
  # the `pending_submission` state, and its mandate must be in the
  # `activated` state (unless it is a payment for ACH, BECS, BECS_NZ or
  # SEPA, in which cases the mandate may be `pending_submission`, since
  # their mandates are submitted with their first payment).</li>
  # <li>`payment_failed`: Transitions a payment through to `failed`. It must
  # start in the `pending_submission` state, and its mandate must be in the
  # `activated` state (unless it is a payment for ACH, BECS, BECS_NZ or
  # SEPA, in which cases the mandate may be `pending_submission`, since
  # their mandates are submitted with their first payment).</li>
  # <li>`payment_charged_back`: Behaves the same as the `payout_paid_out`
  # simulator, except that the payment is transitioned to `charged_back`
  # after it is paid out, having been charged back by the customer.</li>
  # <li>`payment_chargeback_settled`: Behaves the same as the
  # `payment_charged_back` simulator, except that the charged back payment
  # is additionally included as a debit item in a payout, thereby settling
  # the charged back payment.</li>
  # <li>`payment_late_failure`: Transitions a payment through to
  # `late_failure`, having been apparently collected successfully
  # beforehand. It must start in the `pending_submission` state, and its
  # mandate must be in the `activated` state (unless it is a payment for
  # ACH, BECS, BECS_NZ or SEPA, in which cases the mandate may be
  # `pending_submission`, since their mandates are submitted with their
  # first payment). Not compatible with Autogiro mandates.</li>
  # <li>`payment_late_failure_settled`: Behaves the same as the
  # `payment_late_failure` simulator, except that the late failure is
  # additionally included as a debit item in a payout, thereby settling the
  # late failure.</li>
  # <li>`payment_submitted`: Transitions a payment to `submitted`, without
  # proceeding any further. It must start in the `pending_submission`
  # state.</li>
  # <li>`mandate_activated`: Transitions a mandate through to `activated`,
  # having been submitted to the banks and set up successfully. It must
  # start in the `pending_submission` state. Not compatible with ACH, BECS,
  # BECS_NZ and SEPA mandates, which are submitted and activated with their
  # first payment.</li>
  # <li>`mandate_customer_approval_granted`: Transitions a mandate through
  # to `pending_submission`, as if the customer approved the mandate
  # creation. It must start in the `pending_customer_approval` state.
  # Compatible only with Bacs and SEPA mandates, which support customer
  # signatures on the mandate. All payments associated with the mandate will
  # be transitioned to `pending_submission`. All subscriptions associated
  # with the mandate will become `active`.</li>
  # <li>`mandate_customer_approval_skipped`: Transitions a mandate through
  # to `pending_submission`, as if the customer skipped the mandate approval
  # during the mandate creation process. It must start in the
  # `pending_customer_approval` state. Compatible only with Bacs and SEPA
  # mandates, which support customer signatures on the mandate. All payments
  # associated with the mandate will be transitioned to
  # `pending_submission`. All subscriptions associated with the mandate will
  # become `active`.</li>
  # <li>`mandate_failed`: Transitions a mandate through to `failed`, having
  # been submitted to the banks but found to be invalid (for example due to
  # invalid bank details). It must start in the `pending_submission` or
  # `submitted` states. Not compatible with SEPA mandates, which are
  # submitted with their first payment.</li>
  # <li>`mandate_expired`: Transitions a mandate through to `expired`,
  # having been submitted to the banks, set up successfully and then expired
  # because no collection attempts were made against it for longer than the
  # scheme's dormancy period (13 months for Bacs, 3 years for SEPA, 15
  # months for ACH, Betalingsservice, and BECS). It must start in the
  # `pending_submission` state. Not compatible with Autogiro, BECS NZ, and
  # PAD mandates, which do not expire.</li>
  # <li>`mandate_transferred`: Transitions a mandate through to
  # `transferred`, having been submitted to the banks, set up successfully
  # and then moved to a new bank account due to the customer using the UK's
  # Current Account Switching Service (CASS). It must start in the
  # `pending_submission` state. Only compatible with Bacs mandates.</li>
  # <li>`mandate_transferred_with_resubmission`: Transitions a mandate
  # through `transferred` and resubmits it to the banks, can be caused be
  # the UK's Current Account Switching Service (CASS) or when a customer
  # contacts GoCardless to change their bank details. It must start in the
  # `pending_submission` state. Only compatible with Bacs mandates.</li>
  # <li>`mandate_suspended_by_payer`: Transitions a mandate to
  # `suspended_by_payer`, as if payer has suspended the mandate after it has
  # been setup successfully. It must start in the `activated` state. Only
  # compatible with PAY_TO mandates.</li>
  # <li>`refund_paid`: Transitions a refund to `paid`. It must start in
  # either the `pending_submission` or `submitted` state.</li>
  # <li>`refund_settled`: Transitions a refund to `paid`, if it's not
  # already, then generates a payout that includes the refund, thereby
  # settling the funds. It must start in one of `pending_submission`,
  # `submitted` or `paid` states.</li>
  # <li>`refund_bounced`: Transitions a refund to `bounced`. It must start
  # in either the `pending_submission`, `submitted`, or `paid` state.</li>
  # <li>`refund_returned`: Transitions a refund to `refund_returned`. The
  # refund must start in `pending_submission`.</li>
  # <li>`payout_bounced`: Transitions a payout to `bounced`. It must start
  # in the `paid` state.</li>
  # <li>`billing_request_fulfilled`: Authorises the billing request, and
  # then fulfils it. The billing request must be in the `pending` state,
  # with all actions completed except for `bank_authorisation`. Only billing
  # requests with a `payment_request` are supported.</li>
  # <li>`billing_request_fulfilled_and_payment_failed`: Authorises the
  # billing request, fulfils it, and moves the associated payment to
  # `failed`. The billing request must be in the `pending` state, with all
  # actions completed except for `bank_authorisation`. Only billing requests
  # with a `payment_request` are supported.</li>
  # <li>`billing_request_fulfilled_and_payment_paid_out`: Authorises the
  # billing request, fulfils it, and moves the associated payment to
  # `paid_out`. The billing request must be in the `pending` state, with all
  # actions completed except for `bank_authorisation`. Only billing requests
  # with a `payment_request` are supported.</li>
  # </ul>
  #
  # @param identity # The unique identifier of the simulator, used to initiate simulations.
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/scenario_simulators_service.rb#141
  def run(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/scenario_simulators_service.rb#169
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/scenario_simulators_service.rb#164
  def unenvelope_body(body); end
end

# Service for making requests to the SchemeIdentifier endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/scheme_identifiers_service.rb#12
class GoCardlessPro::Services::SchemeIdentifiersService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/scheme_identifiers_service.rb#109
  def all(options = T.unsafe(nil)); end

  # Creates a new scheme identifier. The scheme identifier status will be
  # `pending` while GoCardless is
  # processing the request. Once the scheme identifier is ready to be used the
  # status will be updated to `active`.
  # At this point, GoCardless will emit a scheme identifier activated event via
  # webhook to notify you of this change.
  # In Bacs, it will take up to five working days for a scheme identifier to
  # become active. On other schemes, including SEPA,
  # this happens instantly.
  #
  # #### Scheme identifier name validations
  #
  # The `name` field of a scheme identifier can contain alphanumeric characters,
  # spaces and
  # special characters.
  #
  # Its maximum length and the special characters it supports depend on the
  # scheme:
  #
  # | __scheme__        | __maximum length__ | __special characters allowed__
  #                 |
  # | :---------------- | :----------------- |
  # :-------------------------------------------------- |
  # | `bacs`            | 18 characters      | `/` `.` `&` `-`
  #                 |
  # | `sepa`            | 70 characters      | `/` `?` `:` `(` `)` `.` `,` `+` `&`
  # `<` `>` `'` `"` |
  # | `ach`             | 16 characters      | `/` `?` `:` `(` `)` `.` `,` `'` `+`
  # `-`             |
  # | `faster_payments` | 18 characters      | `/` `?` `:` `(` `)` `.` `,` `'` `+`
  # `-`             |
  #
  # The validation error that gets returned for an invalid name will contain a
  # suggested name
  # in the metadata that is guaranteed to pass name validations.
  #
  # You should ensure that the name you set matches the legal name or the trading
  # name of
  # the creditor, otherwise, there is an increased risk of chargeback.
  #
  # Example URL: /scheme_identifiers
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/scheme_identifiers_service.rb#55
  def create(options = T.unsafe(nil)); end

  # Retrieves the details of an existing scheme identifier.
  # Example URL: /scheme_identifiers/:identity
  #
  # @param identity # Unique identifier, usually beginning with "SU".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/scheme_identifiers_service.rb#121
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your scheme
  # identifiers.
  # Example URL: /scheme_identifiers
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/scheme_identifiers_service.rb#91
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/scheme_identifiers_service.rb#145
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/scheme_identifiers_service.rb#140
  def unenvelope_body(body); end
end

# Service for making requests to the Subscription endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#12
class GoCardlessPro::Services::SubscriptionsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#71
  def all(options = T.unsafe(nil)); end

  # Immediately cancels a subscription; no more payments will be created under it.
  # Any metadata supplied to this endpoint will be stored on the payment
  # cancellation event it causes.
  #
  # This will fail with a cancellation_failed error if the subscription is already
  # cancelled or finished.
  # Example URL: /subscriptions/:identity/actions/cancel
  #
  # @param identity # Unique identifier, beginning with "SB".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#286
  def cancel(identity, options = T.unsafe(nil)); end

  # Creates a new subscription object
  # Example URL: /subscriptions
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#16
  def create(options = T.unsafe(nil)); end

  # Retrieves the details of a single subscription.
  # Example URL: /subscriptions/:identity
  #
  # @param identity # Unique identifier, beginning with "SB".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#83
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # subscriptions. Please note if the subscriptions are related to customers who
  # have been removed, they will not be shown in the response.
  # Example URL: /subscriptions
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#53
  def list(options = T.unsafe(nil)); end

  # Pause a subscription object.
  # No payments will be created until it is resumed.
  #
  # This can only be used when a subscription is collecting a fixed number of
  # payments (created using `count`),
  # when they continue forever (created without `count` or `end_date`) or
  # the subscription is already paused for a number of cycles.
  #
  # When `pause_cycles` is omitted the subscription is paused until the [resume
  # endpoint](#subscriptions-resume-a-subscription) is called.
  # If the subscription is collecting a fixed number of payments, `end_date` will
  # be set to `null`.
  # When paused indefinitely, `upcoming_payments` will be empty.
  #
  # When `pause_cycles` is provided the subscription will be paused for the number
  # of cycles requested.
  # If the subscription is collecting a fixed number of payments, `end_date` will
  # be set to a new value.
  # When paused for a number of cycles, `upcoming_payments` will still contain the
  # upcoming charge dates.
  #
  # This fails with:
  #
  # - `forbidden` if the subscription was created by an app and you are not
  # authenticated as that app, or if the subscription was not created by an app
  # and you are authenticated as an app
  #
  # - `validation_failed` if invalid data is provided when attempting to pause a
  # subscription.
  #
  # - `subscription_paused_cannot_update_cycles` if the subscription is already
  # paused for a number of cycles and the request provides a value for
  # `pause_cycle`.
  #
  # - `subscription_cannot_be_paused` if the subscription cannot be paused.
  #
  # - `subscription_already_ended` if the subscription has taken all payments.
  #
  # - `pause_cycles_must_be_greater_than_or_equal_to` if the provided value for
  # `pause_cycles` cannot be satisfied.
  # Example URL: /subscriptions/:identity/actions/pause
  #
  # @param identity # Unique identifier, beginning with "SB".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#187
  def pause(identity, options = T.unsafe(nil)); end

  # Resume a subscription object.
  # Payments will start to be created again based on the subscriptions recurrence
  # rules.
  # The `charge_date` on the next payment will be the same as the subscriptions
  # `earliest_charge_date_after_resume`
  #
  # This fails with:
  #
  # - `forbidden` if the subscription was created by an app and you are not
  # authenticated as that app, or if the subscription was not created by an app
  # and you are authenticated as an app
  #
  # - `validation_failed` if invalid data is provided when attempting to resume a
  # subscription.
  #
  # - `subscription_not_paused` if the subscription is not paused.
  #
  # Example URL: /subscriptions/:identity/actions/resume
  #
  # @param identity # Unique identifier, beginning with "SB".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#242
  def resume(identity, options = T.unsafe(nil)); end

  # Updates a subscription object.
  #
  # This fails with:
  #
  # - `validation_failed` if invalid data is provided when attempting to update a
  # subscription.
  #
  # - `subscription_not_active` if the subscription is no longer active.
  #
  # - `subscription_already_ended` if the subscription has taken all payments.
  #
  # - `mandate_payments_require_approval` if the amount is being changed and the
  # mandate requires approval.
  #
  # - `number_of_subscription_amendments_exceeded` error if the subscription
  # amount has already been changed 10 times.
  #
  # - `forbidden` if the amount is being changed, and the subscription was created
  # by an app and you are not authenticated as that app, or if the subscription
  # was not created by an app and you are authenticated as an app
  #
  # - `resource_created_by_another_app` if the app fee is being changed, and the
  # subscription was created by an app other than the app you are authenticated as
  #
  # Example URL: /subscriptions/:identity
  #
  # @param identity # Unique identifier, beginning with "SB".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#125
  def update(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#330
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/subscriptions_service.rb#325
  def unenvelope_body(body); end
end

# Service for making requests to the TaxRate endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/tax_rates_service.rb#12
class GoCardlessPro::Services::TaxRatesService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/tax_rates_service.rb#35
  def all(options = T.unsafe(nil)); end

  # Retrieves the details of a tax rate.
  # Example URL: /tax_rates/:identity
  #
  # @param identity # The unique identifier created by the jurisdiction, tax type and version
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/tax_rates_service.rb#47
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of all tax
  # rates.
  # Example URL: /tax_rates
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/tax_rates_service.rb#17
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/tax_rates_service.rb#71
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/tax_rates_service.rb#66
  def unenvelope_body(body); end
end

# Service for making requests to the TransferredMandate endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/transferred_mandates_service.rb#12
class GoCardlessPro::Services::TransferredMandatesService < ::GoCardlessPro::Services::BaseService
  # Returns new customer bank details for a mandate that's been recently
  # transferred
  # Example URL: /transferred_mandates/:identity
  #
  # apply to mandates created before 2016.
  #
  # @param identity # Unique identifier, beginning with "MD". Note that this prefix may not
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/transferred_mandates_service.rb#20
  def transferred_mandates(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/transferred_mandates_service.rb#44
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/transferred_mandates_service.rb#39
  def unenvelope_body(body); end
end

# Service for making requests to the VerificationDetail endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/verification_details_service.rb#12
class GoCardlessPro::Services::VerificationDetailsService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/verification_details_service.rb#53
  def all(options = T.unsafe(nil)); end

  # Creates a new verification detail
  # Example URL: /verification_details
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/verification_details_service.rb#16
  def create(options = T.unsafe(nil)); end

  # Returns a list of verification details belonging to a creditor.
  # Example URL: /verification_details
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/verification_details_service.rb#35
  def list(options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/verification_details_service.rb#70
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/verification_details_service.rb#65
  def unenvelope_body(body); end
end

# Service for making requests to the Webhook endpoints
#
# source://gocardless_pro//lib/gocardless_pro/services/webhooks_service.rb#12
class GoCardlessPro::Services::WebhooksService < ::GoCardlessPro::Services::BaseService
  # Get a lazily enumerated list of all the items returned. This is similar to the `list` method but will paginate for you automatically.
  #
  # Otherwise they will be the body of the request.
  #
  # @param options [Hash] parameters as a hash. If the request is a GET, these will be converted to query parameters.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/webhooks_service.rb#35
  def all(options = T.unsafe(nil)); end

  # Retrieves the details of an existing webhook.
  # Example URL: /webhooks/:identity
  #
  # @param identity # Unique identifier, beginning with "WB".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/webhooks_service.rb#47
  def get(identity, options = T.unsafe(nil)); end

  # Returns a [cursor-paginated](#api-usage-cursor-pagination) list of your
  # webhooks.
  # Example URL: /webhooks
  #
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/webhooks_service.rb#17
  def list(options = T.unsafe(nil)); end

  # Requests for a previous webhook to be sent again
  # Example URL: /webhooks/:identity/actions/retry
  #
  # @param identity # Unique identifier, beginning with "WB".
  # @param options [Hash] parameters as a hash, under a params key.
  #
  # source://gocardless_pro//lib/gocardless_pro/services/webhooks_service.rb#66
  def retry(identity, options = T.unsafe(nil)); end

  private

  # return the key which API responses will envelope data under
  #
  # source://gocardless_pro//lib/gocardless_pro/services/webhooks_service.rb#110
  def envelope_key; end

  # Unenvelope the response of the body using the service's `envelope_key`
  #
  # @param body [Hash]
  #
  # source://gocardless_pro//lib/gocardless_pro/services/webhooks_service.rb#105
  def unenvelope_body(body); end
end

# Current version of the GC gem
#
# source://gocardless_pro//lib/gocardless_pro/version.rb#6
GoCardlessPro::VERSION = T.let(T.unsafe(nil), String)

# Thrown when the API returns a validation error
#
# source://gocardless_pro//lib/gocardless_pro/error/validation_error.rb#3
class GoCardlessPro::ValidationError < ::GoCardlessPro::Error; end

# source://gocardless_pro//lib/gocardless_pro/webhook.rb#4
class GoCardlessPro::Webhook
  class << self
    # Validates that a webhook was genuinely sent by GoCardless using
    # `.signature_valid?`, and then parses it into an array of
    # `GoCardlessPro::Resources::Event` objects representing each event
    # included in the webhook
    #
    # @option options
    # @option options
    # @option options
    # @param options [Hash] a customizable set of options
    # @raise [InvalidSignatureError] if the signature header specified does not match
    #   the signature computed using the request body and webhook endpoint secret
    # @raise [ArgumentError] if a required keyword argument is not provided or is not
    #   of the required type
    # @return [Array<GoCardlessPro::Resources::Event>] the events included
    #   in the webhook
    #
    # source://gocardless_pro//lib/gocardless_pro/webhook.rb#24
    def parse(options = T.unsafe(nil)); end

    # Validates that a webhook was genuinely sent by GoCardless by computing its
    # signature using the body and your webhook endpoint secret, and comparing that with
    # the signature included in the `Webhook-Signature` header
    #
    # @option options
    # @option options
    # @option options
    # @param options [Hash] a customizable set of options
    # @raise [ArgumentError] if a required keyword argument is not provided or is not
    #   of the required type
    # @return [Boolean] whether the webhook's signature is valid
    #
    # source://gocardless_pro//lib/gocardless_pro/webhook.rb#53
    def signature_valid?(options = T.unsafe(nil)); end

    private

    # source://gocardless_pro//lib/gocardless_pro/webhook.rb#71
    def secure_compare(a, b); end

    # @raise [ArgumentError]
    #
    # source://gocardless_pro//lib/gocardless_pro/webhook.rb#82
    def validate_options!(options); end
  end
end

# source://gocardless_pro//lib/gocardless_pro/webhook.rb#5
class GoCardlessPro::Webhook::InvalidSignatureError < ::StandardError; end
