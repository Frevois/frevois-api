# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `analytics-ruby` gem.
# Please instead update this file by running `bin/tapioca gem analytics-ruby`.


# source://analytics-ruby//lib/segment/analytics/version.rb#1
module Segment; end

# source://analytics-ruby//lib/segment/analytics/version.rb#2
class Segment::Analytics
  include ::Segment::Analytics::Logging

  # Initializes a new instance of {Segment::Analytics::Client}, to which all
  # method calls are proxied.
  #
  # @option options
  # @param options includes options that are passed down to
  #   {Segment::Analytics::Client#initialize}
  # @return [Analytics] a new instance of Analytics
  #
  # source://analytics-ruby//lib/segment/analytics.rb#21
  def initialize(options = T.unsafe(nil)); end

  # source://analytics-ruby//lib/segment/analytics.rb#26
  def method_missing(message, *args, &block); end

  private

  # @return [Boolean]
  #
  # source://analytics-ruby//lib/segment/analytics.rb#34
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    # source://analytics-ruby//lib/segment/analytics/logging.rb#49
    def logger; end
  end
end

# source://analytics-ruby//lib/segment/analytics/backoff_policy.rb#5
class Segment::Analytics::BackoffPolicy
  include ::Segment::Analytics::Defaults::BackoffPolicy

  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash]
  # @return [BackoffPolicy] a new instance of BackoffPolicy
  #
  # source://analytics-ruby//lib/segment/analytics/backoff_policy.rb#15
  def initialize(opts = T.unsafe(nil)); end

  # @return [Numeric] the next backoff interval, in milliseconds.
  #
  # source://analytics-ruby//lib/segment/analytics/backoff_policy.rb#25
  def next_interval; end

  private

  # source://analytics-ruby//lib/segment/analytics/backoff_policy.rb#36
  def add_jitter(base, randomization_factor); end
end

# source://analytics-ruby//lib/segment/analytics/client.rb#11
class Segment::Analytics::Client
  include ::Segment::Analytics::Utils
  include ::Segment::Analytics::Logging

  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash]
  # @return [Client] a new instance of Client
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#20
  def initialize(opts = T.unsafe(nil)); end

  # Aliases a user from one id to another
  #
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @param attrs [Hash]
  # @see https://segment.com/docs/sources/server/ruby/#alias
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#96
  def alias(attrs); end

  # Synchronously waits until the worker has flushed the queue.
  #
  # Use only for scripts which are not long-running, and will specifically
  # exit
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#40
  def flush; end

  # Associates a user identity with a group.
  #
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @param attrs [Hash]
  # @see https://segment.com/docs/sources/server/ruby/#group
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#110
  def group(attrs); end

  # Identifies a user
  #
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @param attrs [Hash]
  # @see https://segment.com/docs/sources/server/ruby/#identify
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#83
  def identify(attrs); end

  # Records a page view
  #
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @param attrs [Hash]
  # @see https://segment.com/docs/sources/server/ruby/#page
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#124
  def page(attrs); end

  # @return [Fixnum] number of messages in the queue
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#143
  def queued_messages; end

  # Records a screen view (for a mobile app)
  #
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @param attrs [Hash]
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#137
  def screen(attrs); end

  # source://analytics-ruby//lib/segment/analytics/client.rb#147
  def test_queue; end

  # Tracks an event
  #
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @param attrs [Hash]
  # @see https://segment.com/docs/sources/server/ruby/#track
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#70
  def track(attrs); end

  private

  # private: Checks that the write_key is properly initialized
  #
  # @raise [ArgumentError]
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#182
  def check_write_key!; end

  # private: Enqueues the action.
  #
  # returns Boolean of whether the item was added to the queue.
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#160
  def enqueue(action); end

  # source://analytics-ruby//lib/segment/analytics/client.rb#186
  def ensure_worker_running; end

  # @return [Boolean]
  #
  # source://analytics-ruby//lib/segment/analytics/client.rb#196
  def worker_running?; end

  class << self
    # source://analytics-ruby//lib/segment/analytics/logging.rb#49
    def logger; end
  end
end

# source://analytics-ruby//lib/segment/analytics/defaults.rb#3
module Segment::Analytics::Defaults; end

# source://analytics-ruby//lib/segment/analytics/defaults.rb#28
module Segment::Analytics::Defaults::BackoffPolicy; end

# source://analytics-ruby//lib/segment/analytics/defaults.rb#30
Segment::Analytics::Defaults::BackoffPolicy::MAX_TIMEOUT_MS = T.let(T.unsafe(nil), Integer)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#29
Segment::Analytics::Defaults::BackoffPolicy::MIN_TIMEOUT_MS = T.let(T.unsafe(nil), Integer)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#31
Segment::Analytics::Defaults::BackoffPolicy::MULTIPLIER = T.let(T.unsafe(nil), Float)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#32
Segment::Analytics::Defaults::BackoffPolicy::RANDOMIZATION_FACTOR = T.let(T.unsafe(nil), Float)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#19
module Segment::Analytics::Defaults::Message; end

# 32Kb
#
# source://analytics-ruby//lib/segment/analytics/defaults.rb#20
Segment::Analytics::Defaults::Message::MAX_BYTES = T.let(T.unsafe(nil), Integer)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#23
module Segment::Analytics::Defaults::MessageBatch; end

# 500Kb
#
# source://analytics-ruby//lib/segment/analytics/defaults.rb#24
Segment::Analytics::Defaults::MessageBatch::MAX_BYTES = T.let(T.unsafe(nil), Integer)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#25
Segment::Analytics::Defaults::MessageBatch::MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#15
module Segment::Analytics::Defaults::Queue; end

# source://analytics-ruby//lib/segment/analytics/defaults.rb#16
Segment::Analytics::Defaults::Queue::MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#4
module Segment::Analytics::Defaults::Request; end

# source://analytics-ruby//lib/segment/analytics/defaults.rb#9
Segment::Analytics::Defaults::Request::HEADERS = T.let(T.unsafe(nil), Hash)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#5
Segment::Analytics::Defaults::Request::HOST = T.let(T.unsafe(nil), String)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#7
Segment::Analytics::Defaults::Request::PATH = T.let(T.unsafe(nil), String)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#6
Segment::Analytics::Defaults::Request::PORT = T.let(T.unsafe(nil), Integer)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#12
Segment::Analytics::Defaults::Request::RETRIES = T.let(T.unsafe(nil), Integer)

# source://analytics-ruby//lib/segment/analytics/defaults.rb#8
Segment::Analytics::Defaults::Request::SSL = T.let(T.unsafe(nil), TrueClass)

# Handles parsing fields according to the Segment Spec
#
# @see https://segment.com/docs/spec/
#
# source://analytics-ruby//lib/segment/analytics/field_parser.rb#6
class Segment::Analytics::FieldParser
  extend ::Segment::Analytics::Utils

  class << self
    # In addition to the common fields, alias accepts:
    #
    # - "previous_id"
    #
    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#51
    def parse_for_alias(fields); end

    # In addition to the common fields, group accepts:
    #
    # - "group_id"
    # - "traits"
    #
    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#67
    def parse_for_group(fields); end

    # In addition to the common fields, identify accepts:
    #
    # - "traits"
    #
    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#35
    def parse_for_identify(fields); end

    # In addition to the common fields, page accepts:
    #
    # - "name"
    # - "properties"
    #
    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#89
    def parse_for_page(fields); end

    # In addition to the common fields, screen accepts:
    #
    # - "name"
    # - "properties"
    # - "category" (Not in spec, retained for backward compatibility"
    #
    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#111
    def parse_for_screen(fields); end

    # In addition to the common fields, track accepts:
    #
    # - "event"
    # - "properties"
    #
    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#14
    def parse_for_track(fields); end

    private

    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#172
    def add_context!(context); end

    # @raise [ArgumentError]
    #
    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#186
    def check_is_hash!(obj, name); end

    # private: Ensures that a string is non-empty
    #
    # obj    - String|Number that must be non-blank
    # name   - Name of the validated value
    #
    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#180
    def check_presence!(obj, name); end

    # @raise [ArgumentError]
    #
    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#168
    def check_timestamp!(timestamp); end

    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#162
    def check_user_id!(fields); end

    # source://analytics-ruby//lib/segment/analytics/field_parser.rb#136
    def parse_common_fields(fields); end
  end
end

# source://analytics-ruby//lib/segment/analytics/logging.rb#29
module Segment::Analytics::Logging
  # source://analytics-ruby//lib/segment/analytics/logging.rb#55
  def logger; end

  class << self
    # @private
    #
    # source://analytics-ruby//lib/segment/analytics/logging.rb#47
    def included(base); end

    # source://analytics-ruby//lib/segment/analytics/logging.rb#31
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://analytics-ruby//lib/segment/analytics/logging.rb#44
    def logger=(_arg0); end
  end
end

# A batch of `Message`s to be sent to the API
#
# source://analytics-ruby//lib/segment/analytics/message_batch.rb#7
class Segment::Analytics::MessageBatch
  include ::Segment::Analytics::Logging
  include ::Segment::Analytics::Defaults::MessageBatch
  extend ::Forwardable

  # @return [MessageBatch] a new instance of MessageBatch
  #
  # source://analytics-ruby//lib/segment/analytics/message_batch.rb#14
  def initialize(max_message_count); end

  # source://analytics-ruby//lib/segment/analytics/message_batch.rb#20
  def <<(message); end

  # source://analytics-ruby//lib/segment/analytics/message_batch.rb#40
  def clear; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://analytics-ruby//lib/segment/analytics/message_batch.rb#36
  def full?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def length(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def to_json(*args, **_arg1, &block); end

  private

  # @return [Boolean]
  #
  # source://analytics-ruby//lib/segment/analytics/message_batch.rb#51
  def item_count_exhausted?; end

  # @return [Boolean]
  #
  # source://analytics-ruby//lib/segment/analytics/message_batch.rb#55
  def message_too_big?(message_json_size); end

  # We consider the max size here as just enough to leave room for one more
  # message of the largest size possible. This is a shortcut that allows us
  # to use a native Ruby `Queue` that doesn't allow peeking. The tradeoff
  # here is that we might fit in less messages than possible into a batch.
  #
  # The alternative is to use our own `Queue` implementation that allows
  # peeking, and to consider the next message size when calculating whether
  # the message can be accomodated in this batch.
  #
  # @return [Boolean]
  #
  # source://analytics-ruby//lib/segment/analytics/message_batch.rb#67
  def size_exhausted?; end

  class << self
    # source://analytics-ruby//lib/segment/analytics/logging.rb#49
    def logger; end
  end
end

# source://analytics-ruby//lib/segment/analytics/message_batch.rb#8
class Segment::Analytics::MessageBatch::JSONGenerationError < ::StandardError; end

# Wraps an existing logger and adds a prefix to all messages
#
# source://analytics-ruby//lib/segment/analytics/logging.rb#6
class Segment::Analytics::PrefixedLogger
  # @return [PrefixedLogger] a new instance of PrefixedLogger
  #
  # source://analytics-ruby//lib/segment/analytics/logging.rb#7
  def initialize(logger, prefix); end

  # source://analytics-ruby//lib/segment/analytics/logging.rb#12
  def debug(msg); end

  # source://analytics-ruby//lib/segment/analytics/logging.rb#24
  def error(msg); end

  # source://analytics-ruby//lib/segment/analytics/logging.rb#16
  def info(msg); end

  # source://analytics-ruby//lib/segment/analytics/logging.rb#20
  def warn(msg); end
end

# source://analytics-ruby//lib/segment/analytics/response.rb#3
class Segment::Analytics::Response
  # public: Simple class to wrap responses from the API
  #
  # @return [Response] a new instance of Response
  #
  # source://analytics-ruby//lib/segment/analytics/response.rb#9
  def initialize(status = T.unsafe(nil), error = T.unsafe(nil)); end

  # Returns the value of attribute error.
  #
  # source://analytics-ruby//lib/segment/analytics/response.rb#4
  def error; end

  # Returns the value of attribute status.
  #
  # source://analytics-ruby//lib/segment/analytics/response.rb#4
  def status; end
end

# source://analytics-ruby//lib/segment/analytics/test_queue.rb#3
class Segment::Analytics::TestQueue
  # @return [TestQueue] a new instance of TestQueue
  #
  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#6
  def initialize; end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#18
  def <<(message); end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#10
  def [](key); end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#23
  def alias; end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#27
  def all; end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#14
  def count; end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#31
  def group; end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#35
  def identify; end

  # Returns the value of attribute messages.
  #
  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#4
  def messages; end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#39
  def page; end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#51
  def reset!; end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#43
  def screen; end

  # source://analytics-ruby//lib/segment/analytics/test_queue.rb#47
  def track; end
end

# source://analytics-ruby//lib/segment/analytics/transport.rb#12
class Segment::Analytics::Transport
  include ::Segment::Analytics::Defaults::Request
  include ::Segment::Analytics::Utils
  include ::Segment::Analytics::Logging

  # @return [Transport] a new instance of Transport
  #
  # source://analytics-ruby//lib/segment/analytics/transport.rb#17
  def initialize(options = T.unsafe(nil)); end

  # Sends a batch of messages to the API
  #
  # @return [Response] API response
  #
  # source://analytics-ruby//lib/segment/analytics/transport.rb#38
  def send(write_key, batch); end

  # Closes a persistent connection if it exists
  #
  # source://analytics-ruby//lib/segment/analytics/transport.rb#61
  def shutdown; end

  private

  # Takes a block that returns [result, should_retry].
  #
  # Retries upto `retries_remaining` times, if `should_retry` is false or
  # an exception is raised. `@backoff_policy` is used to determine the
  # duration to sleep between attempts
  #
  # Returns [last_result, raised_exception]
  #
  # source://analytics-ruby//lib/segment/analytics/transport.rb#87
  def retry_with_backoff(retries_remaining, &block); end

  # Sends a request for the batch, returns [status_code, body]
  #
  # source://analytics-ruby//lib/segment/analytics/transport.rb#109
  def send_request(write_key, batch); end

  # @return [Boolean]
  #
  # source://analytics-ruby//lib/segment/analytics/transport.rb#67
  def should_retry_request?(status_code, body); end

  class << self
    # source://analytics-ruby//lib/segment/analytics/logging.rb#49
    def logger; end

    # source://analytics-ruby//lib/segment/analytics/transport.rb#132
    def stub; end

    # Sets the attribute stub
    #
    # @param value the value to set the attribute stub to.
    #
    # source://analytics-ruby//lib/segment/analytics/transport.rb#130
    def stub=(_arg0); end
  end
end

# source://analytics-ruby//lib/segment/analytics/utils.rb#5
module Segment::Analytics::Utils
  extend ::Segment::Analytics::Utils

  # source://analytics-ruby//lib/segment/analytics/utils.rb#71
  def date_in_iso8601(date); end

  # source://analytics-ruby//lib/segment/analytics/utils.rb#54
  def datetime_in_iso8601(datetime); end

  # source://analytics-ruby//lib/segment/analytics/utils.rb#75
  def formatted_offset(time, colon = T.unsafe(nil), alternate_utc_string = T.unsafe(nil)); end

  # public: Returns a new hash with all the date values in the into iso8601
  #         strings
  #
  # source://analytics-ruby//lib/segment/analytics/utils.rb#33
  def isoify_dates(hash); end

  # public: Converts all the date values in the into iso8601 strings in place
  #
  # source://analytics-ruby//lib/segment/analytics/utils.rb#41
  def isoify_dates!(hash); end

  # source://analytics-ruby//lib/segment/analytics/utils.rb#79
  def seconds_to_utc_offset(seconds, colon = T.unsafe(nil)); end

  # public: Return a new hash with keys as strings
  #
  # source://analytics-ruby//lib/segment/analytics/utils.rb#24
  def stringify_keys(hash); end

  # public: Return a new hash with keys converted from strings to symbols
  #
  # source://analytics-ruby//lib/segment/analytics/utils.rb#10
  def symbolize_keys(hash); end

  # public: Convert hash keys from strings to symbols in place
  #
  # source://analytics-ruby//lib/segment/analytics/utils.rb#18
  def symbolize_keys!(hash); end

  # source://analytics-ruby//lib/segment/analytics/utils.rb#67
  def time_in_iso8601(time); end

  # public: Returns a uid string
  #
  # source://analytics-ruby//lib/segment/analytics/utils.rb#47
  def uid; end
end

# source://analytics-ruby//lib/segment/analytics/utils.rb#84
Segment::Analytics::Utils::UTC_OFFSET_WITHOUT_COLON = T.let(T.unsafe(nil), String)

# source://analytics-ruby//lib/segment/analytics/utils.rb#83
Segment::Analytics::Utils::UTC_OFFSET_WITH_COLON = T.let(T.unsafe(nil), String)

# source://analytics-ruby//lib/segment/analytics/version.rb#3
Segment::Analytics::VERSION = T.let(T.unsafe(nil), String)

# source://analytics-ruby//lib/segment/analytics/worker.rb#8
class Segment::Analytics::Worker
  include ::Segment::Analytics::Utils
  include ::Segment::Analytics::Defaults
  include ::Segment::Analytics::Logging

  # public: Creates a new worker
  #
  # The worker continuously takes messages off the queue
  # and makes requests to the segment.io api
  #
  # queue   - Queue synchronized between client and worker
  # write_key  - String of the project's Write key
  # options - Hash of worker options
  #           batch_size - Fixnum of how many items to send in a batch
  #           on_error   - Proc of what to do on an error
  #
  # @return [Worker] a new instance of Worker
  #
  # source://analytics-ruby//lib/segment/analytics/worker.rb#24
  def initialize(queue, write_key, options = T.unsafe(nil)); end

  # public: Check whether we have outstanding requests.
  #
  # @return [Boolean]
  #
  # source://analytics-ruby//lib/segment/analytics/worker.rb#56
  def is_requesting?; end

  # public: Continuously runs the loop to check for new events
  #
  # source://analytics-ruby//lib/segment/analytics/worker.rb#37
  def run; end

  private

  # source://analytics-ruby//lib/segment/analytics/worker.rb#62
  def consume_message_from_queue!; end

  class << self
    # source://analytics-ruby//lib/segment/analytics/logging.rb#49
    def logger; end
  end
end
