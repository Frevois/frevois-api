# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-instrumentation-action_mailer` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-instrumentation-action_mailer`.


# OpenTelemetry is an open source observability framework, providing a
# general-purpose API, SDK, and related tools required for the instrumentation
# of cloud-native software, frameworks, and libraries.
#
# The OpenTelemetry module provides global accessors for telemetry objects.
# See the documentation for the `opentelemetry-api` gem for details.
#
# source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation.rb#13
module OpenTelemetry
  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#36
  def error_handler; end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#27
  def error_handler=(_arg0); end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#44
  def handle_error(exception: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#30
  def logger; end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#27
  def logger=(_arg0); end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#69
  def propagation; end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#27
  def propagation=(_arg0); end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#64
  def tracer_provider; end

  # source://opentelemetry-api/1.4.0/lib/opentelemetry.rb#52
  def tracer_provider=(provider); end
end

# Instrumentation should be able to handle the case when the library is not installed on a user's system.
#
# source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation.rb#15
module OpenTelemetry::Instrumentation
  # source://opentelemetry-registry/0.3.1/lib/opentelemetry/instrumentation.rb#21
  def registry; end
end

# Contains the OpenTelemetry instrumentation for the ActionMailer gem
#
# source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer.rb#13
module OpenTelemetry::Instrumentation::ActionMailer; end

# The {OpenTelemetry::Instrumentation::ActionMailer::Instrumentation} class contains logic to detect and install the ActionMailer instrumentation
#
# Installation and configuration of this instrumentation is done within the
# {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry/SDK#configure-instance_method OpenTelemetry::SDK#configure}
# block, calling {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry%2FSDK%2FConfigurator:use use()}
# or {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry%2FSDK%2FConfigurator:use_all use_all()}.
#
# ## Configuration keys and options
#
# ### `:disallowed_notification_payload_keys`
#
# Specifies an array of keys that should be excluded from the `deliver.action_mailer` notification payload as span attributes.
#
# ### `:disallowed_process_payload_keys`
#
# Specifies an array of keys that should be excluded from the `process.action_mailer` notification payload as span attributes.
#
# ### `:notification_payload_transform`
#
# - `proc` **default** `nil`
#
# Specifies custom proc used to extract span attributes form the `deliver.action_mailer` notification payload. Use this to rename keys, extract nested values, or perform any other custom logic.
#
# ### `:process_payload_transform`
#
# - `proc` **default** `nil`
#
# Specifies custom proc used to extract span attributes form the `process.action_mailer` notification payload. Use this to rename keys, extract nested values, or perform any other custom logic.
#
# ### `:email_address`
#
# - `symbol` **default** `:omit`
#
# Specifies whether to include email addresses in the notification payload. Valid values are `:omit` and `:include`.
#
# @example An explicit default configuration
#   OpenTelemetry::SDK.configure do |c|
#   c.use_all({
#   'OpenTelemetry::Instrumentation::ActionMailer' => {
#   disallowed_notification_payload_keys: [],
#   disallowed_process_payload_keys: [],
#   notification_payload_transform: nil,
#   process_payload_transform: nil,
#   email_address: :omit,
#   },
#   })
#   end
#
# source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer/instrumentation.rb#57
class OpenTelemetry::Instrumentation::ActionMailer::Instrumentation < ::OpenTelemetry::Instrumentation::Base
  private

  # source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer/instrumentation.rb#112
  def _config; end

  # source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer/instrumentation.rb#93
  def ecs_mail_convention; end

  # source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer/instrumentation.rb#83
  def gem_version; end

  # source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer/instrumentation.rb#130
  def require_dependencies; end

  # source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer/instrumentation.rb#87
  def resolve_email_address; end

  # email attribute key convention is obtained from: https://www.elastic.co/guide/en/ecs/8.11/ecs-email.html
  #
  # source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer/instrumentation.rb#117
  def transform_payload(payload); end
end

# source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer/instrumentation.rb#59
OpenTelemetry::Instrumentation::ActionMailer::Instrumentation::EMAIL_ATTRIBUTE = T.let(T.unsafe(nil), Array)

# source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer/instrumentation.rb#58
OpenTelemetry::Instrumentation::ActionMailer::Instrumentation::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://opentelemetry-instrumentation-action_mailer//lib/opentelemetry/instrumentation/action_mailer/version.rb#10
OpenTelemetry::Instrumentation::ActionMailer::VERSION = T.let(T.unsafe(nil), String)
